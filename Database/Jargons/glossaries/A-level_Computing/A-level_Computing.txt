This is a book about A-Level Computer Science. It aims to fit in with the AQA and OCR GCE A-Level Computer Science sylla<B>Bus</B> but is not endorsed by either. It should be useful as a revision guide or to find alternative explanations to the ones in your textbook. If you haven't heard of an A-Level then this book probably won't be of much interest to you but you can find out about them at Wikipedia.
If any part of this book is unclear or even wrong then please post a comment on the discussion page or simply fix it yourself! In particular, please say if the book assumes any knowledge or skills which not all A-Level Computing students have.
This is a book about A-Level Computer Science. It aims to fit with the AQA GCE A-Level Computer Science 2015 sylla<B>Bus</B> but is not endorsed by AQA. It should be useful as a revision guide or to find alternative explanations to the ones in your textbook. If you haven't heard of an A-Level then this book probably won't be of much interest to you but you can find out about them at Wikipedia.
If any part of this book "is" unclear or even wrong then please post a comment on the discussion page or simply fix it yourself! In particular, please say if the book assumes any knowledge or skills which not all A-Level Computer Science students have.
Paper 1
Paper 2
Accepted languages
A-Level Projects can be written in any language.
You will meet several coloured boxes, here are their meanings:
"What the specification says you must learn for each chapter" 
"Example questions and how to solve them"
"Topics that aren't examined but you might be interested in" 
There will be a lot of concepts that you need to be familiar with, definitions are highlighted like so:
1.1 Computer Hardware
1.1.1 Computer Concepts
A very basic model of a computer would be:
The refined diagram shows the basic components of a computer system.
RAM
Random Access Memeory. Stores loaded programs and data to be processed. There are two types: volatile and non-volatile. Unlike <B>Non-<B>Volatile Memory</B></B>, <B>Volatile Memory</B> is lost when the computer is <B>Switch</B>ed off or reset.
ROM
Read Only Memory. Stores information about BIOS and startup routines.
1.1.2 Measuring Storage
Both the primary and auxiliary devices have capacity measured in bits, bytes, kilobytes, megabytes and gigabytes.
A 1 or a 0 is a BInary digiT (Bit).
There are 8 bits in a byte 
1024 bytes in a kilobyte 
1024 kilobytes in a megabyte 
1024 megabytes in a gigabyte 
Therefore there are 1,048,576 bytes in a megabyte.
A double density floppy disk holds 720Kb of data. A high density floppy disk contains about 1.44Mb of data.
Many computers store one <B>Character</B> as one byte.
1.1.3 Computer Categories
System Description 
Microcomputers: This a computer which uses a microprocessor as its CPU. Includes PCs, laptops etc. They typically have between 1 and 128Mb of memory (RAM). They process data in anything from 8-bit ro 64-bit chunks. 
Minicomputers: These are systems <B>Design</B>ed for multi-user access several terminals. Varies from processing power from a very powerful micro to a small mainframe. 
Mainframes: Supports hundreds of terminals for multi-user access. Large amount of primary and auxiliray storage. 
Supercomputers: These are the fastest and most expensive systems. Although they are not multi-user machines, they are used when a vast amount of processing is to be done.
1.1.4 Computer Configuration
This term describes the collection of hardware in use. A large computer configuration would consist of several hundred micros in a building linked together by cabling to form a <B>Local Area <B>Network</B> (LAN)</B>.
1.1.5 Embedded Systems
An embedded system is dedicated to one specific task. They are special purpose systems.
Embedded systems typically have their programs stored in ROM as opposed to auxiliary storage and RAM. These programs are referred to as firmware - a combination of software and hardware.
C# is a popular language
C# is now Microsoft Language of choice if you work on thick client (desktop applications) or Silverlight (their rich web solution).
The language has similar syntax to Java and has similar core <B>Class</B> libraries supplied, Streams for an example. This allows developers to easily work on either platform. The language has addition constructs for Properties, over and above Java.
The MVVM <B>Design</B> pattern is extensively supported by C# , which allows clear separation between UI and <B>Bus</B>iness Logic for thick client (desktop) and Silverlight (web). Which also allows code to be re-used between desktop and Silverlight. This allows a declaration of UI controls to be cleanly bound to <B>Bus</B>iness data. This enables a graphics <B>Design</B>er to work alongside/parallel to a developer of <B>Bus</B>iness logic.
C# is strongly typed/type safe, and thereby avoids common programming errors and reduces debug time as issues are resolved at compile time. This also allows C# to run in a sandbox.
The use of { and } to scope code blocks provides a very clean and simple visual display of code.
C# uses the CLR to perform automatic memory management with garbage collection and therefore does not have the memory management problems associated with C/C++.
An Embedded version of C# exists, but the processor will require considerable memory (relative to a typical embedded system) to support the CLR.
Underlying Windows libraries can be called if they are already not supported by the .NET <B>Library</B>.
Microsoft .NET Framework Application Development Foundation (70-536). Although now a old book is a good starting place for somebody starting out, as it writes the basics of file I/O (Streams), Exceptions, Regular Expressions, Collections, Graphics, Threading, Logging and Systems Management.
This exam is worth 40% of your AS grade (20% of A2). It is examined in June.
Unit 2 definition list
http://www.aqa.org.uk/subjects/ict-and-computer-science/a-level/computing-2510/past-papers-and-mark-schemes
Be aware of emerging technologies and appreciate their potential impact on society.
Robotics:
A Code of Conduct is not law, but it is a set of rules that apply when you are in an organisation such as your college. Examples might include "Don't look at pornography at work". This would be legal at home, but if you did it at work you could be sacked. In addition, a code of conduct may contain laws such as "Don't install pirated software".
The British Computer Society has produced a list of standards for the training and development of Information Technology workers.
It covers the following issues:
An example of a code of conduct in use in an office is as follows:
Each of these might be perfectly legal at home, but they might get you sacked at work
With the emergence of digital technology and the internet, it has become easier than ever to make exact copies of data or use other peoples work in your own work. This might involve copying files, images, games, music and videos; it might involve using well known songs in videos you make; it might involve using images you find on the web in your own work. For all of this there are legal issues you must consider.
A way that companies try to control the use of media and programs is through the use of digital rights management systems. These systems may do the following:
Technology impacts on many aspects of our lives, but the world hasn't always been this way. Over the course of the last 70 years the working practices of most professions have changed beyond belief. The rate of change shows no sign of stopping and the future looks like it will be ever more dominated by Information Technology. This section will be looking at a few of the issues around these emerging technologies and asking whether all this change is for the good.
The history of computing is short and spectacular. Many of the technologies that you may take for granted today might not have existed ten years ago.
Remember that this is only a short list. There are many other inventions not covered here!
The internet has brought the world closer together, it is now possible to talk directly to friends, family, colleagues and strangers on the other side of the world for free. As the internet has no central controlling body it allows for free speech on a global scale and the prevalence of social <B>Network</B>ing technologies have been seen as a catalyst for uprisings in the Middle East, where the people used Facebook and Twitter to call for greater freedom and democracy.
Much of the information held on the internet is free, with projects such as Wikipedia bringing about global collaboration to give uninhibited access to information and education. With free access to knowledge people should be able to make more informed choices about how they live, and this information should help them take control of their own destinies. Collaboration over the internet has allowed computer experts to write software, scientists to share and discuss findings, artists to create shared works and it has even let teachers write textbooks.
Technology has impacted on health care massively, with computer systems assisting in the diagnosis of illness, computer programs modelling viruses and disease, and GPS helping ambulances reach their destinations faster. In countries possessing advanced technologies the life expectancy is above that of those that don't have this technology. The future of medicine could well see swarms of robots moving around the body helping to keep you healthy, surgery conducted by machines and gene therapy automated by computer programs.
Technologies have touched on almost every part of our lives, simplifying or automating much of what we do. Cars are more fuel efficient and safer, food is cheaper to produce, you can buy products from the other side of the world. To live without a mobile phone or the internet would be unthinkable for some. What the future holds and how our lives will change is an unknown, but it is likely our lives will become ever more intertwined with technology and we will see Artificial Intelligence coming to the fore.
George Orwell wrote the book 1984 about a dystopian world where people were constantly under surveillance. He wrote this book in 1949 and the real world of 1984 was very different to the one in the book, however, with surveillance becoming easier for governments to conduct his world no longer seems so far fetched. Governments now have the technology to read your digital correspondence without you even knowing, they have software that can recognise you just from a picture of your face. Several countries have punished free speech on the internet with prison. Throw away comments that would previously have been forgotten are now permanently remembered on the internet, and people find it harder and harder to escape their past indiscretions.
In 1984 a film called The Terminator was released. It talks of a world where the military have created robots to fight wars, in a fictional 2009 they rebel against their makers. This didn't happen in 2009, but many of the things that the film referenced are becoming a reality. Military organisations around the world are building Unmanned Aerial Vehicles, these 'planes' do not have a pilot inside them so are 'expendable' and can fly for far longer than a manned plane could.
They have been used heavily in the Afghan War and around the world, with human controllers often sat thousands of miles away, pressing buttons like a computer game to fire and kill targets. Software is being developed allowing the planes and their ground equivalent to pick and recommend their own targets, keeping the human controller to give the go-ahead. But what is to stop them being fully automatic, like in the Terminator?
Modern technology is powered by electricity, and the more we use technology, the more energy we require. This has resulted in an increase in the use of fossil fuels, but also companies like Google investing in renewable resources. The creation of new devices and the manufacturing processes involved have resulted in the use of dangerous chemicals, and rubbish dumps full of abandoned technology. The pursuit of rare metals needed for the production of mobile phones and laptops has led to conflicts in such countries as the Democratic Republic of the Congo.
With people's increasing reliance on using computers for financial transactions, criminals have adapted to the new technologies quickly, offering them the ability to steal money and identities remotely and anonymously. With <B>Bus</B>iness and Governmental activities being ever more interconnected it is now a very real threat that terrorists and foreign forces could bring down the infrastructure of a country through viruses and hacking, without ever having the need to fire a single bullet. However, police forces are also making use of new technologies such as GPS, CCTV and face recognition to help them solve crimes.
With technology becoming more and more important to how we conduct our daily lives it must be noted that not all people have equal access to technologies for a variety of reasons. For example if you live in the countryside your internet connection probably won't be as fast as a person living in a city. If you live in sub-Saharan Africa it is far less likely that you'll have the same technologies as someone living in Europe. If you have more money than your friends you might have the latest software to complete your homework whilst your friends have to go without. If you are very old then you didn't grow up with smart phones and you may never have learned to use them. There are a variety of reasons for the digital divide:
But why is a disparity of access to information and communication technologies an issue? It should be pretty obvious, a person who is well educated with the correct skill set is able to access modern society and a larger selection of jobs. Without a proper education and exposure to these technologies then a person will find themselves less employable and less able to engage with the society in which we live.
There are many schemes in place at the moment to try and help bridge the digital divide. As technology becomes cheaper, more people can access it, there are also schemes such as the One Laptop Per Child organisation, which aim to deliver cheap hardware to developing countries. 
Free and <B>Open Source</B> Software (FOSS) is getting increasingly popular, offering industry standard technologies for free. Governments and charities are investing heavily in providing education to the elderly and technology to those in remote areas.
You might be familiar with elderly relatives who know little about technology and maybe care even less, should we feel sorry for them?
There are some people who would argue that our constant striving for better technology is damaging the world around us. The manufacture of modern technology is very polluting adding to greenhouse gases and the destruction of natural habitats. Cobalt and other rare earths are used heavily in the manufacture of many of the phones and computer systems we take for granted. Unfortunately much of this metal is acquired through the use of questionable labour practice, and have the market for them has been seen to fuel ongoing conflicts in countries such as the Democratic Republic of Congo. Many products are manufactured in countries with looser employment laws than our own so we might be indirectly responsible for child or even slave labour. Should those without technology feel sorry for those with it as they could well be taking a more moral position? Can we make sure that all the technology we use is ethical?
Other groups such as the Amish don't see the benefits that modern technology brings. They reject things such as computers and the internet, some even reject electricity. Are their lives impoverished as a result? Should we force them to conform? Some might claim that we live far more efficient and longer lives due to technology, but others might respond that making everything easier doesn't necessarily make for happier people, we need struggle to find meaning in our lives and lives without struggle lose meaning:
In Amish culture it is also no<B>Table</B> that the elders are not seen as useless, their experience is relevant to the youth as they have lived the same lives. In modern society many elderly are seen as useless (not necessarily correctly!) when measured against the skill set needed to live and the advice they can pass on.
The term hacking can have two meanings:
Within the hacking community, in the second sense of the term, there are two main groups.
The term white hat in Internet slang refers to an ethical hacker, or a computer security expert who specializes in ensuring the security of an organization's information systems. White hats may flag up security vulnerabilities on corporate websites and bring them to the attention of companies or organisations before the bad guys can make use of them. Recently companies have recognised the use of white hats, with companies such as Facebook and google offering "bug bounty" for people who can bring their attention to security flaws in their products
A black hat is a hacker who "violates computer security for little reason beyond maliciousness or for personal gain" Black Hat Hackers are what the media will often talk about when talking about 'hackers'. Black Hats break into secure <B>Network</B>s to destroy data or make the <B>Network</B> unusable for those who are authorized to use the <B>Network</B>. Examples include the Lulzsec hacking group that hacked corporate websites for the 'lulz', releasing thousands of user account details of companies such as Sony.
With the growth of Information Technology a host of legal and ethical issues have arisen. These range from the laws that protect the work people create using computers, to the ethical and legal problems brought about by the use of robots in modern warfare.
The way you use data and computers is subject to the law of the country you are living in. Across the world different countries have different laws, for the exam you only need to learn about the laws that affect the United Kingdom.
You must be familiar with the following legislation:
The Health and Safety Act was passed in 1992 and set out to promote excellence in managing health and safety in the work place. There are strict guidelines on how a desk is set up including provision for monitor positioning, adjus<B>Table</B> chairs etc. Health and Safety is paramount when using computers for prolonged periods of time. Sitting in front of a computer screen typing and/or using a mouse is not a natural act for a human being and may result in health problems such as Repetitive Strain Injury (RSI), back and eye issues. 
The Health and Safety (Display Screen Equipment) Regulations 1992 state that an employer must: 
Any employer failing to do this may be subject to a criminal investigation.
The Copyright, <B>Design</B> and Patents Act 1988 affects how people can acquire, use and share ideas, software and media.
A patent is a form of intellectual property which an individual or organisation owns the right to for a fixed period of time, allowing them to charge people for the use of it. After that time has expired the idea is in the public domain. Patents include the <B>Design</B> of the lightbulb (1841) and the ejector seat (1916).
Computing has seen patents in hardware and more recently in software. There are many people who believe that software patents are damaging to Computer Science, as they stop innovation and stifle creativity. A famous case was BT trying to patent the hyperlink. If this had been successful, then every time a hyperlink was used (every page on the World Wide Web), someone might have had to pay money to BT for the privilege. Other people see software patents as important in defending the intellectual property of inventors, if someone creates something new they should be rewarded for it. Other software patents include: the MP3 and GIF. Countries such as India do not have software patents.
Software copyright refers to the law regarding the copying of computer software. Many companies and individuals write software and sell it for money, these products are copyrighted and you cannot copy the code or the program without the permission of the maker. This, they believe protects the work of the programmers, rewarding them for their efforts
Other companies and individuals release software under Free and <B>Open Source</B> software (FOSS) licenses. These licenses allow users the right to use, study, change, and improve a program's <B>Design</B> through the availability of its <B>Source Code</B>. Some adherents of FOSS believe it creates better software in the long term, and others believe that no software should be copyrighted. FOSS licensed products are heavily used in running the World Wide Web and in the creation of popular websites such as Facebook. <B>Open Source</B> licenses generally mean that if you create software that makes changes to <B>Open Source</B> code, and choose to release it, you must release your new code under the same <B>Open Source</B> license, this is called Copy-Left. Some free software is in the public domain, meaning that you can use it for whatever purpose you wish, if you make a software product involving changes to public domain sources code, you don't have to release your code into the public domain.
Copyright in most works lasts until 70 years after the death of the creator if known, otherwise 70 years after the work was created or published (fifty years for computer-generated works).
In summary the act specifies that users are not allowed to:
The Computer Misuse Act 1990 deals with people who "crack" computer programs or systems. Crimes might include removing the Copyright protective measures from a commercial software product, breaking into a school <B>Database</B> to change grades, hacking into a companies' website and stealing customer credit card details, creating viruses and trojans, and so on. It was recognised in the late 1980s that the increase in <B>Bus</B>iness and home use of computers required legislation in order to protect against their exploitation. To this end, in 1990 the Computer Misuse Act was established.
Under the act, three new offences were created:
It prohibits:
"Obtaining access" means; "Causing the computer to perform any action the results in it": Copying/moving data, Erasing/altering data, Using a program; or Causing the computer to output programs or data.
A difficulty with computer crime is that it can cross physical and national borders, the Computer Misuse Act recognises this fact and gives British Courts the jurisdiction where a "significant link" with Britain can be demonstrated in instances of computer-related crime. America has its own Computer Fraud and A<B>Bus</B>e Act.
The Data Protection Act 1998 controls the way that companies, organisations and individuals handle personal data. It states that:
The Regulation of Investigatory Powers Act was passed in 2000, and introduces the power to intercept communications with the aim of taking into account the growth of the Internet. It regulates the manner in which certain public bodies may conduct surveillance and access a person's electronic communications. Supporters of the act claimed this was an excuse to introduce new measures, some of these included being able to force someone to reveal a cryptographic key for their data, with failure to do so resulting in up to 2 years imprisonment. As we have seen in <B>Packet <B>Switch</B>ing</B>, data can be read in transit between hosts. However, the act goes further than allowing this:
Robots are becoming an increasingly important part of modern society. They work in factories, fight wars and might one day nurse you in your old age.
A large and important <B>Field</B> of computer science is Artificial Intelligence (AI), the study of making intelligent machines. Many robots and computer programs are said to have Artificial Intelligence (AI). AI can be summarised by the definition above, with explicit examples of it including:
Trying to get machines to perform very speciﬁc tasks, e.g.
You might even have some ideas for how AI can be used for your A2 project next year.
The 'thinky' AI can even learn from experience, meaning that you don't have to program them how to explicitly respond to each and every situation. This AI starts to pose some very big questions for humanity. Is there really a difference between the intelligence of a human being and that of a program? We'll look into this a little below:
There are many scientists and philosophers who believe that computers will one day become as intelligent as humans. But there is a question about what 'intelligence' really means. If it is just performing tasks well, then there are computers that can compose music, or sweep a road, or fly a plane, or solve maths equations better than most humans. We can even get computers to display emotions such as sympathy and anger. Does this mean that we can fully recreate how the mind works?
In 1950 Alan Turing, an early pioneer in computer science, proposed a test for machine intelligence. If you could have a conversation with a panel of human beings and with a computer AI program, and be unable to tell the difference between whether you were speaking to a human or a computer, then the computer could be seen to be as intelligent as a human. This is known as the Turing Test.
In 1980 the philosopher John Searle posed a thought experiment that some see as proving machines cannot understand what they are doing. The Chinese Room is a box in which a man sits. He does not speak Chinese at all, but is passed Chinese <B>Character</B>s under the door. He has a book of Chinese <B>Character</B>s and their matching responses. On receiving a <B>Character</B> he looks for it in the book and sends the corresponding <B>Character</B> in reply. At no point does he understand what he is doing, he just follows the instructions. AI can be considered to be just like this, however complex the code, all it is doing is responding to inputs with set outputs, there is no understanding present.
A similar argument was made by Stanley Jaki in 1969, where he proposed that AI is a little like a drain pipe, where two water droplets roll down, at the bottom they combine to form a larger droplet, but at no point does the drainpipe understand what has happened. He argues that human beings possess this understanding, whilst machines do not.
However, many philosophers and scientists see intelligence and understanding as nothing more than complex <B>Algorithm</B>s responding to stimuli. Is there really a 'me' that 'understands' and what exactly is it? Could our mind be reduced to a set of <B>Algorithm</B>s?
See also:
As machines are expendable they allow us to experiment and simulate human beings without worrying about their safety. For example machines are used by the army to simulate the damage received by a human being from the detonation of an Improvised Explosive Device. This allows us to <B>Design</B> vehicles and clothing better able to protect soldiers.
If you create a machine without emotions and without the ability to acquire emotions, for example a car manufacturing robot, then there are some important limitations about how they can be used.
If you were to work next to a robot in a factory and you started not feeling very well, the machine would be very unlikely to be programmed to feel any sympathy, and would most probably not change its work routine to accommodate your changing circumstances. However, it could be possible that the robot might be programmed with these features.
Machines in most cases lack the ability to adapt to new situations, being stuck with the code they have been given, and unable to see safety problems when carrying out their routine. The first robot-caused death was in 1979 when a robotic arm struck Robert Williams, a worker at a metal casting plant in the USA.
There might also be problems on the horizon if AI produces machines as 'intelligent' as us. In this situation they would have no limitations, they would be just like us. Isaac Asimov saw this problem and defined three laws of robotics to make sure that robots and humans can live together in peace.
Logic Gate:
<B>Boolean</B> Algebra:
We have met gate logic and combinations of gates. Another way of representing gate logic is through <B>Boolean</B> algebra, a way of algebraically representing logic gates. You should have already covered the symbols, below is a quick reminder:
For the exam you might have:
Now you have learnt logic gates we will take a look at how they are combined inside hardware. You may well be asked in an exam to draw your own logic gates or to work out what a combination of logic gates will output. In this section we will look at the best way to describe what a set of logic gates is in <B>Boolean</B> algebra. Let's take a look at a quick example:
Sometimes a very complex set of gates can be simplified to save on cost and make faster circuits. A quick way to do that is through <B>Boolean</B> identities. <B>Boolean</B> identities are quick rules that allow you to simplify <B>Boolean</B> expressions. For all situations described below:
Examples of manipulating and simplifying simple <B>Boolean</B> expressions.
Let's try to simplify the following:
Using the rule formula_2
Trying a slightly more complicated example:
dealing with the bracket first
Sometimes we'll have to use a combination of <B>Boolean</B> identities and 'multiplying' out the equations. This isn't always simple, so be prepared to write truth <B>Table</B>s to check your answers:
Where can we go from here, let's take a look at some identities
Now for something that requires some 'multiplication'
A common question in the exam is to be given some <B>Boolean</B> algebra and be asked to express it as logic gates. Let's take a look at an addition and subtraction example that you should be familiar with:
First we are going to deal with the inner-most brackets
Finally we combine this answer with the formula_3
It will work exactly in the same way for <B>Boolean</B> algebra, but instead of using numbers to store our results, we'll use logic gates:
As with any equation, we are going to deal with the inner-most brackets firstformula_6, then combine this answer with the formula_7
A common question in the exam is to give you a description of a system. You'll then be asked to create a <B>Boolean</B> statement from this description, and finally build a logic gate circuit to show this system:
Using <B>Boolean</B> algebra describe the following scenario:
Where:
Before you rush into answering a question like this, let's try and break it down into its components. The questioner will often be trying to trick you. The two occasions that the alarm will sound are:
formula_8 but there is a caveat, the alarm will sound if either of these are true AND two things are also true, namely the engine is NOT on, and the car is NOT being towed:
formula_9
Combining both we get (remember the brackets!):
formula_10
The next step is to create a diagram out of this:
De Morgan's laws are used to simplify <B>Boolean</B> equations so that you can build equations only involving one sort of gate, generally only using NAND or NOR gates. This can lead to cheaper hardware. There are two laws that you need to remember:
An easy way to remember De Morgan's Laws is through the rhyme: ""break the line, change the sign""!
Let's prove that I'm not lying to you by creating a truth <B>Table</B> to prove that:
</math>
From looking at the truth <B>Table</B> we can see that it equates to formula_1. But we should also know how to get to this result by using <B>Boolean</B> identities. Let's give it a go:
Let's try another
Simplify the following using De Morgan's Laws and <B>Boolean</B> identities. Check your answers by making truth <B>Table</B>s:
formula_16
</math>}}
)+(\overline{\overline{A}})} </math>
).\overline{B} = (A+B).\overline{B}</math>
Sometimes it is cheaper to create circuits using only one sort of gate, and you might be asked to do so in the exam. These gates tend to be NAND & NOR gates. "But how can you create complex circuits by using only one type of gate?!" you may well ask. We'll now cover how other gates can be made from NAND & NOR gates:
In 1854 a British mathematician, George Boole, developed <B>Boolean</B> Algebra. Instead of an algebra that uses numbers, <B>Boolean</B> algebra uses truth values, true(1) and false(0). By defining sentences using truth values and performing operations on these truth values you can work out the overall conclusion of complex statements. <B>Boolean</B> Algebra has had a massive impact on Computer Science and the language that computers understand is a language of 1s and 0s, <B>Boolean</B>.
Logic gates are pieces of hardware that perform operations on <B>Boolean</B> inputs, allowing us to create complex devices out of abstract <B>Boolean</B> algebra. Logic gates are the fundamental building blocks of hardware and processors will be made out of billions of them. A logic gate will typically have one or two inputs, in the examples here defined by A and B, There are six types of gate that you need to know:
A "NOT" gate will always give an output opposite to what the input is e.g. 1 (not gate) 0. A NOT gate takes one <B>Boolean</B> input and flips it. It is possible to have a double NOT. This will reverse the original NOT. The symbol would have an extra bar over it.
In <B>Boolean</B> Algebra we write a "NOT" symbol by placing a bar on top of a letter(formula_1) or letters (formula_2).
To summarise here is a truth <B>Table</B> showing the relationship between A and formula_1 
An "AND" gate will combine the <B>Boolean</B> values of two inputs (you can get more than two inputs but we don't need to know about that type of gate here). If and only if both inputs are true will it output true. If any of the inputs are false it will out put false.
In <B>Boolean</B> Algebra we write an "AND" symbol by placing a bullet point between two (formula_6) or more (formula_7) values.
An easy way to remember how an AND gate works is thinking about a circuit to turn a light bulb on. If both <B>Switch</B>es are on then the bulb will light up, if any <B>Switch</B> is off then the bulb won't light.
To summarise here is a truth <B>Table</B> showing all the different values for two inputs A and B and the result of ANDing those values together
An "OR" gate will combine the <B>Boolean</B> values of two inputs. If one or more inputs are true then the output will be true. If both the inputs are false then the output will be false.
In <B>Boolean</B> Algebra we write an "OR" symbol by placing a plus symbol between two (formula_11) or more (formula_12) values.
An easy way to remember how an OR gate works is thinking about a circuit to turn a light bulb on. If one or more <B>Switch</B>es are on then the bulb will light up, if both <B>Switch</B> are off then the bulb won't light.
To summarise here is a truth <B>Table</B> showing all the different values for two inputs A and B and the result of ORing those values together
An exclusive- OR, "XOR", gate will combine the <B>Boolean</B> values of two inputs. If exactly one input is true then the output will be true. If both the inputs are false or both the inputs are true then the output will be false.
In <B>Boolean</B> Algebra we write an "XOR" symbol by placing a plus symbol surrounded by a circle between two (formula_17) or more (formula_18) values.
To summarise here is a truth <B>Table</B> showing all the different values for two inputs A and B and the result of XORing those values together
A "NAND" gate will combine the <B>Boolean</B> values of two inputs, AND them together, and NOT the result. If one or less input is true then the output will be true. If both the inputs are true then the output will be false. To draw a NAND gate you draw an AND gate and add a circle to the front, as you can see above.
In <B>Boolean</B> Algebra we write an "NAND" symbol by taking an AND equation and NOTing the result (formula_22).
To summarise here is a truth <B>Table</B> showing all the different values for two inputs A and B and the result of NANDing those values together
A "NOR" gate will combine the <B>Boolean</B> values of two inputs, OR them together, and NOT the result. If no input is true then the output will be true. If either or both inputs are true then the result will be false. To draw a NOR gate you draw an OR gate and add a circle to the front, as you can see above.
In <B>Boolean</B> Algebra we write an "NOR" symbol by taking an OR equation and NOTing the result (formula_22).
 <B>Class</B>="wiki<B>Table</B>"
! A
! B
! formula_30
! formula_31
A common question is to give you a complex <B>Boolean</B> equation, which you will then have to work out a simpler exact equivalent. This is useful when you are <B>Design</B>ing circuits and want to minimise the number of gates you are using or make circuits that only use particular types of gates. To simplify <B>Boolean</B> equations you must be familiar with two <B>Method</B>s. You can normally use either, but try to master both:
Draw the truth <B>Table</B> for the following:
We are going to solve this using a truth <B>Table</B> and we need to break the problem down into its component parts:
As the equation uses A and B list the different values they can take (4 in total)
Next we are going to work out the brackets first: formula_2 and add this to our truth <B>Table</B>
Finally we will OR this result (formula_2) with A to find formula_4, the final column of the truth <B>Table</B>
Now that our truth <B>Table</B> is complete, look at the final column, is there a simpler way of writing this? Why aye! The final column is true when, and only when, A is true, it doesn't require B's input at all. So we can simplify to A telling us that:
Let's look at another example
We first of all need to break down the equation into its component parts. Starting off with A and B we the work out formula_7, then formula_8 and finally formula_6.
This can be simplified to formula_10 telling us that: formula_11. How did we jump to this conclusion? Let's take a look at all the places where the result is true:
We need to get a combination of A, B that gives the result shown above. We can see that whenever A is false (formula_12)the answer is true:
We can also see that whenever the B value is true then the answer is also true:
So we know that we need to combine formula_13 to get an equation solving all cases.
If we AND them formula_14 this only gives us one of the scenarios, so that's not the answer.
If we OR them formula_10 then this gives us three answers, matching all the responses above. This is our solution.
</math> OR formula_16 (because of De Morgan's Laws)
This section is provided to extend your knowledge above and beyond that which is required for the A-Level course. The concepts here are not easy but you might find them interesting and if you choose to study Computer Science at uni, the material here should come in useful.
Almost all modern digital electronics is made using "CMOS". Earlier valve, DTL (Diode-Transistor Logic) and TTL (Transistor-Transistor Logic) are of historical interest but now used for special purposes only (TTL signalling levels are often used with CMOS logic which can result in confusion).
The name CMOS is an amalgam of "C" for Complementary and the "MOS" of MOSFET (Metal Oxide Semiconductor <B>Field</B> Effect Transistor). MOS comes from the original construction as a metal (aluminium) gate on a layer of oxide (Silicon Dioxide) insulation on top of a semiconductor (or Silicon) base. Polysilicon is now used instead of metal because it is easier to make but metal is coming back in the very latest <B>Design</B>s. Similarly better materials than Oxide are used in the latest <B>Design</B>s.
MOSFET devices come in two variants, n-type (NMOS) and p-type (PMOS) depending on the doping agent added to the semiconductor base. CMOS uses pairs of one NMOS and one PMOS transistors with typically the same input connected to the NMOS gate and the PMOS gate and the drain and source in series. Only one transistor conducts at once, minimizing the power drain.
The advantage of CMOS is that because the gate is insulated and the drivers complementary (so one is on and one off) there is minimal leakage current except when the gate is actively <B>Switch</B>ing. Indeed where CMOS is driving CMOS, the static current is practically negligible. On any large integrated circuit only a small percentage of the gates will be <B>Switch</B>ing at any one time and the rest static. So only the active gates consume power and only for the short <B>Switch</B>ing period. This also explains why the power usage (and thus heating) of modern CPU chips is proportional to the <B>Clock Speed</B>.
The basic inverter circuit (NOT gate) looks like this:
The upper gate is a PMOS transistor which conducts only when A is low voltage (near Vss, the source voltage) and the lower gate is NMOS which conducts only when A is high voltage (near Vdd, the drain voltage). The output Q is thus forced to Vdd when A is near Vss and vice-versa. In addition the voltage change in A (with minimal current) can produce a significant current supply in Q. Normally Vdd is in the range +2v to +5v and regarded as a logic "1" whereas Vss is 0v and regarded as a logic "0".
Note that if the input A came from an external <B>Switch</B> or similar then a pull-up or pull-down resistor would be required so that when the <B>Switch</B> was open A would take a definite value and not float (take on an indeterminate value). The <B>Switch</B> would connect A to the opposite rail. If A came from an external source then diodes would be added to ensure that A takes values only between Vss and Vdd.
The basic two input NAND gate looks like this:
Here the bottom part of the circuit pulls down only if both A and B are high (opening the two bottom transistors) and the upper part pulls up if either are low. This pattern can be extended to three or four inputs with ease allowing for gates with more than two inputs. In practice, an inverter needs to be added to the output to make the gate perform correctly. Thus the most basic gate is an AND:
A second inverter is added to the gate above to get a NAND function. A CMOS NOR circuit is just the mirror of the NAND.
Here it is shown with one inverter making an OR gate (An additional inverter would be required to get a NOR gate):
Practical CMOS XOR gates actively use the A and B inputs instead of Vss and Vdd to reduce the number of gates and are beyond the scope here. In real life you would take a standard <B>Design</B>; but it is possible to create a XOR gate out of other CMOS gates, using the following identity we could theoretically make a CMOS XOR out of an OR ANDed with a NAND:
formula_1
A physical CMOS NAND (without inverter) looks like this:
A one bit memory is called a flip-flop. These are used for CPU registers such as the MAR (but not for bulk memory as they take up a lot of physical space and RAM chips would be infeasibly big). One of the simplest is called a JK flip-flop:
The two NOR gates form the memory; at any one time one is high, the other low and feedback maintains that state. A J high pulse causes the top NOR to go off and a 1 to be stored (Q is high) and a K high pulse causes the bottom NOR to go off and a 0 to be stored (Q is low). (If both J and K pulse together the output changes state.) Real world devices would have input conditioning, output inverters and often additional set, reset and clock inputs.
You may have met the following logic circuit before:
If we take a look at the truth <B>Table</B>:
You may be able to tell, what the above circuit does is allows you to add the two inputs, A and B, together:
This is great and called a half-adder, but it only manages to add two 1 bit digits together. What is needed is a full-adder. A more complex circuit is a one bit adder that take into account any carry brought over from a previous calculation:
This device allows you to <B>String</B> the one bit adders together, creating a multiple bit adder (in this case 4 bit):
In producing a multi-bit adder, the A and B are inputs for each bit and S the respective sum output bits. The Cin comes from the next lower bit and the Cout goes to the next higher bit or to the overflow detection logic (which checks when a result is too big to fit into all the S outputs). In practical <B>Design</B>s carry look ahead is done 4, 8 or more bits at a time to avoid the ripple delay of carry propagation (the time taken for the carry bits to filter through from the first calculation to a calculation several steps down). In real ALUs (arithmetic logic units) additional inputs select the function to be done (add, subtract, and, or, etc.) so that a general purpose unit for all simple bitwise functions is created.
The days of individual logic elements connected by wire or PCB tracks are long gone. A typical modern <B>Design</B> uses a few basic building blocks such as memory, CPU and Ethernet interfaces (which are off the shelf) and mops up the remaining <B>Design</B> into a few large chips which contain many individual logic elements.
The ability to put many millions of transistors on a single chip means that <B>Design</B>ing a chip for one purpose is a very expensive and time consuming process. It can be justified only for chips that will sell in very large volumes (like desktop and laptop computers or industrial controllers that will be used in a range of products). Two approaches are used for smaller volume chips.
A <B>Field</B> Programmable Gate Array (FPGA) is a chip that contains blocks of logic and memory that determines how the blocks are interconnected. Sometimes the memory is permanent (but re-wri<B>Table</B>) although more frequently it is dynamic and loaded from a Flash chip external to the device during the power up sequence. Occasionally it is loaded by a CPU. Originally the logic blocks were simple functions (flip-flops, adders, AND gates etc.) but in modern FPGAs they can include whole CPUs, RAM areas and similar features as well as basic logic functions. The terms CPLD (Complex Programmable Logic Device) and PAL/PLA (Programmable Array Logic/ Programmable Logic Array) are similar but used for smaller devices.
An application-specific integrated circuit (ASIC) is similar to an FPGA except that the chip is part fabricated as a standard <B>Design</B> with logic blocks and then the last few layers of metal interconnect are added to the customer specification. This is cheaper than a custom <B>Design</B>ed chip but it can still cost millions of dollars to produce the masks and prototypes. It does produce a faster and more compact result than an FPGA so there are some <B>Design</B>s that can only be done on an ASIC.
ASICs also have a cheaper unit cost, but FPGAs have advanced to the point where they are used in production not just for prototyping. The cost of a mistake in an ASIC is substantial whereas an FPGA can be upgraded in the <B>Field</B>. ASICs are harder to copy than FPGAs and so are used in some applications requiring secrecy or security.
For both ASIC and FPGA <B>Design</B>s the manufacturer provides software that translates a logic <B>Design</B> into a layout for the device and enables simulation of the operation. There are also non-manufacturer specific tools and in particular a language called VHDL which can be used to describe a logic system and simulate it. Manufacturers then provide tools to produce the ASIC or FPGA <B>Design</B> (often free). VHDL stands for “VHSIC hardware description language” and VHSIC stands for very high speed integrated circuits.
Understand the relationship between hardware and software and be 
able to define both.
Understand the need for, and functions of, system software:
Describe the different types of application software and the criteria for selecting appropriate software for particular purposes.
Describe machine-code language and <B>Assembly Language</B>. 
Awareness of the development of programming languages and the 
limitations of both machine-code and assembly-language programming
Define each type of language <B>Translator</B> and describe situations 
where each would be appropriate.
General purpose application software is a type of application that can be used for a variety of tasks. It is not limited to one particular function. For example a word processor could be <B>Class</B>ed as general purpose software as it would allow a user to write a novel, create a restaurant menu or even make a poster.
Examples of General purpose application software include: Word processors, Spreadsheet and Presentation software. Whatever you do, do not use brand names!
Special purpose application software is a type of software created to execute one specific task. For example a camera application on your phone will only allow you to take and share pictures. Another example would be a chess game, it would only allow you to play chess.
Other examples of special purpose application software are web browsers, calculators, media players, calendar programs etc. Again, make sure that you don't use brand names!
Bespoke application software is tailor made for a specific user and purpose. For example a factory may require software to run a robot to make cars, however, it is the only factory making that car in the world, so the software required would have to be specially built for the task.
Other examples might include software for the military, missile/UAV operations, software for hospitals and medical equipment, software being written inside banks and other financial institutions.
There are several things to consider before purchasing bespoke software, on the plus side:
However, you must also consider
You have probably used a lot of software over the years, here we are going to study the different <B>Class</B>ifications (types) of software that are out there.
The two main <B>Class</B>ifications of software that all programs fit under are:
Without software, most hardware would sit there doing nothing or perform specific tasks. To make most hardware run we need to use software, and your task here is to select the correct type of software for each job.
Modern computers are complex machines involving many different parts. To keep it running well you will need system software. System software will handle the smooth running of all the components of the computer as well as providing general functionality for other programs to use, tools to speed up the computer, tools to develop new software and programs to keep you safe from attacks. There are several different types of system software that we will look at in more detail very shortly:
Application software is <B>Design</B>ed for people like me and you to perform tasks that we consider useful. This might be the ability of a scientist to work out statistical information using a set of results, or someone who wants to play the latest computer game. There are several categories of Application software that we'll look into shortly:
Place the following software into its correct category:
There are many types of programming languages out there and you might already have heard of a few of them, for example: C++, VB.NET, Java, Python, Assembly. We will now look at the history of how these languages came about and what they are still useful for. In all cases keep in mind that the only thing a computer will execute is machine code or <B>Object</B> code when it has been converted from a language to run on a processor. 
The first generation program language is pure machine code, that is just ones and zeros, e.g.formula_1. Programmers have to <B>Design</B> their code by hand then transfer it to a computer by using a punch card, punch tape or flicking <B>Switch</B>es. There is no need to translate the code and it will run straight away. This may sound rather archaic, but there are benefits:
And of course drawbacks
Second-generation programming languages are a way of describing Assembly code which you may have already met.
By using codes resembling English, programming becomes much easier. The usage of these mnemonic codes such as codice_1 for load and codice_2 for store means the code is easier to read and write. To convert an assembly code program into <B>Object</B> code to run on a computer requires an <B>Assembler</B> and each line of assembly can be replaced by the equivalent one line of <B>Object</B> (machine) code:
Assembly code has similar benefits to writing in machine code, it is a one to one relationship after all. This means that assembly code is often used when writing low level fast code for specific hardware. Until recently machine code was used to program things such as mobile phones, but with the speed and performance of languages such as C being very close to Assembly, and with C's ability to talk to processor registers, Assembly's use is declining.
As you can hopefully see there are benefits to using Second-Generation Languages over First-Generation, plus a few other things that makes Assembly great:
And of course drawbacks
Even though Assembly code is easier to read than machine code, it is still not straight forward to perform loops and conditionals and writing large programs can be a slow process creating a mish-mash of goto statements and jumps. Third-generation programming languages brought many programmer-friendly features to code such as loops, conditionals, <B>Class</B>es etc. This means that one line of third generation code can produce many lines of <B>Object</B> (machine) code, saving a lot of time when writing programs.
Third generation (High Level Languages) codes are imperative. Imperative means that code is executed line by line, in sequence. For example:
dim x as <B>Integer</B>
x = 3
dim y as <B>Integer</B>
y = 5
x = x + y
console.writeline(x)
Would output: <samp>8</samp>
Third generation languages can be platform independent, meaning that code written for one system will work on another. To convert a 3rd generation program into <B>Object</B> code requires a <B>Compiler</B> or an <B>Interpreter</B>.
To summarise:
However
There are several types of Third-generation languages that you will cover in more detail at A2. They include:
Fourth-generation languages are <B>Design</B>ed to reduce programming effort and the time it takes to develop software, resulting in a reduction in the cost of software development. They are not always successful in this task, sometimes resulting in inelegant and hard to maintain code. Languages have been <B>Design</B>ed with a specific purpose in mind and this might include languages to query <B>Database</B>s (SQL), languages to make reports (Oracle Reports) and languages to construct user interface (XUL). An example of 4th generation programming type is the declarative language.
--an example of a <B>Structured Query Language (SQL)</B> to select criminal details from a <B>Database</B>
SELECT name, height, DoB FROM criminals WHERE numScars = 7;
An example of a declarative language is CSS which you might learn more about when completing any web <B>Design</B> unit
/*code to change the headings on a page to green and the paragraphs to red and italic*/
Hardware and Software have a symbiotic relationship, this means that without software hardware is very limited; and without hardware, software wouldn't be able to run at all. They need each other to fulfill their potential. 
We should know by now that system software is software that helps a computer to run. We will now look at the different types of system software out there and why each is needed:
An <B>Operating System (OS)</B> is a set of programs that manage computer hardware resources and provide common services for application software. The operating system is the most important type of system software in a computer system. Without an operating system, a user cannot run an application program on their computer (unless the application program is self booting).
Time-sharing operating systems schedule tasks for efficient use of the system and may also include accounting for cost allocation of processor time, mass storage, printing, and other resources.
For hardware functions such as input/output and main memory management, the operating system acts as a middleman between application programs and the computer hardware, although the application code is usually executed directly by the hardware it will frequently call the OS or be <B>Interrupt</B>ed by it. Operating systems can be found on almost any device that contains a computer, from mobile phones and video game consoles to supercomputers and web servers.
Examples of popular modern operating systems include Android, iOS, Linux, Mac OS X and Microsoft Windows, but don't use these names in the exam!
You might hear the words <B>Open Source</B> when you read about operating systems. Linux is the most well known <B>Open Source</B> OS and Windows is the most well known <B>Closed Source</B> OS. So what does this mean?
<B>Open Source</B> programs are programs where you can see the code (the source), you can edit it, copy it and use as you wish within the confines of an <B>Open Source</B> license. You can even sell it, but the person would be welcome to acquire the code for free if they wanted. As a result of this Linux is not developed by one person or one company but uses code developed by thousands of people, working for different organisations all over the world. And as a result there are many different versions (known as distributions) of Linux out there including Ubuntu, Slackware and Fedora. Android is built using Linux code.
<B>Closed Source</B> software doesn't allow people to look at the code or adapt it. Companies normally sell <B>Closed Source</B> products and you'll have to pay for a copy of Windows. Currently about 83% of desktops run the Windows OS.
Utility software is a type of system software which has a very specific task to perform related to the working of the computer, for example anti virus software, disk defragment etc.
Utility software should not be confused with application software, which allows users to do things like creating text documents, playing games, listening to music or surfing the web. Rather than providing these kinds of user-oriented or output-oriented functionality, utility software usually focuses on how the computer infrastructure (including the computer hardware, operating system, application software and data storage) operates. Due to this focus, utilities are often rather technical and targeted at people with an advanced level of computer knowledge.
Examples of utility software include:
<B>Library</B> programs are collections of compiled routines which are shared by multiple programs, such as the printing function.
<B>Library</B> programs contain code and data that provide services to other programs such as interface (look and feel), printing, <B>Network</B> code and even the graphic engines of computer games. If you have ever wondered why all Microsoft Office programs have the same look and feel, that is because they are using the same graphical user interface libraries. For computer games a developer might not have the time and budget to write a new graphics engine so they often buy graphical libraries to speed up development, this will allow them to quickly develop a good looking game that runs on the desired hardware. For example Battle<B>Field</B> 3 and Need for Speed both use the same Frostbite engine.
Most programming languages have a standard set of libraries that can be used, offering code to handle input/output, graphics and specialist maths functions. You can also create your own custom libraries and when you start to write lots of programs with similar functionality you'll find them very useful. Below is an example of how you might import libraries into VB.NET:
'imports the libraries allowing a program to send emails
Imports System.Net.Mail
'imports the libraries allowing a program to draw in 2D
Imports System.Drawing.Drawing2D
The final type of system software that you need to know is <B>Translator</B> software. This is software that allows new programs to be written and run on computers, by converting <B>Source Code</B> into machine code. There are three types that we'll cover in a lot more detail shortly 
An <B>Assembler</B> translates <B>Assembly Language</B> into machine code. <B>Assembly Language</B> consists of mnemonics for machine <B>Opcode</B>s so <B>Assembler</B>s perform a 1:1 translation from mnemonics to a direct instruction. For example:
codice_1 converts to codice_2
Conversely, one instruction in a high level language will translate to one or more instructions at machine level.
Advantages of using an <B>Assembler</B>:
Disadvantages of using <B>Assembler</B>:
A <B>Compiler</B> is a computer program that translates code written in a high level language to a lower level language, <B>Object</B>/machine code. The most common reason for translating <B>Source Code</B> is to create an execu<B>Table</B> program (converting from a high level language into machine language). 
Advantages of using a <B>Compiler</B>
Disadvantages of using a <B>Compiler</B>
An <B>Interpreter</B> program executes other programs directly, running through program code and executing it line-by-line. As it analyses every line, an <B>Interpreter</B> is slower than running compiled code but it can take less time to interpret program code than to compile and then run it — this is very useful when prototyping and testing code. <B>Interpreter</B>s are written for multiple platforms, this means code written once can be run immediately on different systems without having to recompile for each. Examples of this include flash based web programs that will run on your PC, MAC, games console and Mobile phone.
Advantages of using an <B>Interpreter</B>
Disadvantages of using an <B>Interpreter</B>
Know the main <B>Character</B>istics, purpose and suitability of contemporary devices (see the Teacher Resource Bank), and understand their principles of operation, including <B>Method</B>s of error checking (check digit).
Explain the need for secondary storage within a computer system, know the main <B>Character</B>istics, purpose and suitability, and understand the principles of operation of contemporary devices (see the Teacher Resource Bank). Compare the capacity and speed of access of various media and make a judgement about their suitability for different applications
You should already have met the internal components of the computer and the peripherals, that sit outside. We are now going to look at two different categories of peripherals. Those that input data into a computer, and those that output data from the computer.
How do we tell what is an input and what is an output device? Think about it from the computer's perspective. If a device is putting data into the computer in the form of text, sound, images, button presses etc. then it is an input device, if the device is outputting things from the computer such as sound, movement, printing, images etc., then it is an output device. It really is that easy to tell the difference, but be warned, some devices can be both input and output!
Let's take a look at two examples:
When you are using the monitor it displays things that you are doing, such as moving windows and clicking on website links. At no point do you click on the screen or put anything into the monitor. The only thing it does is output information, therefore it is an output device. Easy!
A mouse is used to move a little cursor around the screen, clicking and dragging as you go. if you let go of the mouse, the cursor will stop. The computer is relying on you to move the mouse, the mouse won't move on its own! Therefore it is an input device.
This section will be looking at the various forms of secondary storage devices (media). For each device you should be familiar with the following details:
Pay special attention to devices with an background, you need to be able to describe exactly how they work!
Magnetic media stores data by assigning a magnetic charge to metal. This metal is then processed by a read head, which converts the charges into ones and zeros. Historically, magnetic media has been very popular for storing programs, data, and making backups. It looks set to continue in this role for some time. However, solid state technology is starting to be used more and more, storing programs and data on new devices such as mobile phones and cameras.
Hard disks are usually found inside computers to store programs and data. They are increasingly cheap and more and more companies are using them to back things up. Hard disks can vary in physical size with some disks getting as small as your thumb. More closely packed platters, greater density of data on each platter to allow for more tracks and cylinders and the ability to write smaller magnetic spots have all been developments in the <B>Design</B> of hard disks to increase their storage capacity. The capacity of a commercial disk is currently up to about 4 terabytes allowing users to read and write to them. They are constructed from several key components:
For the exam you must be able to explain how a hard disk works:
Writing data is very similar:
Pros
Cons
Increasingly obsolete, the tape has been a medium to deliver software and back up data since the early days of computing. Nowadays they are used mostly for corporate backing up and archiving of data. Tapes are sequential data stores, meaning that if you had information stored at the end of the tape you would have to wind your way through the entirety of the tape before you could read it. There is no random access like with a hard disk! Tapes can be several terabytes in size and reading and writing can be very fast as long as you read or write continuous sections of the tape at once.
Pros
Cons
Optical media works by creating a disc with a pitted metallic surface. There are several different types of disk out there ranging from 650 MB to 128 GB, with the pits and lands getting closer together for higher volume disks. The principle behind how each of them works is the same.
A CD-ROM is a metal disc embedded into a plastic protective housing. Each disc has to be 'mastered'; this is the process of creating the CD and placing the data on it. CDs are WORM (Write Once, Read Many) media; this refers to the fact that once they have been mastered, there is no way to change the data on them. 
Reading from a CD-ROM
Pros
Cons
The CD-R is made of a reflective metal disk with a layer of (usually green, opaque) dye on top.
Writing to a CD-R
Reading from a CD-R
Pros
Cons
The CD-RW is made of a reflective metal disk with a layer of a special ('phase change') metal on top.
Writing to a CD-RW
Reading from a CD-RW
Pros
Cons
USB Flash drives are solid state, that means that there are no moving parts. This is very useful for seek times as we don't have to wait for mechanical movement, meaning seek time is very low and it allows for fast Random Access Memory. Flash drives can be set to read only mode, but they will always allow for reading and writing. The size of flash drives is not as great as a Hard Disk and they are generally much more expensive per megabyte
Pros
Cons
Work in much the same way as a Flash drive and can often be converted into Flash Drives. They have different connectors and are generally smaller than USB Flash drives allowing for them to be used in cameras, mobile phones and game consoles.
Internal and External Hardware Components of a Computer
Functional <B>Character</B>istics of a Processor
Structure and Role of the Processor
Know the following components and be able to describe their function:
A computer must be able to access main memory for reading and writing, they do this by using addressable memory. Main memory is a little like a set of school lockers, each with a different number. Each locker contains a block of data and if you fill up one locker you can use the next locker to expand into.
Looking at the example above you can see locker '0' contains '8975', whilst lockers 1 to 6 contain the sentence "The Cat sat on the dog!". Locker '7' is empty, locker '8' contains a <B>Boolean</B> value and locker '9' contains the number 48. As you can see if we only used one <B>Character</B> for the locker number then we could only ever have 10 lockers. If you limit the number of addresses you can use then you limit the amount of memory you can talk to. If you have a small <B>Address <B>Bus</B></B> then you won't be able to have much main memory.
The way that data is stored in a computer is very similar:
Building on the <B>Von Neumann Architecture</B> we get the idea of how the stored program concept works. If you have ever loaded a game on a console you might notice that:
This is the stored program concept in motion! Let's take apart what is happening:
Modern computing (arguably) started in 1822 when Charles Babbage, a British Mathematician, proposed 'the difference engine'. This was a mechanical machine that could calculate numbers from given inputs. Unfortunately Babbage never got enough funding to realise his plans and there was no Victorian Computing Revolution, however, you can see a completed modern version in the Science Museum in London (along with half of Babbage's brain!).
Since Babbage there have been several different <B>Design</B>s of computers, and the one we are going to focus on here is called the 3-Box Model, or Von Neumann machine. In this machine:
Consider a program stored on a DVD, to get the machine to run it, you will have to input the data from the DVD to the memory using the system <B>Bus</B>. Once the program is loaded into memory the instructions it will be sent to the CPU line by line using the system <B>Bus</B> and executed there. Any things to be printed or shown on a screen will be sent to the Output box.
We'll now look in more detail at these components:
The processor (or Central Processor Unit - CPU) is one of the most complex parts of any computer system. The processor executes programs and supervises the operation of the rest of the system. Single chip processors are otherwise known as microprocessors. Gordon E Moore theorized that the number of transistors that could be integrated onto the chip would double every 18–24 months, most modern processors will contain billions of transistors. Multicore microprocessors are now very popular, where the processor will have several cores allowing for multiple programs or threads to be run at once.
Main memory is used to store program instruction and data, using the System <B>Bus</B> to communicate with CPU. Main memory is often created using Random Access Memory (or RAM) or <B>Read Only Memory (ROM)</B>. Modern computers will have gigabytes of RAM, meaning that large programs can run and multiple programs can run at once. The more main memory that you have the larger the number of programs you can run at once.
Main memory consists of data stored in addresses, in general, the more main memory you have the more addresses you'll have and vice versa.
In the above example if we were to perform the following assembly code instruction:
This would return the word: "Courgette"
If we were to perform the following assembly code instruction:
This would change the value stored in memory location 1025 from "Celery" to "Beetroot"
The two main types of main memory are ROM and RAM. Whilst RAM might be several gigabytes in size, ROM will often be a few kilobytes. As ROM is read only memory, it tends to store core software instructions such as the code needed to load the Operating System into RAM (known as bootstrapping) or change the bios. RAM is much much larger and stores the code to run the operating system and programs that you run on your computer. When you load a disc into a games console, the code won't do anything until it has loaded from the disc into the system RAM, that's why you see a loading screen.
A <B>Bus</B> is a connection between different devices. This connection will normally consist of multiple wires along which signals, instructions and data will be carried. In <B>Von Neumann Architecture</B> there is a single <B>Bus</B> to manage the connection between the three main components. The System <B>Bus</B> consists of 3 separate <B>Bus</B>es, each with a specific task that you need to know. This three <B>Bus</B> model is an expansion of the <B>Von Neumann Architecture</B> showing greater detail. 
A single-directional <B>Bus</B> that carries address signals from the CPU to Main Memory and I/O devices. This might involve the CPU requesting some data from Main Memory, sending the address of the data to Main Memory, then Main Memory returning the data along the data <B>Bus</B>. Let's take a look at some code:
LDA 23
This code is asking to load the data from memory address 23 into the CPU, the <B>Address <B>Bus</B></B> does not send addresses to the processor, but only sends them from the processor. To do this the CPU would send codice_3 along the <B>Address <B>Bus</B></B>, and the value from memory location 23 would be sent along the Data <B>Bus</B> back to the CPU. The size of the <B>Address <B>Bus</B></B> can dictate how much Main Memory you can have in your system. For example, if you had an <B>Address <B>Bus</B></B> of 3 bits, then:
This would mean that your Main Memory could only have 8 different addressable blocks
A bi-directional <B>Bus</B>, typically consisting of 32 wires, used to transport data and instructions between the three components of the three-box model. The larger the Data <B>Bus</B> the more data can be transported at one time. For example if we have an 8 bit Data <B>Bus</B>, the maximum value we could send along the <B>Bus</B> would be:
The larger the Data <B>Bus</B> the more data we can send at once and the more complex instructions we can use.
A bi-directional <B>Bus</B>, typically consisting of more than 16 wires, used to transport control signals between the three components of the three-box model. The control <B>Bus</B> is used to carry important information such as messages to say when a device has finished a job or when a device has just been plugged in. A simple example would be when you plug in your USB key and after a few moments a screen pops up asking you what you want to do with it. The control <B>Bus</B> also contains <B>Interrupt</B> signals which allow devices (printers, keyboards, disks, etc.) to signal that they have finished a request. The CPU temporarily suspends its current program, services the device and then resumes the previous program.
The information above will serve you well for the exam; however, the way many modern processors work may break the definitions you have just learnt:
Input/Output devices are used by the system to get information in and out, as they are not internal but are connected to the CPU, we refer to them as peripherals (your hands are peripheral to your torso). We'll cover the specific ones you need to learn a little later, but for the moment you need to know the fundamental difference:
If you look at the <B>Von Neumann Architecture</B> notice that it doesn't mention Keyboard or display, this is a very smart move as you don't want to force every computer to have a keyboard (think about a games console, there is no keyboard on that) or a VDU (some computer such as MP3 players don't have a screen). However, some computer architecture does include specific I/O controllers:
An I/O controller is an electronic circuit that connects to a system <B>Bus</B> and an I/O device; it provides the correct voltages and currents for the system <B>Bus</B> and the I/O device. Examples would include:
I/O ports is a complementary <B>Method</B> of performing input/output between the CPU and peripheral devices in a computer. This allows I/O devices to be connected to the CPU without having to have specialist hardware for each one. Think about the USB port on your computer, you can connect Keyboards, Mice, Game pads, Cameras, Phones, etc. and they all connect using the same port.
Main memory can be very expensive and you often require storing data that you won't use constantly. Think about a computer game that you haven't played for a couple of months. The last thing you want to do is to store this code in main memory taking up all that precious and expensive space. To get past this issue we use secondary storage. This is normally inexpensive data storage sitting external to the CPU, connected through an I/O controller, that we can use as and when we need. Secondary Storage will store data permanently, without the need for the electricity to remain always on (Think about a USB key, it doesn't need to be plugged in to keep its data). So taking the game example again, we only load the game into main memory (maybe from a DVD or hard disk), as and when we need it. Examples of secondary storage include:
As we should hopefully already know, computers can only understand binary, 1s and 0s. We are now going to look at the simplest instructions that we can give a computer. This is called machine code.
Machine code allows computers to perform the most basic, but essential tasks. For this section we are going to use the Accumulator (you met this register earlier) to store the intermediate results of all our calculations. Amongst others, the following instructions are important for all processors: 
Assembly code is the easy to read interpretation of machine code, there is a one to one matching, one line of assembly equals one line of machine code:
Let's take a look at a quick coding example using assembly code. 
LDA #23 ;loads the number 23 into the accumulator
ADD #42 ;adds the number 42 to the contents of the accumulator = 65
STO 34 ;save the accumulator result to the memory address 34
The code above is the equivalent of saying codice_1 in VB.NET.
There are many different instructions that we can use in machine code, you have already met three (LDA, ADD, STO), but some processors will be capable of understanding many more. The selection of instructions that a machine can understand is called the instruction set. Below are a list of some other instructions that might be used:
ADD ;add one number to another number
SUB ;subtract one number from another number
INC ;increment a number by 1
DEC ;decrement a number by 1
MUL ;multiply numbers together
OR ;<B>Boolean</B> algebra function
AND ;<B>Boolean</B> algebra function
NOT ;<B>Boolean</B> algebra function
XOR ;<B>Boolean</B> algebra function
JNZ ;jump to another section of code if a number is not zero (used for loops and ifs)
JZ ;jump to another section of code if a number is zero (used for loops and ifs)
JMP ;jump to another section of code (used for loops and ifs)
Let us look at a more complex example of assembly code instructions:
LDA #12 ;loads the number 12 into the accumulator
MUL #2 ;multiplies the accumulator by 2 = 24
SUB #6 ;take 6 away from the accumulator = 18
JNZ 6 ;if the accumulator <> 0 then goto line 6
SUB #5 ;take 5 away from the accumulator (this line isn't executed!)
STO 34 ;saves the accumulator result (18) to the memory address 34
You'll notice that in general instructions have two main parts:
Depending on the word size, there will be different numbers of bits available for the <B>Opcode</B> and for the operand. There are two different philosophies at play, with some processors choosing to have lots of different instructions and a smaller operand (Intel, AMD) and others choosing to have less instructions and more space for the operand (ARM).
You might notice that some instructions use a # and others don't, you might even have an inkling as to what the difference is. Well here is the truth:
Let's take a look at a quick example:
Let's take a look at doing this without the hashes:
There are many types of addressing modes. But we only need to know 3, they are:
There is no set binary bit pattern for different <B>Opcode</B>s in an instruction set. Different processors will use different patterns, but sometimes it might be the case that you are given certain bit patterns that represent different <B>Opcode</B>s. You will then be asked to write machine code instructions using them. Below is an example of bit patterns that might represent certain instructions. 
If you would like to play around with <B>Assembly Language</B> a great place to start is the Little man computer. You can find a Java applet and some examples at the York University website or a javascript version created by Peter Higginson
A processor (CPU) has several core components that work together to perform calculations. You need to know each of these and how they interact:
The Arithmetic Logic Unit or the ALU is a digital circuit that performs arithmetic and logical operations. Where arithmetic operations include things such as ADD and SUBTRACT and the logical operations include things such as AND, OR, NOT.
The ALU is a fundamental building block in the central processing unit (CPU) of a computer and without it the computer wouldn't be able to calculate anything! Some examples of assembly code instructions that would use the ALU are as follows (not all processors will have all these instructions):
ADD ;add one number to another number
SUB ;subtract one number to another number
INC ;increment a number by 1
DEC ;decrements a number by 1
MUL ;multiply numbers together
OR ;<B>Boolean</B> algebra function
AND ;<B>Boolean</B> algebra function
NOT ;<B>Boolean</B> algebra function
XOR ;<B>Boolean</B> algebra function
JNZ ;jump to another section of code if a number is not zero (used for loops and ifs)
JZ ;jump to another section of code if a number is zero (used for loops and ifs)
The control unit sits inside the CPU and coordinates the <B>Input and Output Devices</B> of a computer system. It coordinates the fetching of program code from main memory to the CPU and directs the operation of the other processor components by providing timing and control signals.
Your computer might contain several clocks that each regulate different things. The clock we are going to look at here will keep the processor in line. It will send the processor a signal at regular times telling it to start the fetch decode execute routine.
<B>Clock Speed</B> is measured in Hertz, which means 'per second'. You have probably heard of <B>Clock Speed</B>s such as 1 MHz, this means 1,000,000 cycles per second and potentially a million calculations. A computer of speed 3.4 GHz means it might be capable of processing 3,400,000,000 instructions per second! However it isn't as simple at that, as some processors can perform more than one calculation on each clock cycle, and processors from different manufacturers and using different architecture are often difficult to compare. (See the Megahertz myth). Also with the increase in multi-core processors such as the PS3 (7 cores) and the Xbox 360 (3 cores) there might be times where the clock might be ticking but there is nothing for the processor to calculate, the processor will then sit idle.
For immediate calculations, using main memory is too slow. Imagine having to send a signal along the <B>Address <B>Bus</B></B> and some data along the data <B>Bus</B> when all you want to do is store the result of adding two numbers together. The distance between the processor and main memory, even though it might be a few centimetres, is far enough for the signal to take a significant time to get there. To get past this issue there are small amounts of memory stored inside the processor itself, these are called registers. Registers are incredibly fast pieces of memory that are used to store the results of arithmetic and logic calculations.
Different processors will have different sets of registers. A common register is the <B>Accumulator (ACC)</B> which is a data register, where the user is able to directly address (talk to) it and use it to store any results they wish. Processors may also have other registers with particular purposes:
There are also 4 registers in particular that you need to know, we'll meet them in more detail in the next chapter:
If we want to increase the performance of our computer, we can try several things
For each different <B>Method</B>s we are going to look at these old games consoles to see how performance increase was achieved:
The most obvious way to increase the speed of a computer would be to increase the speed of the computer clock. With a faster <B>Clock Speed</B> the processor would be forced to perform more instructions per second.
As you can see on the console <B>Table</B> above, each successive console showed an increase in <B>Clock Speed</B>. A <B>Clock Speed</B> of 800 MHz is twice as fast as a <B>Clock Speed</B> of 400 MHz, meaning it should be able to calculate twice as many calculations in a given time.
But what is to stop us increasing the <B>Clock Speed</B> as much as we want? If you study Physics you might already know this, but the problem with increased <B>Clock Speed</B> is that an increased current will have to flow through the circuits. The more current that flows, the hotter things get. You might notice that a laptop will get hot or even your mobile phone when you are doing something processor intensive like playing a game. The faster the <B>Clock Speed</B>, the hotter the processor runs. To counter this computer scientists have come up with smarter chip <B>Design</B>s and introduced heat sinks, fans, and even liquid cooling into computers. If a processor runs too hot it can burn out!
Another way to increase the performance of a computer is to increase the word size. This means increasing the number of bits a computer can process at one time. As you can see from our console <B>Table</B>, increasing word size was a big part of creating faster consoles, they even named a console the N64 to boast about its word size. With a larger word, computers can handle larger or more precise calculations and do more complicated things. Modern computer mostly have 32 or 64 bit word sizes, with specialist hardware such as games consoles being able to handle up to 128 bit words.
Imagine that we were only able to use words of length 6 letters or less and we wanted to describe the Compsognathus dinosaur to someone. We might try the following:
If we were able to use more letters per word (have a larger word size), then we could achieve more in fewer words.
However, to understand the longer words you would have to know what dinosaur and million meant, maybe stopping for a brief moment to remember. In computing terminology, you would have to have more complicated hardware and using lots of little words could be faster than processing larger ones. 
Now that we understand what word size is. Imagine that you have a processor able to understand 32 bit words at a single time. This is pretty standard. But what happens if the <B>Bus</B> sending the words from memory to the processor was only 8 bits wide? We'd get a bottle neck. It would involve four chunks of data to be sent along the Data <B>Bus</B> before we had a word for the processor to execute. In other words, to increase performance we must also increase the <B>Bus</B> size to avoid bottle necks:
Imagine our friend can understand words of 28 bit length and we are sending the word: "antidisestablishmentarianism" to them. If the link between us (the <B>Bus</B>), say a chat window on a website, only allowed for 4 letters at a time (the <B>Bus</B> width). We'd have to send the following:
Requiring seven data sends before our friend is ready to process the word we sent them. If we were able to send more letters at once, through a larger <B>Bus</B> width, then our friend wouldn't have to wait around to receive all the data.
A very common exam question is to name the components of a computer architecture diagram. Now we have met the processor, <B>Bus</B>es and various other computer components we can start to answer questions like the following:
Match the following components to the numbers on the diagram: Processor, Data <B>Bus</B>, Control <B>Bus</B>, Main memory, Keyboard, Secondary storage, <B>Address <B>Bus</B></B>, Clock, Monitor, VDU controller, disk controller, keyboard controller
Don't worry about the size of this problem, we are going to tackle it bit by bit. the first step is to remember the differences between each of the components:
The Fetch-Decode-Execute cycle of a computer is the process by which a computer:
This cycle is repeated continuously by the central processing unit (CPU), from bootup to when the computer is shut down. In modern computers this means completing the cycle billions of times a second! Without it nothing would be able to be calculated.
The circuits used in the CPU during the cycle are:
To describe the cycle we can use register notation. This is a very simple way of noting all the steps involved. In all cases where you see brackets e.g. <nowiki>[PC]</nowiki>, this means that the contents of the thing inside the brackets is loaded. In the case of the first line, the contents of the program counter is loaded into the Memory Address Register.
To better understand what is going on at each stage we'll now look at a detailed description:
The contents of the Program Counter, the address of the next instruction to be executed, is placed into the Memory Address Register
The address is sent from the MAR along the <B>Address <B>Bus</B></B> to the Main Memory. The instruction at that address is found and returned along the data <B>Bus</B> to the Memory Buffer Register. At the same time the contents of the Program Counter is increased by 1, to reference the next instruction to be executed.
The MBR loads the Current Instruction Register with the instruction to be executed.
The instruction is decoded and executed using the ALU if necessary.
The Cycle starts again!
Understand the structure of the Internet, the role of <B>Packet <B>Switch</B>ing</B>
Understand the difference between the Internet, the Web and an intranet.
Uniform Resource Locator (URL)
Uniform Resource Identifier (URI)
Domain Names and IP Addresses
Internet registries and Internet registrars
Internet Service Providers (ISP)
Domain Name Server (DNS)
The Client–Server Model
Common Standard Protocols: 
Understand the role of a web browser in retrieving web pages and web page resources and rendering these accordingly.
The history of computing started off with centralised computers (in many cases mainframes) or servers performing all the calculations. Client computers were then attached to these centralised computers (servers) and if you wanted to calculate something, you would have to wait for the central computer to respond. As computing power got cheaper client nodes became more powerful and the central computer less important. However, with the growth of the internet, there has been a shift back to a client server model. Powerful central computers store information such as emails, documents, music and videos or offer services such as file hosting, printing, game hosting and internet access; client computers fetch information and use services from these central servers. In the next few years you are likely to see more and more software moving away from running on your desktop to running on remote servers and you accessing it as a client, this is called software as a service.
As an example of modern client server model consider a video sharing website. The website, let's call it "mutube", has a server that stores all the videos that are uploaded to the site. The website is used by millions of clients a day and each of them connects to the server to watch videos. When a client connects to "mutube" the server and asks for a particular video, the server loads the video into RAM from a large array of hard disks and "mutube" sends the video to the client. The client on receiving the video, presses play and watches the video.
Other examples of servers might be a shared printing service in a college. The print server will be hosted on a single computer, and when anyone in the college wants to print, the request is sent to the server. In this case the server will keep track of how much printing credit each user has and make sure that the print queue is dealt with properly.
The current client-server model is starting to change, with companies being less likely to offer services with a centralised server. Increasingly internet firms are reaching a global clientèle, it makes little sense to have a server or servers based in one location as if your servers are in America and some of your users in Armenia, these users will experience slow access to your services. Another problem is if a power cut affects your server or the connection to that one server or set of servers goes down then the service you are offering the internet will also stop.
With cloud computing the services may be distributed all over the globe, meaning that wherever you are, you'll have a server reasonably close to you offering access to the data and services you need. It also means that if one server goes down other servers in different locations can keep the service running. Keeping <B>Database</B>s synchronised across the globe, so your mail client has the same mails in Switzerland as in Swaziland, is a complex task and firms such as amazon and rackspace offer services to help you handle this. One downside with cloud computing is you are never quite sure where your data is, and if you're not careful you might find data being stored in countries that have less <B>String</B>ent data protection laws than your own.
Servers are software programs that in most cases run off normal computing hardware. Server software includes:
Clients are software programs and processes that connect to servers, sending requests and receiving responses. Client examples include:
Trying to remember IP addresses is as difficult as trying to remember people's phone numbers. Not many people do it well and you are far more likely to be using a domain name to access a website. A domain name allows us to link to servers and other computers using easily remembered names. The domain name also tells us a bit about the location we are visiting through the use of top level domain names.
Sometimes top level domain names might be joined by second level domains, chained together to tell you more detailed information:
Second level domain names typically tell you the person/company/organisation that owns the address. Finally you have the host or service name, which is the machine/service you are connecting to. For example:
formula_1
In the example above a client sends a request to a Domain Name Server for www.debian.com, but after that domain name lookup is hierarchical:
Results are remembered for a period of time to reduce the work load.
If you have a modern mobile phone it is very unlikely that you will type in the number of your friends each time you want to call or text them. You are far more likely to use the address book, typing in their name, then letting the phone find the number. This is exactly the same principle behind the Domain Name System. A DNS server translates domain names meaningful to humans (such as www.google.com) into IP Addresses for the purpose of locating and addressing these devices worldwide.
Domain names are far easier for humans to remember than an IP address. To see a domain name in action you can use the codice_1 command, where pinging google, uses the DNS server to find the IP address you want to send a ping packet to:
Or on Linux try codice_2
Internet registrars are responsible for allocating internet domains to anyone who wants one. If someone wanted to own their own website with a domain name, they would have to go to an internet registrar in order to buy the website name. These services typically require payment in order to maintain control over the name of the website. If you do not renew your website, then the internet registrars may sell it to other buyers.
In the early days of the World Wide Web, there were many instances of companies paying lots of money to buy their web domains from private individuals who were 'cyber-squatting'. Other organisations shared the same address and there were many legal fights and much cash exchanged to gain control of domain names. If you want to take a look at websites from the past take a look at http://web.archive.org and look at the following websites in the mid 1990s:
You may ask why a company would want a domain to link to multiple IP addresses? If you think about a multinational company's website, if someone tries to load your homepage you don't necessarily want them to have to load this webpage from an server at an IP address on the other side of the world. So depending on their region you would point them at an IP address close to their current location. Typing in www.google.com in Europe and in Asia will send you to different IP addresses even though you have used the same domain name. Sometimes the content of the server won't be the same depending on your region.
Also big sites not only do geographic IP splitting but load balancing as well. This is when a domain name is undergoing heavy usage, and one particular IP address might be very <B>Bus</B>y, the domain name will then be pointed to other servers sitting at different IP addresses, balancing the 'load' of users accessing the site.
Getting a direct connection to the internet is quite costly involving specialist hardware. Most people and organisations pay ISPs to link them to the internet. Examples of Internet Service Providers are : AOL, BT, Sky, TalkTalk and Virgin Media.
Every device attached to a <B>Network</B> has a number assigned to it. This unique number is called the IP Address, and you might be familiar with the format of:
Currently the most common form of IP Address is IPv4 which uses 32 bits to store an address. This means that there are theoretically formula_1 different IP Addresses that can exist. However, due to the allocation of IP ranges to different organisations and tasks, the number is lower.
An IPv4 address is typically shown as split into 4 chunks as shown above. Different ranges of IP addresses are categorised differently, with the first part of the IP specifying who or where the IP address is (the <B>Network</B> identifier), and the second part defining which host/machine it is (the host identifier).
formula_2
Different sets of IP ranges are allocated to particular <B>Network</B>s, geographic areas, companies etc. The <B>Table</B> below shows several examples of IP ranges and the uses that they have been put to:
As you saw with <B>Packet <B>Switch</B>ing</B>, every request that gets sent over the internet is sent with the sender's IP address attached. This is useful for many different reasons. Firstly you can send a confirmation message to the sender to confirm that you received the data. Secondly websites can keep track of where their users come from. Thirdly websites can block requests from certain IP address ranges. For example if you were running a national television service such as the BBC, where your programming was paid for by your fellow countrymen, you wouldn't want people from other countries watching programmes that they hadn't paid for. If you try and access the BBC iPlayer from the USA it will say "Not available in your area". This is because an American's IP would be from a banned IP range. IP banning can also be used by governments to bar their populations from accessing websites on certain IP addresses.
The diagram above shows how two intranets can connect across the internet. If the computer in Intranet A with the IP address 192.168.1.2 wants to send a message to a computer in Intranet B, it will send its message through the <B>Router</B> connected to Intranet A (IP=172.8.18.100). This <B>Router</B> will then route the message onto the internet, going from <B>Router</B> to <B>Router</B> until it reaches the <B>Router</B> attached to Intranet B (IP=201.108.0.45). This <B>Router</B> will then pass the message on to the correct machine in Intranet B. Notice that because each intranet is connected to the internet through a <B>Router</B>, the computers on each intranet will appear as having the IP of their <B>Router</B> when connected to the internet. If you share a house and someone commits a crime online, the finger might be pointed at the whole household! Using IP addresses this way was never the intention of the <B>Design</B>ers of TCP/IP, they would much prefer that each machine had a distinct IP address, however, with the shortage of IP addresses this isn't possible. What is needed is a system that has more addresses available.
As you might have noticed, there is a limit to the number of IPv4 addresses we can have, this limit is well below the current population of the world. If we were in the future to have every inhabitant of the planet connected to the internet, there wouldn't be enough IP Addresses for them to use! This problem is very current and IPv6 is being introduced to try and resolve it. IPv6 uses 128 bits for each address, meaning we have theoretically formula_3 addresses available = formula_4 different possible addresses.
The IPv6 address has 128 bits split into:
Why would we ever need this many you may ask? With so many addresses this will allow each person to have multiple devices connected to the internet, currently driven by the demand for internet on mobile phones. We are also looking at connecting lots of other devices to the internet that might not currently be connected. For example we could have fridges telling us when we are low on milk, ovens telling us when they need cleaning, bikes telling us when they need a service. The future is coming, watch this IPv6 space!
The internet impacts heavily upon the way that we live, study and work. But it hasn't always been that way. In the 1960s ARPA, a part of the American Department of Defence, funded several large computing projects. These projects were very expensive and situated in different parts of the USA. It was unreasonable to expect research groups to travel to each of these sites, and it was far too expensive to build more of them, what was needed was a <B>Method</B> to link them together so that information could be easily exchanged. ARPANET was created, basing communication on "<B>Packet <B>Switch</B>ing</B>". This system of communication broke messages into chunks which were then passed to other sites using a <B>Network</B> of interlinked computers. Due to the unreliable nature of connections, if any link in the <B>Network</B> broke, a packet could be re-routed around the problem to reach its destination. The concept is similar to how drivers can take different routes when they meet a blocked off road.
A popular myth is that the internet was started because the American Department of Defense were looking at how they could maintain control of military <B>Installation</B>s in the event that they were on the receiving end of a Soviet Nuclear strike. This would mean that communications between sites would have to be maintained even if one or more of the sites connecting <B>Installation</B>s were knocked out. A sound idea, but not the reason for starting ARPANET. The <B>Network</B> never carried any <B>Class</B>ified material and was predominantly used for research purposes, connecting research institutions, including Universities in the UK.
In the 70s ARPA funded other experimental <B>Network</B>s and made an effort to unite them. At the same time the limits of the initial <B>Network</B> to 63 nodes and 252 hosts were reached and so the TCP/IP protocol was created. This protocol, or set of rules, allowed different <B>Network</B>s to talk to each other. This protocol still forms the main link between <B>Network</B>s in the internet to this day.
As the internet consists of many different <B>Network</B>s interlinking with each other, the internet has no central structure or governing body. This makes it very ro<B>Bus</B>t, meaning that if one connection between two hosts is lost, you can probably find another route to send information by. It also poses a threat to some governments, as they struggle to restrict information available to their citizens. Countries such as North Korea and China filter their internet links through a few connections to the outside world, this means the government can control what comes in and out of the country, giving them the ability to filter which websites are available and allow them to <B>Switch</B> the internet 'off' at times of crisis, by cutting these connections. This happened during the 2011 Arab Spring, where Tunisia, Egypt and Libya tried to stop their citizens from getting information from the outside world.
The first thing to notice is that the World Wide Web is not the internet, but a subset of what the internet offers. The internet hosts all forms of data, including games, video, telecommunications etc. while the WWW only transmits hypertext documents. The WWW is accessed through a web browser linking files together using hyperlinks and was invented by a British computer scientist, Sir Tim Berners-Lee in 1989.
To link multiple computers together we need to use devices called <B>Router</B>s or <B>Switch</B>es. These devices co-ordinate sending messages from one system to another, making sure that packets get to their destinations
<B>Packet <B>Switch</B>ing</B> is the <B>Method</B> by which the internet works, it features delivery of packets of data between devices over a shared <B>Network</B>. For example the school web server sending you a webpage over the internet or you sending an email to a friend. To get from one device to another the data packets will have to travel through <B>Network</B> adapters, <B>Switch</B>es, <B>Router</B>s and other <B>Network</B> nodes. The route taken by each packet might vary and at times there might be a lot of data travelling through these nodes meaning packets will be queued. This will result in varying times it takes to send data from one device to another depending on the traffic load in the <B>Network</B>.
If you play computer games online you might have heard the term latency (or lag), this is the time taken to send data from one device to another. The higher the latency (time taken to send data), the less responsive your game will be. People with very low latency tend to do better at games as their machines will be more responsive.
To see the time it takes to send a message using <B>Packet <B>Switch</B>ing</B> you can use the codice_1 command to time how long it takes to send data to another device, in this case we have used the codice_2 to ping the www.example.com server:
As you can see the same data is being sent to the same location in all 5 attempts, but the second attempt met traffic on the way and took much longer. However, at 180.1 milliseconds you probably wouldn't notice.
As <B>Packet <B>Switch</B>ing</B> doesn't define a set route for data to be sent by, any disruption in the <B>Network</B> can be circumnavigated by re-routing:
The codice_3 command is used to map the route from one machine to another on the internet showing all the intermediate nodes, in this case, the message took ten steps to get there. The code above shows a trace from a home <B>Network</B> to the www.google.com website. You can see that the 4th hop got lost and the data had to be re-routed.
If you want to try this at home there are different commands used on different operating systems:
With <B>Network</B>s and the internet, we need to allow computers to talk to each other. To make sure that a computer talks to another in a way that the other understands, there are sets of rules governing modes of communication. These rules are called "protocols". There are many different protocols out there, each defining rules for specific communication types.
When you send and receive data from a client or server, you will be sending lots of different types of data. To make sure that the data is dealt with by the correct program, for example a website request is dealt with by the web server, you need to add a port number. Each application will have a port number associated with it. For example a web server is port 80 and a game of doom is port 666.
Combining an IP address with a port gives us a socket. This is a direct connection to a process or application on a machine. The following example is connecting to a webserver on 203.43.12.234.
formula_1
There are many well-known ports out there, here are a few of the ones you might need to know:
Several of the protocols used to transmit data across <B>Network</B>s (including the internet) are not secure. This means that if you are one of the <B>Router</B>s that is used to get data from one host to another, you can read the data being sent, this technique is called packet sniffing. Normally this isn't a problem as the data being transmitted isn't secret but reading other people's packets without their permission is a crime in the UK.
File Transfer Protocol (FTP) is a standard <B>Network</B> protocol used to copy a file from one host to another over a TCP/IP-based <B>Network</B>, such as the Internet. FTP is built on a client-server architecture. FTP users may authenticate themselves using a clear-text (unencrypted) sign-in protocol but can connect anonymously if the server is configured to allow it. FTP works on port 21.
The first FTP client applications were interactive command-line tools, implementing standard commands and syntax. Graphical user interface clients have since been developed for many of the popular desktop operating systems in use today.
The Hypertext Transfer Protocol (HTTP) is a <B>Network</B>ing protocol behind the World Wide Web. HTTP allows for transmission of Hypertext documents and webpages. HTTP works on ports 80 and 8080.
Telnet is a <B>Network</B> protocol used on the Internet or a local area <B>Network</B> to provide text-oriented communications between a server and remote clients. A client will connect to the server using a terminal (black and white command line console) and can then deliver commands to the server to perform things like remote software <B>Installation</B> or system updates. Telnet works on several different ports.
Pros
Cons
Simple Mail Transfer Protocol (SMTP) is an Internet standard for sending electronic mail (e-mail) across Internet Protocol (IP) <B>Network</B>s. SMTP is specified for outgoing mail transport and uses TCP port 25. The protocol for receiving mail is called the Post Office Protocol 3 and it uses port 110.
Sometimes we need to send data securely over <B>Network</B>s. There are several protocols that allow you to do this. You can normally tell if a protocol is secure if it has the letter 'S' in its name. Examples include SSH, SFTP and HTTPS (SMTP is NOT secure!)
Hypertext Transfer Protocol Secure (HTTPS) is a combination of the Hypertext Transfer Protocol with the SSL/TLS protocol to provide encrypted communication and secure identification with a <B>Network</B> web server.
HTTPS is often used when sensitive information is being sent over the internet, for example on internet banking webpages.
IP addresses change, for example if you connect your laptop to the internet at home you get one IP address. If you were then to take it around a friends and connect there, you would be given another IP address. <B>MAC Address</B>es are unique to the device they are given to and every <B>Network</B> interface has a <B>MAC Address</B>, including mobile phones, game consoles and wireless cards. This is important when you consider that a computer can have more than one <B>Network</B> interface. For example with a laptop you might have a cat-6 <B>Network</B> card and a wireless card, one handling BitTorrent and the other web browsing. When you receive a message, which <B>Network</B> interface should it be sent to? The <B>MAC Address</B> would mean that messages can be directed to a particular <B>Network</B> interface, namely the wireless card or the cat-6 card. In a moment you will see how we use <B>MAC Address</B>es with the <B>TCP/IP Stack</B>.
The most common protocol on the internet is the Transmission Control Protocol/Internet Protocol (TCP/IP). To send data over a TCP/IP <B>Network</B> requires four steps or layers:
To show you how the <B>TCP/IP Stack</B> works we going to use the following data as an example:
The <B>Application Layer</B> makes sure that the data is sent in a format that will be understandable by the recipient. This will mean formatting data to be sent in a standard way applicable to that application, for example HTTP, FTP etc. In this case we are going to wrap each piece of data in XML tags.
The <B>Transport Layer</B> looks at the data to be sent and splits it into chunks that can fit into data packets. It then attaches a number to each, specifying that packet's order, this allows the recipient to place the data back together correctly at the other end. To each packet it then attaches a port number dependent on the application being used. For the example we'll send data to port 60:
The <B>Network</B> layer attaches the IP address of the sender, so that the recipient will know who sent it and who to send a confirmation message to. It must also attach the IP address of the host that it is sending the data to so it doesn't get lost! In this case we are sending to 102.231.4.189 and sending from 98.1.232.99. Combined with the port number this creates a socket that data is being sent from and a socket that data is being sent to, namely "102.231.4.189:60"
Finally the <B>Link Layer</B> attaches the <B>MAC Address</B> of the sender and the recipient, allowing the packets to be directed to a specific <B>Network</B> interface on the IP Address host machine. In this case the sender is using a wireless card with <B>MAC Address</B>: 00-17-4F-08-5D-69 and the destination <B>MAC Address</B> is: 11-22-33-44-55
These four packets can then be sent across the internet holding enough information for them to:
TCP/IP does a great job of ensuring that the data you request is sent correctly and the data you send is received. However, as you have seen, sometimes data can get lost on the internet or packets can arrive in an order differing to the one you sent them in. With something like a computer game or telecommunications you can't wait for a slow packet to find its way across the internet. This would result in voice messages slowing down and computer games becoming unresponsive. There is another protocol called UDP that doesn't ask for a confirmation that data packets have been received. This protocol is used heavily in <B>Network</B>ed computer games and voice over IP, as losing a packet here and there won't impact too badly on the overall game experience or voice conversation. When you play computer games, you might see something that says "lost packets = xyz" or when having a web meeting the quality of voice or video might briefly degrade. This is packet loss in action and a result of using UDP.
Show the steps involved in sending the following data:
Resources such as documents, files and folders sitting on the internet need a <B>Method</B> to identify them and access them. URIs provide a way to linking to these resources. There are two types of URI, but you only need to know URL for the exam:
e.g. urn:isbn:0486419266The URN for R.U.R. (1921 play), identified by its book number.
e.g. http://www.gutenberg.org/catalog/world/readfile?fk_files=85821The project gutenberg page for the R.U.R. book
A URL is a URI that, "in addition to identifying a resource, provides a means of locating the resource by describing its primary access mechanism (e.g., its <B>Network</B> location)". URLs allow us to specify the domain name and exact location of a resource on the internet. For example, the following links to a picture on wikicommons:
We can break this down into its constituent parts:
formula_1
We can therefore summarise a URL as follows:
formula_2
Web page construction
HTML & style sheets
Web pages are now an essential part of how many people live their lives and perform their jobs. More and more computer functions are now moving to web based applications and it is important that you are familiar with this technology.
You might have made some web sites at secondary school using WYSIWYG editors such as Front Page and Dreamweaver. For the A-Level Computing course we are going to take a look at the code that these editors produce, and how to structure webpages with code. Open this wikibook page in any browser and click codice_1 in Firefox / Chrome or codice_2 in Internet Explorer, you should have the webpage code in front of you.
All web pages have the following basic structure:
Which can be represented in HTML code using the following Tags:
<html>
</html>
Web pages are built out of tags. These tags define what is on the page and how it should be structured. There are two types of tags that you can use, and all tags should be written in lower case.
<h1>A Book About Computing</h1>
<hr />
On line one you can see the first type, it has an opening tag codice_3 something in the middle "A book About Computing" and a closing tagcodice_4. This tells us that everything between these tags should be treated as a level one heading (h1).
On line two you can see the second type of tag, there is no closing tag, the tag is entirely self contained. The codice_5 stands for a horizontal rule, a line across the page.
Some tags are supposed to be used in certain locations on a webpage and have special functions that may not result in any change to the content or layout of that page. There are special tags reserved to help a webpage get found and ranked by search engines. These tags live in the codice_6 section of a webpage.
Draw a web-browser display for the following:
<html>
</html>
Notice that the codice_7 appears as the title of the browser window, but the codice_8 is not visible to the user. It is merely there to help web search engines categorise the page.
The web is full of free resources to skill yourself up and there is nothing to stop you becoming a top notch web <B>Design</B>er. The questions here are sui<B>Table</B> to get you through this course with some added elements. If you want to get really good at the vaste array of web technologies out there you should be looking to teach yourself. A great place to get started is the w3schools website where you can take courses in:
If you want to learn about the code that builds dynamic webpages, including Facebook, check out:
Block tags allow you to give a tag <B>Attribute</B>s such as padding and margin. This allows you to insert tags into various parts of a page and rely on the other elements there to move to make space for it without worrying about overlap. The tags you need to know are:
codice_5 - puts a horizontal line across the page where ever you are, useful for breaking up pages
<html>
</html>
codice_9 - heading tags make any text between the tags a heading, the higher the number (h#) the less significant the heading
<html>
</html>
The code above produces the following:
For all following examples the html, body and head tags have been left out. This doesn't mean they don't exist and if you code it you must include them.
There are 2 types of list that you need to know, ordered lists (codice_13) and unordered lists (codice_14). Each has individual list items (codice_15) that hold all the data.
the code above would give you:
the code above would give you:
As you can see above the individual list items are contained within the codice_15 brackets.
A Div element is used to divide a web page into sections codice_16 - this takes up space on a page and the page will appear larger the more of them you place in.
A Paragraph codice_11, allows you to structure your text like you would if you were writing an essay.
A Break codice_12, creates a new line.
These don't take up any physical space on the page (they don't cause a new line) and can overlap each other. They are:
produces the following:
Let's take a look at a quick example:
<h2>Ditty</h2>
I tell you naught for your comfort, <br /> Yea, naught for your 
desire,<br /> Save that the sky grows <strong>darker</strong> yet <br /> And the sea rises <strong>higher</strong>
<hr />
- G.K.Chesterton, <em>The Ballad of the White Horse</em>(1911)
The output of the above is as follows:
As you can see the layout of the HTML code doesn't always reflect how it will look on screen, remember even if your code looks like it has line breaks, if you don't use block-level tags such as codice_12 or a codice_35 you won't get any breaks.
Now it's time to test your knowledge:
Sometimes you want to write something in the HTML code of a webpage to help you understand the code better. This is called a comment and is an ubiquitous feature in any computing language. Comments don't perform any computing function and don't display on a finished Web page, they are merely there for the web <B>Design</B>er to use so that they can understand the page better. For HTML we use the following tags:
<html>
"Love means to love that which is unlovable; or it is no virtue at all."
</html>
In the example above, the line starting with the codice_36 and ending in codice_37 is a comment. A comment block start with codice_38 and ends with codice_39 and you can have as many comments as you like between those tags, as long as they start and end with codice_40. Everything in between these comment tags will not be displayed on the screen, producing this:
What we have been learning so far are the very basics of web <B>Design</B>. If you like what you've been doing you better check out HTML5. HTML5 is starting to make websites fully interactive with the ability to quickly embed videos and interact with web pages. Over the next few years you'll increasingly see applications moving over to this new technology, so get with the program and start learning at w3schools. 
Web page <B>Design</B> is an art and there is no way of guaranteeing your website will look fantastic, however there are some rules that you can stick to when attempting to make a professional looking website:
There is an artistic theory that states when you split an image into thirds aligning the main components in this format then it looks better.
This theory has been adopted into web <B>Design</B> and many websites you use will utilise this rule of thirds, splitting the information into 3 columns, or 1 column and another column taking up two thirds.
Three web page colour schemes you need to know are: monochromatic, analogous, complementary colour
Monochromatic color schemes are derived from a single base colour, and extended using its shades, tones and tints (that is, a hue modified by the addition of black, grey (black + white) and white. Monochromatic color schemes may be considered boring unless there is diversity within the <B>Design</B>
Analogous colors are colors that are adjacent to each other on a color wheel. Some examples are green, yellow green, and yellow or red, red violet and violet. Analogous color schemes are often found in nature and are pleasing to the eye.
In color theory, two colors are called complementary if, when mixed in the proper proportion, they produce a neutral color (grey, white, or black). In the diagram below they are the colours that are opposite each other. Examples of complementary colours include:
This is the Computer Systems, Programming and <B>Network</B> Concepts module of the A-level Computing Book. This module consists of four chapters listed below with their short summaries. Please follow the links to learn out more about each section.
ASCII normally uses 8 bits (1 byte) to store each <B>Character</B>. However, the 8th bit is used as a check digit, meaning that only 7 bits are available to store each <B>Character</B>. This gives ASCII the ability to store a total of
ASCII values can take many forms:
Take a look at your keyboard and see how many different keys you have. The number should be 104 for a windows keyboard, or 101 for traditional keyboard. With the shift function valus (a, A; b, B etc.) and recognising that some keys have repeated functionality (two shift keys, the num pad). We roughly have 128 functions that a keyboard can perform.
If you look carefully at the ASCII representation of each <B>Character</B> you might notice some patterns. For example:
As you can see, a = 97, b = 98, c = 99. This means that if we are told what value a <B>Character</B> is we can easily work out the value of subsequent or prior <B>Character</B>s.
Without looking at the ASCII <B>Table</B> above! If we are told that the ASCII value for the <B>Character</B> '5' is 011 0101, what is the ASCII value for '8'.
We know that '8' is three <B>Character</B>s after '5', as 5,6,7,8. This means that the ASCII value of '8' will be three bigger than that for '5':
Checking above this is the correct value.
If you are worried about making mistakes with binary addition, you can deal with the decimal numbers instead. Take the example where you are given the ASCII value of 'g', 110 0111, what is 'e'?
We know that 'e' is two <B>Character</B>s before 'g', as e, f, g. This means that the ASCII value of 'e' will be two smaller than that for 'g'.
88 - as it is 2 <B>Character</B>s down in the alphabet
How many ASCII '<B>Character</B>s' does the following piece of text use:
27 or 26. If you said 23 you'd be wrong because you must include the non-printing <B>Character</B>s at the end of each line. Each end of line needs a EOL command, and a new line needs a carriage return (CR), making the text like so:
For the Latin alphabet ASCII is generally fine, but what if you wanted to write something in Mandarin, or Hindi? We need another coding scheme!
You might have to use ASCII codes when reading from text files. To see what each ASCII code means we can use the folliwing function codice_1 which returns the ASCII code with denary value x. Try out the following code to see the first 128 <B>Character</B>s. What is special about <B>Character</B> 10?
For x = 0 To 127
Next
Console.ReadLine()
Java is currently one of the most popular languages in Computing worldwide. It was created to meet the need of the Internet age, with programs that could run on any computer architecture (type of hardware-processor combination) without the need for the programmer to separately compile the code for each architecture. Java was developed by Sun Microsystems, now acquired by, and merged into, Oracle Corporation. Java is <B>Open Source</B> under the GNU Public License, and its standards are controlled by a community process. There is an independent version of Java called the OpenJDK Runtime Environment (IcedTea6 1.9.10). This has been gaining ground since Oracle took over Sun but it uses the same API (Application Programming Interface). There is a widely recognised set of <B>Library</B> functions for Java that are available on-line for free.
Oracle produce versions of Java for Windows, Mac and Linux that are free to download and use. These include three major flavours:
There are at least three excellent and free IDEs (Integrated Development environments) for Java. "viz" BlueJ, Eclipse and NetBeans.
If you are starting out then the author of this page would strongly advise that you initially compile and run a few programs with the command line and then start with BlueJ, advantages being:
To get going you need to install a Java SDK (Software Development Kit): the most popular is the Oracle JDK. You probably already have the JRE (Java Runtime Environment). If you haven't, you get one with the JDK anyway.
There are various versions of the JDK. The Standard Edition (Java SE) gives you everything you need to compile programs to run on your own computer, as well as <B>Database</B> support. As of version 6, the Java SE SDK come with Java DB (aka Apache Derby), a lightweight embedded <B>Database</B> originally developed by IBM.
To get access to something like a mysql <B>Database</B> you will need the EE version of the SDK (Enterprise version) and the mysql <B>Database</B> connector.
Por<B>Table</B>apps maintain a version of eclipse that can be used from a memory stick on any windows machine
Java is the main language used for developing android applications. You can download a plugin for the Eclipse IDE and there are many free resources out there to get you started.
Java Programming and other Java books at Wikibooks are listed under .
Useful printed books are as follows:
Android Books:
This exam is worth 40% of your A-Level. It is examined in June of your final year only.
In this unit you will see several <B>Algorithm</B>s that operate on the data structures you have seen in the previous unit.
Using a stack instead of a queue would turn this <B>Algorithm</B> into a depth-first search.
The above <B>Method</B> described is non-recursive , so in order to do "Post Order" traversal, which
is an important variation , instead of working on the current vertex after inserting all its children
in the stack, insert it into a second stack. 
Then pop of the vertices in the second stack and operate on them in that order.
If the graph and parent-child relationships represents a dependency relationship, e.g. a construction schedule for various trades,
a curriculum of related units of study, then the order created by emptying the second stack creates a viable schedule.
This chapter will explain what optimisation <B>Algorithm</B>s are and explain one specific example: Dijkstra's <B>Algorithm</B> to find the shortest single-source paths.
One of the many features of a smart phone is the fact that they can generate routes between different places quickly. The criteria for selection varies from fastest or shortest and often can involve walking, cycling, driving or public transport. If you divert from your original path the phone will reroute you, often in seconds. One <B>Method</B> of finding the optimal route efficiently is by using Diijkstra's <B>Algorithm</B>. This is an example of an optimisation <B>Algorithm</B>.
Optimisation <B>Algorithm</B>s examine large volumes of data and look for a the best solution for a given problem. 
...iterative <B>Method</B>s...
... examples ...
Diijkstra was a dutch computer scientist who created the shortest path <B>Algorithm</B>. It took him 20 minutes apparently.
What does Diijkstra's <B>Algorithm</B> do?
There are many linked locations on a map, start at any one of them and find the shortest distance to get to another one. All the locations are linked together via intermediate locations and the time of travel between any two linked locations is known. However, not all locations are linked directly.
Lets look at Diikstra's solution by creating an abstraction of a map.
... Diagram of a map here ...
First the we need to create a map of the locations. We call the locations nodes.
... diagram of nodes ...
The distance (or times depending on the problem) between and two nodes is called a vertex (plural vertices).
... diagram of nodes and vertices ...
So how can we create an <B>Algorithm</B> based on this information to efficiently work out the shortest distance? 
First the abstraction is created and the nodes and labeled vertices are added as shown above.
The starting node is then identified.
Each node which is directly linked to the to the starting node is identified and the distance from the staring node assigned to it. (These are the numbers which are written in the circles representing the node in the linked example below) The vertices are all coloured green. Green vertices might be part of the shortest route.
Next, the node containing the smallest number is identified.
The nodes linked to this node are identified and the total of the vertices from the starting point to these new nodes are calculated (and written in the node) If one of these nodes already has a value in it which is higher the newly calculated number then it is crossed off and replaced with the smaller number. The vertex which has been added to the node is coloured green. If one of these nodes has a value in it which is lower or equal to the newly calculated number then it is ignored.
This process is then repeated. ie The new smallest node is identified and all the directly the linked nodes are identified and the total distances are calculated. Vertices which are part of the new shortest distance are coloured green.
Eventually the node with the shortest value in it is the node that we are trying to reach.
The value in it is the shortest distance between the start node and the terminating node.
The path that links them is the green path between them
This animation will help you to see the process. 
http://www.gitta.info/Accessibiliti/en/html/Dijkstra_learning<B>Object</B>2.html
While Diijkstra's <B>Algorithm</B> is <B>Design</B>ed to find the shortest distance between two points the final <B>Network</B> has the shortest distance from the starting point to any point in the <B>Network</B>.
If the <B>Network</B> on the animation had another node which was further than 12 units from the start node it clearly is not involved with the shortest path but the <B>Algorithm</B> will run until all possible nodes and paths have been considered. If this issue went unresolved in a Sat Nav it would be considering roads in Scotland before finding the best route from London to Birmingham.This is clearly a waste of time. A straight forward refinement to Diijkstra's <B>Algorithm</B> would be to have it stop once all unconsidered vertices were equal or greater than the shortest distance calculated between the starting point and the desired finishing point.
Reverse polish notation (otherwise known as post-fix, RPN for short) is a way of representing mathematical expressions. The notation is used because the format that the expression is in is easier for machines to interpret rather than the notation we are used to, infix notation, where the operator is in between the numbers. The equation can be complex or simple. RPN doesn't require brackets as the equations are laid out in such a format that they aren't required for machines to understand.
There is no inherent reason why operators should be written between the operands, as they are with the standard arithmetic operators. The operators could come before the operands (prefix), between (infix), or after (postfix). Here is the same expression written in three formats:
We are used to seeing arithmetic written infix and functions written in prefix notation, often with brackets (e.g. codice_1 to express the operation of taking a square root). We could write arithmetic in the same form, such as using Python's codice_2 <B>Library</B>: 
»> import operator
»> operator.add(operator.mul(3, 4), 2)
14
Neither prefix nor postfix notation require brackets to express grouping of operations: the order of <B>Evaluation</B> is dictated solely by the order of operations. 
Infix notation can only easily express operations that take one or two parameters (such as binary addition or square roots). Operations that take more than two parameters require typographic embellishments such as brackets.
Some programming languages, called "stack-based programming languages", use the model of stack-based <B>Evaluation</B> throughout. The most well-known stack-based languages are PostScript and Forth.
Expressions stated in reverse Polish notation can be simply evaluated using a stack. As the expression is read, values are pushed onto the stack. When an operation is read, values are popped from the stack and the result pushed back on the stack. The result left on the stack is the overall value of the expression.
The use of a stack and uniform precedence rules makes it very easy to write code to calculate the results of reverse polish expressions. 
Using a slightly more complex example than above, <B>Evaluation</B> of "3 4 × 10 2 ÷ +" can proceed as follows:
The result left on the stack, 17, is the overall value of the expression.
A video example can be seen here from Computerphile on Youtube: https://www.youtube.com/watch?v=7ha78yWRDlE
A searching <B>Algorithm</B> looks for a given item in a given data structure. The <B>Algorithm</B> used depends on how the data is structured.
If you have a list (or array) that is not sorted, then the simplest searching <B>Algorithm</B> is <B>Linear Search</B>: go through the list item by item and compare to the searched item. If a comparison succeeds, the <B>Algorithm</B> has found the item. If all comparisons fail, the item doesn't exist in the array or list. 
In the simplest variant, the <B>Algorithm</B> returns a <B>Boolean</B> to indicate success or failure. Here is the pseudo-code:
for each item in the list:
return false
which can be directly translated to Python:
def exists(soughItem, aList):
assert exists(2, [2, 1, 3]) # sought item in first position
assert exists(3, [2, 1, 3]) # sought item in last position
assert not exists(3, []) # list is empty
assert not exists(0, [2, 1, 3]) # sought item doesn't exist
A second variant returns the position of the item in the list, if it exists. If it doesn't, the <B>Algorithm</B> returns an impossible position, like -1. Here's the pseudo-code:
Here is the Python code:
def index(soughtItem, aList):
assert position(2, [2, 1, 3]) == 0 # sought item in first position
assert position(3, [2, 1, 3]) == 2 # sought item in last position
assert position(3, []) == -1 # list is empty
assert position(0, [2, 1, 3]) == -1 # sought item doesn't exist
The following complete VB program asks the user for a letter and searches it in an array.
dim searchItem as <B>String</B>
console.write("What are you searching for: ")
searchItem = console.readline()
For x = 0 to 10
Next
console.writeline(-1)
Try the code above searching for letter "w" and then for letter "z":
What are you searching for: w
Found item w at position 4
What are you searching for: z
-1
Consider the list of <B>String</B>s "Cat","Mouse","Frog","Lion","Panda","Llama","Bee", in this order.
How many comparisons would it take to find "Panda"?
5
And how many when searching for "Camel"?
It would take 7 to reach the conclusion the <B>String</B> is not in the list.
Make a trace <B>Table</B> for the code above, where codice_1 = "d".
For a list with formula_1 items, what is the maximum number of comparisons it would take to see if an item is there or not?
It would take formula_1 comparisons if the item is in the last position or not at all in the list. 
As the last question points out, a <B>Linear Search</B> may take as many comparisons as there are items in the list, so searching for a name among a list of several million names (e.g. the electoral register of a country) could take a very long time. 
If your list was put in ascending order by a sorting <B>Algorithm</B> then you can perform a <B>Binary Search</B>. This involves splitting the data into half at each comparison, thereby 'zooming in' more quickly into the part of the list where the item must be, if it exists in the list. This results in much better performance, as the side box shows (the Big-O notation is explained in Unit 4).
This only took 3 comparisons using <B>Binary Search</B>, it would have taken 7 using <B>Linear Search</B>. It gets even better when the list is large. For example, a 1,000,000,000 item list would only take a maximum of 30 comparisons using <B>Binary Search</B>! It's very useful to have sorted data.
Sorted data is also useful for <B>Linear Search</B>. How could a modified <B>Linear Search</B> <B>Algorithm</B> make fewer than 7 comparisons when searching Miles?
The modified <B>Linear Search</B> would know after 4 comparisons (against Ali, Bernie, Claire and Mohammed) that Miles is not in the sorted list, because Miles should have appeared before Mohammed.
For the list of 7 names shown above, can you think of a case where <B>Linear Search</B> is faster than <B>Binary Search</B>?
If we search for the first item in the list, Ali, <B>Binary Search</B> still takes 3 comparisons (against Mohammed, Bernie and Ali) but <B>Linear Search</B> only needs 1 comparison.
For <B>Linear Search</B> of a large list, the best case is if the sought item is in the first position. What is the best case for <B>Binary Search</B> of a large list?
<B>Binary Search</B> only requires 1 comparison If the sought item is in the middle of the list.
After each unsuccessful comparison, <B>Binary Search</B> reduces the search space by half. The sublist that is being searched can be represented by two <B>Integer</B>s, with the start and end positions of the sublist. The Python code is:
def index(soughtItem, sortedList):
assert index(3, [1, 2, 3]) == 2
assert index(1, [1, 2, 3]) == 0
assert index(1, []) == -1
assert index(0, [1, 2, 3]) == -1
<B>Bubble Sort</B> is a simple sorting <B>Algorithm</B> that works by repeatedly stepping through the list to be sorted, comparing each pair and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. The <B>Algorithm</B> gets its name from the way larger elements "bubble" to the top of the list. It is a very slow way of sorting data and rarely used in industry. There are much faster sorting <B>Algorithm</B>s out there such as <B>Insertion Sort</B> and <B>Quick Sort</B> which you will meet in A2.
Let us take the array of numbers "5 1 4 2 8", and sort the array from lowest number to greatest number using <B>Bubble Sort</B> <B>Algorithm</B>. In each step, elements written in bold are being compared.
First Pass:
( 5 1 4 2 8 ) formula_1 ( 1 5 4 2 8 ), Here, <B>Algorithm</B> compares the first two elements, and swaps them since 5 > 1
( 1 5 4 2 8 ) formula_1 ( 1 4 5 2 8 ), It then compares the second and third items and swaps them since 5 > 4 
( 1 4 5 2 8 ) formula_1 ( 1 4 2 5 8 ), Swap since 5 > 2 
( 1 4 2 5 8 ) formula_1 ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), <B>Algorithm</B> does not swap them.
The <B>Algorithm</B> has reached the end of the list of numbers and the largest number, 8, has bubbled to the top. It now starts again.
Second Pass:
( 1 4 2 5 8 ) formula_1 ( 1 4 2 5 8 ), no swap needed
( 1 4 2 5 8 ) formula_1 ( 1 2 4 5 8 ), Swap since 4 > 2 
( 1 2 4 5 8 ) formula_1 ( 1 2 4 5 8 ), no swap needed
( 1 2 4 5 8 ) formula_1 ( 1 2 4 5 8 ), no swap needed
Now, the array is already sorted, but our <B>Algorithm</B> does not know if it is completed. The <B>Algorithm</B> needs one whole pass without any swap to know it is sorted.
Third Pass:
Finally, the array is sorted, and the <B>Algorithm</B> can terminate.
The <B>Algorithm</B> can be expressed as:
codice_1
We will now look at an example in Visual Basic using an array of people's heights. The following data set is being passed:
Construct a trace <B>Table</B> for the above code:
What does the above code output?
1: 12
2: 54
3: 98
4: 99
Show the following lists after one pass of <B>Bubble Sort</B>:
Sort into alphabetical order:
Sort into alphabetical order:
Sort into numerical order:
Show the following after 2 passes
Sort into alphabetical order:
Sort into numerical order:
Let's look at a more complicated example, an array of structures, TopScores. The following data set is being passed:
Draw a trace <B>Table</B> to see if it works:
The output should be:
Unfortunately <B>Bubble Sort</B> is a very slow way of sorting data and very rarely used in industry. We'll now look at a much faster <B>Algorithm</B>, <B>Insertion Sort</B>.
<B>Insertion Sort</B> is a simple sorting <B>Algorithm</B>: a comparison sort in which the sorted array (or list) is built one entry at a time. It is much less efficient on large lists than more advanced <B>Algorithm</B>s such as quicksort, heapsort, or merge sort and you may cover these at university. However, <B>Insertion Sort</B> provides several advantages:
<B>Insertion Sort</B> requires the use of two arrays, one ordered, and one unordered. Each repetition of the <B>Algorithm</B> moves an item from the unordered list, into a sorted position in the ordered list, until there are no elements left in the unordered list.
Sorting is typically done in-place without needing extra memory. The resulting array after "k" iterations has the property where the first "k" + 1 entries are sorted. In each iteration the first remaining entry of the input is removed, inserted into the result at the correct position, thus extending the result:
becomes
with each element greater than "x" copied to the right as it is compared against "x".
The following <B>Table</B> shows the steps for sorting the sequence {5, 7, 0, 3, 4, 2, 6, 1}. For each iteration, the number of positions the inserted element has moved is shown in parentheses. Altogether this amounts to 17 steps.
5 7 0 3 4 2 6 1 (0)
5 7 0 3 4 2 6 1 (0)
0 5 7 3 4 2 6 1 (2)
0 3 5 7 4 2 6 1 (2)
0 3 4 5 7 2 6 1 (2)
0 2 3 4 5 7 6 1 (4)
0 2 3 4 5 6 7 1 (1)
0 1 2 3 4 5 6 7 (6)
' a procedure to sort an array of <B>Integer</B>s
<B>Insertion Sort</B> is a simple sorting <B>Algorithm</B>: a comparison sort in which the sorted array (or list) is built one entry at a time.
sort left hand side is underlined
Show how the insert sort would work on the following unordered array
sort left hand side is underlined
A tree is a special case of a graph, and therefore the graph traversal <B>Algorithm</B>s of the previous chapter also apply to trees.
A graph traversal can start at any node, but in the case of a tree the traversal always starts at the root node. Binary trees can be traversed in three additional ways. The following tree will be used as the recurring example.
Traversing a tree in breadth-first order means that after visiting a node X, all of X's children are visited, then all of X's 'grand-children' (i.e. the children's children), then all of X's 'great-grand-children', etc. In other words, the tree is traversed by sweeping through the breadth of a level before visiting the next level down, as shown in this animation:
The children of a node may be visited in any order, but remember the <B>Algorithm</B> uses a queue, so if a node X is enqueued (grey in the animation) before node Y, then X's children will be visited (black in the animation) before Y's children. For the example tree at the start of this chapter, two possible breadth-first traversals are F B G A D I C E H and F G B I D A H E C. In the second traversal, G is visited before B, so I is visited before A and D.
List two other possible breadth-first traversals of the same tree.
Since F, B and D each have two children, there are in total 2*2*2=8 possible breadth-first traversals:
The first and last traversals were already given above, so you could have listed any other two.
As the name implies, a depth-first traversal will go down one branch of the tree as far as possible, i.e. until it stops at a leaf, before trying any other branch. The various branches starting from the same parent may be explored in any order. For the example tree, two possible depth-first traversals are F B A D C E G I H and F G I H B D E C A. 
List two other possible depth-first traversals of the same tree.
Since F, B and D each have two children, there are in total 2*2*2=8 possible depth-first traversals:
The first and last traversals were already given above, so you could have listed any other two.
List "one" breadth-first and "one" depth-first traversal for this tree:
The possible depth-first traversals are
The possible breadth-first traversals are 
Binary trees are usually traversed from left to right, but right-to-left traversal is also possible and might appear in the exam questions. We will therefore make the direction always clear in the rest of this chapter.
If each node is visited "before" both of its subtrees, then it's called a "pre"-order traversal.
The <B>Algorithm</B> for left-to-right pre-order traversal is:
which can be implemented as follows, using the tree data structure defined in the previous unit:
Since the <B>Algorithm</B> completely determines the order in which nodes are visited, there is only one possible left-to-right pre-order traversal for each binary tree. For our example tree, which is a binary tree, it's F B A D C E G I H. 
Because a pre-order traversal always goes down one branch (left or right) before moving on to the other branch, a pre-order traversal is always one of the possible depth-first traversals.
If each node is visited "after" its subtrees, then it's a "post"-order traversal. The <B>Algorithm</B> for left-to-right post-order traversal is: 
which can be implemented as:
There is only one left-to-right post-order traversal for each binary tree. For our example tree, it's A C E D B H I G F.
If each node is visited "between" visiting its left and right subtrees, then it's an "in"-order traversal. The <B>Algorithm</B> for left-to-right in-order traversal is:
which can be implemented as:
There is only one left-to-right in-order traversal for each binary tree. For our example tree, it's A B C D E F G H I. Note the nodes are visited in ascending order. That's no coincidence.
In <B>Binary Search</B> trees like our example tree, the values in the left subtree are smaller than the root and the values in the right subtree are larger than the root, so a left-to-right in-order traversal visits the nodes in ascending order. 
Is the statement "an in-order traversal always visits the nodes in ascending order" true or false?
It is false. An in-order traversal only visits the nodes in ascending order if it's a left-to-right traversal "and" the tree is a <B>Binary Search</B> tree.
How would you change the <B>Algorithm</B> above to visit the nodes of a <B>Binary Search</B> tree in descending order ?
A right-to-left in-order traversal would produce the desired order:
In the exam, you may be given some traversal pseudo-code and a binary tree, and asked to list the nodes in the order the code will visit them.
The first thing is to look carefully at the code and check:
For example, the following code does a left-to-right traversal and the comments show where the visit of the root might take place.
sub Traversal(TreeNode)
end sub
Let's assume it's left-to-right traversal. Once you know, from the position of the node visit, if it's a pre-, in- or post-order traversal, you can annotate each node of the binary tree as follows:
Finally, draw a line going anticlockwise around the tree, connecting the marks. Follow the line and write down each node as you meet a mark: that will be the order in which the code will visit the nodes. Here are the three possible left-to-right traversals:
As you can see, following this tip you obtain the same answers as in the sections above.
If the traversal is right to left, you have to draw a clockwise line and swap the position of the pre-order or post-order mark.
If the tree is a <B>Binary Search</B> tree and you're asked for an in-order traversal, you should have visited the nodes in ascending order (for left-to-right traversal) or descending order (for right-to-left traversal). If it's not a <B>Binary Search</B> tree, the in-order traversal won't visit the nodes in neither ascending nor descending order, but a pre-order or post-order traversal might, it will all depend where the nodes are placed in the tree.
Although in this chapter we have always made explicit whether it was a left-to-right or right-to-left traversal for clarity, the typical usage of the terms pre-order, in-order and post-order implies a left-to-right traversal, if nothing to the contrary is said.
For the following binary tree perform a pre-order, an in-order and a post-order traversal.
When nothing else is said, a left-to-right traversal is assumed.
What traversal does the following code describe:
sub Traverse(TreeNode)
end sub
An in-order traversal, because the node visit is in the centre of the code and the left subtree is traversed before the right subtree.
What does the following code do? 
It does a right-to-left post-order traversal, because it first visits the right subtree, then the left subtree and finally the node.
Using the following binary tree:
what would be the outputs for right-to-left: 
A large part of using modern computers involves sending pictures and films to each other, along with using a graphical user interface. All of this involves computers saving and processing images. This section will cover the two main image types: vector and bitmap, along with some compression techniques.
Using the diagram above we are going to work out how many pixels are required to display a single frame on a VGA screen.
Checking the resolution:
The smallest possible addressable area defined by a solid colour, represented as binary, in an image.
The amount of pixels an image contains per inch/cm
the number of pixels per row by the number of pixels per column
100 * 70 = 7000 pixels
30 * 40 = 1200 pixels
1920 x 1080 = 2073600 pixels
700 / 35 = 20 pixels
It will require a lot of space to store it. Meaning you'll quickly run out of memory, or it'll take a long time to transmit images across the internet or other data route.
It seems pretty obvious that the higher the colour depth, the closer the picture will look to reality. Why then don't we just ramp up the colour depth on every image that we make? The answer should be obvious, for a fixed resolution, the higher the colour depth, the larger the file size.
All the images above are of the same resolution:
If the first image uses 1 bit to store the colour for each pixel, then the image size would be:
For the second image uses 2 bits to store the colour for each pixel, then the image size would be:
 The number of bits used to represent the colour of a single pixel
Vector graphics are made up of <B>Object</B>s and their properties. An <B>Object</B> is a mathematical or geometrically defined construct such as a rectangle, line or circle.
Each of these <B>Object</B>s has properties to tell you the size, colour, position etc. Take a look at the next example to see how drawing lists are built from <B>Object</B>s and properties.
There are several vector graphic formats out there, but an easy one to get started with is Scalable Vector Graphics (SVGs). SVGs are very easy to create and are supported by all modern major web browsers. To create an SVG, you need to add the tags codice_1 at the beginning and codice_2 at the end. Copy the following into a text file and save it as codice_3
Once you have saved this, drag it into a browser window and you should see some shapes. SVGs are very powerful and you can attach code to their structure, making them interactive. If you want to learn more about how make SVGs take a look at w3schools
a set of commands used to define a vector image
images defined using mathematics and geometry such as points, lines, curves, and shapes or polygon(s). Allowing for scalability
What would the following drawing list produce:
rect and line
<B>Algorithm</B>s for Graph traversal and Tree traversal can can be found in the following section ../Fundamentals of <B>Algorithm</B>s/
− 
− 
</NOINCLUDE>
− 
− 
An array is an indexed set of related elements.
− 
When we want to store several pieces of data of the same type, instead of using many variables we can instead use an array. You can think of an array as a list of data items or elements each with a number or index to enable you to refer to each item. 
− 
− 
− 
In most languages, an array must be declared. This sets up how many elements there are in the array and what data type the elements are. This will reserve space in memory for the array before it has been filled with data. Python uses lists in place of arrays. Lists are more flexible and do not require initialisation but it can still be useful to perform this step in order to make your intentions and your code easier to understand.
− 
− 
This can also be done in a single line of code, initialising and populating the array in one step.
− 
− 
− 
− 
We can access a single element of an array by using the index. This is written in parentheses or brackets after the array name. To access Eve from our names array we would use names[4].
− 
− 
Some programming languages start numbering arrays from 1, others from 0. In our examples above, it does not matter which number relates to which person and so 0 is used as a starting point but if we were storing months, many people might prefer January to be stored in months[1] rather than months[0].
− 
XKCD on Array indicies
− 
− 
− 
Declare an array listing 5 animals in a zoo (aardvark, bear, cuckoo, deer, elephant) in alphabetical order:
− 
− 
− 
− 
− 
Write code to output the first and last animal
− 
− 
− 
− 
− 
− 
Someone has accidentally eaten the cuckoo, let the user add a new third animal and print them all out:
− 
− 
Insert new third animal: Crocodile
− 
1: Aardvark 
− 
2: Bear 
− 
3: Crocodile
− 
4: Deer 
− 
5: Elephant
− 
− 
− 
− 
− 
− 
− 
− 
An array is an indexed set of elements. If each element is itself an array then we have a two dimensional (2d) array. 
− 
If we think of an array as a list, we can think of a 2d array as a grid or matrix.
− 
Most major programming languages allow you to use two-dimensional arrays. They work in much the same way as a one-dimensional array but allow you to specify a column index "and" a row index.
− 
We can create the two-dimensional array shown above and assign values by doing the following:
− 
− 
− 
− 
Two-dimensional arrays are very useful and a good place to get started is to create your own version of the game Battleships with a 4 cell by 4 cell grid. See if you can win, break it or better still, improve it!
− 
We are modelling the following board using the two dimensional board variable:
− 
− 
− 
− 
− 
Declare an array to make a small checkers board of type char, 3 squares by 3 squares
− 
− 
− 
− 
create a chequered pattern using codice_1 for black and codice_2 for white
− 
− 
− 
A much smarter way is to use a loop, this will allow for you to quickly create an board of any size you wish. There is a question coming up that will want you to build this! Note that in python, we are forced to start the index at 0. Also python uses the same datatype for <B>Character</B>s and <B>String</B>s.
− 
− 
Write a sub routine to codice_3 this board (HINT: you need loops), that takes checkBoard as a parameter
− 
− 
− 
− 
Declare a chessBoard (8*8 squares), programmatically colour it in with codice_1 for black and codice_2. You might want to look for a pattern in the colour assignments for the checker board above and make friends with the MOD function
− 
You might also go a little loopy trying to answer this question
− 
− 
− 
If you've done this you might want to get the program to print some massive boards, whatever floats your boat.
− 
− 
Using the following two-dimensional array, grid(4,4):
− 
− 
− 
− 
− 
− 
− 
− 
− 
A "data structure" is the general term used for organised collections of data. Data structures contrast with atomic (or "primitive") data that represents only as single value.
Everyday examples of data structures are lists of items (such as shopping lists or to-do lists), a pile of marking, or a friend's contact details (name, address, phone number, email, etc.). Data structures may contain other data structures: for example, a to-do list may be a data structure that is a list of items, while each to-do item is itself a structure of task title, notes, due date, and so on.
Data structures are useful in programming as they can bundle related data items together, so they can be stored and manipulated together. Programs can operate on the data structure as a whole (such as copying a list from one place to another) as well as operating on elements within the structure.
Data structures also differ on the operations they support and make easy. When <B>Design</B>ing programs, it is often better to start by choosing and <B>Design</B>ing the appropriate data structures to store the data required for the program; the <B>Algorithm</B>s that manipulate those data structures are often obvious and largely dictated by the data structures.
A "dictionary" is a general-purpose data structure for storing a group of <B>Object</B>s. A dictionary has a set of "keys" and each key has a single associated "value". When presented with a key, the dictionary will return the associated value. 
For example, the results of a <B>Class</B>room test could be represented as a dictionary with pupil's names as keys and their scores as the values:
results = {'Detra' : 17,
Instead of using the numerical index of the data, we can use the dictionary names to return values:
A dictionary is also called a "hash", a "map", a "hashmap" in different programming languages (and an codice_1 in JavaScript). They're all the same thing: a key-value store.
The concept of a "key-value store" is widely used in various computing systems, such as caches and high-performance <B>Database</B>s. 
Typically, the keys in a dictionary must be simple types (such as <B>Integer</B>s or <B>String</B>s) while the values can be of any type. Different languages enforce different type restrictions on keys and values in a dictionary. Dictionaries are often implemented as hash <B>Table</B>s.
Keys in a dictionary must be unique; an attempt to create a duplicate key will typically overwrite the existing value for that key.
Note that there is a difference (which may be important) between a key not existing in a dictionary, and the key existing but with its corresponding value being null.
Dictionaries typically support several operations:
Most programming languages with dictionaries will also support iteration over the keys or values in a dictionary. Note that items in a dictionary are unordered, so loops over dictionaries will return items in an arbitrary order.
Given a dictionary codice_2 containing the <B>Class</B> result above, these are examples of these operations:
Early Arcade machines stored your high scores, but as soon as you turned the machine off then all the scores were wiped! Nowadays it is unthinkable to have a game where you don't save scores, trophies, achievements or your progress. Writing to files allows people to do this alongside all the other essential file writing such as saving text documents, music and images.
Another use of files is reading data into your program: think about when you load a saved game, or open a spreadsheet. Both of these things involve reading a file.
Files might have lots of strange like .doc .txt .html .css .odt. In fact there are thousands of them and they tell the Operating System what program to use to read the file. However, if you open each file with a text editor such as notepad++ you might be able to see underlying structure of the file. Some of them will be plain text and some of them gobbledygook. We are going to learn how to read and write data directly to these files.
When using text files, you read or write one line of text at a time as a <B>String</B>
A common function needed in programs is to load data: saved games, text documents, spreadsheets. 
The following programs show how to open and read from a text (.txt) file
To do this you'll need the codice_1, a collection of functions used to read data from files into our program. To get this program to work you are going to need a file called codice_2 and put it into a location you know the full address of, for example the root of the codice_3 drive:
'you might need this so that you can use StreamReader
Imports System.IO
Module Module1
End Module
The above code would produce the following:
name of file to load: C:/belloc.txt
contents of file:
To sleep and smell the incense of the tar,
To wake and watch Italian dawns aglow
And underneath the branch a single star,
Good Lord, how little wealthy people know.
To get this program to work you are going to need a file called codice_2 and put it into a location you know the full address of, for example the root of the codice_3 drive. Alternatively placing the text file in the same directory as your python program means you only need to specify the file name:
filename = input("name of file to load: ")
textFile = open(filename,"r")
content = textFile.read()
textFile.close()
print("Contents of file:")
print(content)
The above code would produce the following:
Name of file to load: C:/belloc.txt
Contents of file:
To sleep and smell the incense of the tar,
To wake and watch Italian dawns aglow
And underneath the branch a single star,
Good Lord, how little wealthy people know.
As well as reading files it's important that we can write to files.
The following programs show how to open and write to a text (.txt) file. Note that doing this will overwrite existing files of the same name without warning!
This time we are using the codice_6:
'you might need this so that you can use StreamReader
Imports System.IO
Module Module1
End Module
filename = "C:/test1.txt" #this is the location, file name and extension of what you are writing to
textToFile = input()
textFile = open(filename,"w") #opens the file for write "w" access
textFile.write(textToFile) #writes the line to the file
textFile.close()
write code to save a shopping list typed in by a user (they finish typing the list by entering a blank line) to a file called specified by the user
VB.NET answer
Imports System.IO
Dim filewriter As StreamWriter
Dim filename As <B>String</B>
Dim texttofile As <B>String</B>
Dim line As <B>String</B>
Console.Writeline("Please insert your shopping list:")
While line <> ""
End While
Console.Writeline("Where would you like to save it (give full location):")
filename = Console.Readline()
filewriter = New StreamWriter(filename)
filewriter.WriteLine(texttofile) 'write the line to the file
filewriter.Close()
Python 3 answer
textToFile = ""
line = input("Please insert your shopping list:\n")
while line != "":
filename = input("Where would you like to save it (give full location):\n")
textFile = open(filename,"w")
textFile.write(textToFile)
textFile.close()
What does the extension of a file change about a file?
It only changes how a program or an Operating System handles the file, it doesn't change anything inside the file
A special sort of file is a Comma Separated Value (.csv) file. This file is used for store spreadsheet information with each comma denoting a new cell, and each new line a new row. For example in the code below there are three columns and three rows. If you need to include a comma in a cell you have to encase the cell text in speech marks
This would produce:
You might notice that .csv files are very simple and don't store any information on datatypes or style. So if you were to save your spreadsheet in Microsoft Excel as a .csv file you would lose all this information. In general .csv files are a small and simple way to transfer data.
write a CSV file to hold the following <B>Table</B> structure
When stored as (.csv), each line of a file is a data <B>Record</B>. Each <B>Record</B> consists of one or more <B>Field</B>s, separated by commas. You should be able to move data between a 2d array and a csv file. The following code gives you an example of how to do this.
Creating a .csv file from a 2d array. 
This example uses codice_7. Join is a <B>Method</B> of a <B>String</B> in python. It takes an array of <B>String</B>s and joins them into a single <B>String</B> using (in this case) a comma as glue. Note that if your array contains any non-<B>String</B> data types, this will not work and you will need to convert the elements of your array into <B>String</B>s first.
mainArray = "Name","Age","Favourite Fruit"],
outputArray = [] #empty array. Each element will contain one line of csv data
for inner in mainArray:
outFile = open("C:\<B>Database</B>.csv",mode="w")
outFile.writelines(outputArray) #outputArray written in one go to C:\<B>Database</B>.csv
outFile.close()
Reading a .csv file into a 2d array
Note that readlines() reads a text file into a one dimensional array of text. Each line from the original text file becomes a unique element in that array and includes the \n <B>Character</B> from the end of each line.
inFile = open("<B>Database</B>.csv",mode="r")
csvLines = inFile.readlines() #csv file read into a 1d array
inFile.close()
mainArray = [] #empty array defined 
for line in csvLines:
Write a program that asks you for the names, email and mobile phone number of your friends then writes them into a csv file.
Python 3 answer
looping = ""
outputArray = []
while looping != "n":
op = open("friends.csv",mode="w")
op.writelines(outputArray)
op.close()
Write a program that reads the .csv file from the question above into a 2d array.
Python 3 answer
inFile = open("friends.csv",mode="r")
csvLines = inFile.readlines()
inFile.close()
friends = []
for line in csvLines:
Write a program which extends the tasks above allowing you to maintain a friends list. You could include features such as searching for, adding, editing and deleting friends.
A lot of modern programs and data formats such as LibreOffice and .odf use XML to store data, then compress the data to make the files smaller. XML is very similar to HMTL and SVG in that is uses tags, but the great thing about it is that you define what each tag is. Take a look at this example:
<?xml version="1.0"?>
<school>
</school>
XML has become increasingly important, especially with regards to the internet, if you want to learn more you can check out the tutorial at w3schools.
However there are people who hate XML: the files it makes are generally quite large, having to store all that tag information and when the internet is involved speed is often of the essence. A leaner way of sending data from one place to another is JSON which you can also find out about at w3schools.
When there are two vertices connected by an edge, the two vertices are called neighbours. The degree of a vertex is how many other vertices it is connected to (or how many neighbours it has). Graphs are used to <B>Record</B> relationships between things. Popular uses of graphs are mapping, social <B>Network</B>s, chemical compounds and electrical circuits. We are going to focus on mapping where graphs will be used to model some East Anglian towns and find the shortest distance between two locations, for example in your direction finding GPS application on your phone. Below is an undirected graph (it has no arrows) showing a simplified map of East Anglian Towns: 
In the graph above we have 7 vertices and 11 edges. Dunwich is neighbour with Blaxhall and Harwich. Clacton has 3 edges directly connecting it to 3 other vertices, it therefore has a degree of 3.
Name all the neighbours of Tiptree:
What is the degree of Tiptree:
4
What is the degree of Dunwich:
2
How many edges and vertices on the following graph:
A Labelled Graph is almost the same as the graph above, but with something (usually numerical values) attached to the edges. This is useful in mapping applications when you want to find the shortest distance or time between vertices.
What is the shortest distance between Harwich and Feering?
What is the shortest distance between Blaxhall and Clacton?
What is the shortest distance between Maldon and Dunwich?
You might also have: 
Picking best routes is a very complicated task
Directed graphs are much like normal graphs, but unsurprisingly they have directions. You should treat them a little like a road system in a town or city. Some roads will be one-way street and others bi-directional. How does this affect our East Anglian Transport system:
What is the shortest distance from Maldon to Dunwich?
There is now only one solution to this problem.
What is the shortest distance from Harwich to Clacton?
What is the shortest distance from Dunwich to Maldon?
There is no direct route in that direction
Undirected graphs don't include arrows, there are no one way streets. Undirected graphs can be weighted and unweighted:
Undirected graphs allow you to travel both directions down each edge, it works in the same way as a directed graph with two edges between each vertices. See Blaxhall and Dunwich above.
Before we can define a simple graph we need to know what loop and multi-edge are:
In a simple graph with n vertices every vertex has a degree that is less than n.
Give the definition of a simple graph
It is an undirected graph that has no loops and no more than one edge between any two different vertices.
Which of the following graphs are simple graphs?
So far we have seen how to draw graphs using edges and vertices. If we want to store them as digital data we have to think of a computer friendly way as computers aren't very good at reading hand-drawn diagrams. We are going to look at two <B>Method</B>s: the adjacency matrix and the <B>Adjacency List</B>.
An adjacency matrix <B>Record</B>s the relationship between every vertex to all other vertices. It <B>Record</B>s both when there is an edge between two vertices and when there isn't an edge:
Pros
Cons
An <B>Adjacency List</B> <B>Record</B>s the relationship between every vertex to all relevant vertices. It <B>Record</B>s only when there is an edge between two vertices.
Pros
Cons
Draw an <B>Adjacency List</B> and an Adjacency Matrix for the following graph:
Draw an <B>Adjacency List</B> and an Adjacency Matrix for the following graph:
Draw an <B>Adjacency List</B> and an Adjacency Matrix for the following graph:
Draw an <B>Adjacency List</B> and an Adjacency Matrix for the following graph:
Draw a graph for the following <B>Adjacency List</B>:
Draw a graph for the following <B>Adjacency List</B>:
Draw a graph for the following Adjacency Matrix:
Draw a graph for the following Adjacency Matrix
When might you use an <B>Adjacency List</B> instead of an adjacency matrix?
An <B>Adjacency List</B> takes up less space for graphs with smaller number of connections.
When might you use an adjacency matrix instead of an <B>Adjacency List</B>?
An adjacency matrix is preferable when the graph has lots of connections.
Hashing involves applying a hashing <B>Algorithm</B> to a data item, known as the hashing key, to create a hash value. Hashing <B>Algorithm</B>s take a large range of values (such as all possible <B>String</B>s or all possible files) and map them onto a smaller set of values (such as a 128 bit number).
Hashing has two main applications. Hashed values can be used to speed data retrieval, and can be used to check the validity of data. 
When we want to retrieve one <B>Record</B> from many in a file, searching the file for the required <B>Record</B> takes time that varies with the number of <B>Record</B>s. If we can generate a hash for the <B>Record</B>'s key, we can use that hash value as the "address" of the <B>Record</B> and move directly to it; this takes the same time regardless of the number of <B>Record</B>s in the file.
The validity of data can be checked with a hash. This can be used to check both that a file transferred correctly, and that a file has not been deliberately manipulated by someone between me uploading it somewhere and you downloading it. If I post both the file and the hash value I generated from it, you can generate a hash value from the file you received and compare the hash values. If the hashing <B>Algorithm</B> is a good "cryptographic hash", it's extremely unlikely that accident or malice would have modified the file even a little yet it would still yield the same hash value.
To build a set of hashing values we use a hashing <B>Algorithm</B> to create a hashing <B>Table</B>. Take a look at the diagram below, by applying a hashing <B>Algorithm</B> each data item (or hashing key) has a hashing value.
Now if we decided to search for:
We could search the hashing <B>Table</B> for hashing value 3, and if we found it we would know that Sam Doe does exist.
But what about searching for an item that doesn't exist? Take a look at this example:
We can now search the hashing <B>Table</B> and can see that there is no entry for Hash Value=9, therefore that data doesn't exist and we didn't have to search through all the data to prove this.
A hash is supposed to be repea<B>Table</B>, that means each time we apply it to the same data we should get the same hash value out. This requires that we create a hashing <B>Algorithm</B> or function:
Take a look at this (if you've forgotten how MOD works, go check it out!)
If we apply this to the following list of hash keys:
Once we have calculated the Hash Values we can start to build the Hashing <B>Table</B>, notice because we are using MOD 6 we have 6 different possible Hashing Values:
Now if you were asked whether the hashing key codice_1 was a member of the data you have been given you would do the following:
 23448 MOD 6 = 0
Create a hashing <B>Table</B> for the following hashing keys and hashing <B>Algorithm</B>:
Create a hashing <B>Table</B> for the following hashing keys and hashing <B>Algorithm</B>:
Can you find the hashing key 3245 stored in the following hashing <B>Table</B>, built on the hashing <B>Algorithm</B>: ((HashKey + 67)) MOD 8:
No. As (3245 + 67) MOD 8 = 0, and there is no data stored against that key in the Hashing <B>Table</B>
Describe the following:
The hashing <B>Algorithm</B> is the <B>Algorithm</B> which performs a function to convert the hash key to the hash value.
the hash value is what is produced as a result of the hash key being passed into the hashing <B>Algorithm</B>.
A hashing <B>Table</B> is made up of all of the ordered hash values and the information corresponding to it.
Hash values are used to check if something exists, as the data can be re hashed and then the hash <B>Table</B> can be queried, this is more useful than searching for the text as computers are quicker at searching for numbers rather than text.
You might have already noticed this, what happens when we run out of unique hashing values, when two hashing keys give the same hashing value? Take a look at the final row of the following example, built on the hashing <B>Algorithm</B> of HashKey MOD 6:
When two hash keys result in the same hash value this is called a Collision. This causes a problem as we can no longer quickly find whether data is in our hashing <B>Table</B> or not, as another piece of data might have the same hashing value. There are several ways of solving this, we are going to look at two:
When two hash keys create the same hash value we place the colliding keys in next free hash value.
When two hash keys create the same hash value we place the colliding keys in the same location, by utilising a linked list to link together all the values that match that hashing value.
MD5
Even a small change in the message will (with overwhelming probability) result in a mostly different hash:
As you should know from studying <B>Database</B>s we often have to search for data in <B>Table</B>s using the <B>Primary Key</B>. That is the unique value that is stored about each <B>Record</B>. This is normally a number, but if we didn't have a numeric <B>Primary Key</B> we still need to be able to search through the data. For example the <B>Table</B> below shows details about some students in a <B>Class</B>, and we are going to search on the name of each student:
Searching on the name of each student could take some time as we might be searching for:
This might take checking thousands of different <B>Record</B>s and 17 <B>Character</B>s before we were sure that we found them. If the data was even larger it could take much longer than that. What is needed is a quick way to apply an index key to each data item so we can quickly search through the data. Attaching an index key to each data item (or hashing key) is called hashing and the index value is called the hashing value. This hashing value isn't random, but is dependent on the hashing key being hashed, so that each time you apply the same hashing <B>Algorithm</B> to the same data, you'll get the same hash value.
For example, if we hashed each name (or hash key) and we got that Anthony Tarkovsky's hash value was 12, we would only need to check the hashing <B>Table</B> to see if 12 existed instead of searching through the name <B>Field</B> for all 17 <B>Character</B>s.
As you can't work out the original value from the hashed value, Hashing is also used to store passwords. Companies with poor security keep passwords in text <B>Field</B>s, which can make it easier for passwords to be stolen. A more secure way to store passwords is the following: Much smarter companies do the following:
Now when a customer returns to the site and enters their password the system does the following:
This has the benefit of dealing with the following situation:
Hashing <B>Algorithm</B>s should do the following-
A queue is a first-in first-out (FIFO) abstract data type that is heavily used in computing. Uses for queues involve anything where you want things to happen in the order that they were called, but where the computer can't keep up to speed. For example:
There are several different types of queues such as the ones described below: 
In this queue form, elements are able to join the queue at one end and can exit from the queue at the other end. First In First Out (FIFO).
A real life example of this would be queuing to pay at the supermarket. The first person into the queue is the first person to be served. And if you join the queue last you are going to be served last (no pushing!). However, there is one difference, in a supermarket queue once the first person has been served the rest of the queue shuffles forward, making the previously second person now first, this is possible in a computer but very costly in terms of processing. The linear queue you are about to see 'crawls' through memory, devouring everything it comes across.
The most basic implementation of a linear queue would work its way through its allotted memory, without reusing memory. The front and end pointers can only move forwards and sooner or later would reach the end of the allotted memory - at this point, no more items could be added to the queue. Take a look at this example and the values of the two pointers storing the front of the queue (FrontPtr) and the next free memory location (NextFree).
A better implementation would reuse memory by shifting each item one to the left, each time an item is removed from the front. However, if there are many items in the queue this could become very slow. See below (note that we no longer need a front pointer as item 1 is always the front):
However:
Unlike linear queues Circular queues allow for memory to be re-used:
Generally, a circular buffer requires three pointers:
The following example shows a partially-full fixed length buffer and how it handles additions and deletions from a queue. Take particular care to note the pointers. 
Circular queues are very common in computer science and they are used to store things, they have the following benefits 
and drawbacks:
This is based on the order of priority of the elements in the queue. In other words, each element of this type of queue has different level of priority attached to it; e.g., high priority or low priority.
A real world example of this would be an Accident and Emergency Department waiting room, someone who had fallen over, would probably be low priority compared with someone who had cut their head open, and as such even if the head injury patient came in later they would probably jump the queue.
In a computer we use priority queues to handle the execution of processes. Each process will have a priority attached to it, with the more important processes jumping ahead of the less important for the processor's attention when they require it. For example:
There are several <B>Method</B>s we can use to handle processor <B>Scheduling</B>, each have their own benefits and drawbacks:
For what would be the value of the pointers when Monkey and Snake are added, the first item removed and then Bear added to the following queue:
If it were a circular queue?
This would break, as there is no more space left in the queue!
A queue is a first-in first-out (FIFO) abstract data type that is heavily used in computing. Uses for queues involve anything where you want things to happen in the order that they were called, but where the computer can't keep up to speed. For example:
There are several different types of queues such as the ones described below: 
In this queue form, elements are able to join the queue at one end and can exit from the queue at the other end. First In First Out (FIFO).
A real life example of this would be queuing to pay at the supermarket. The first person into the queue is the first person to be served. And if you join the queue last you are going to be served last (no pushing!). However, there is one difference, in a supermarket queue once the first person has been served the rest of the queue shuffles forward, making the previously second person now first, this is possible in a computer but very costly in terms of processing. The linear queue you are about to see 'crawls' through memory, devouring everything it comes across.
A Linear queue is constantly working its way through memory, it does not re-use memory. As a result if a large number of items are being added and removed from the list this means the lists will grow very large without containing much data. It is not a very efficient solution and will use up large amounts of memory. Take a look at this example and the values of the two pointers storing the front of the queue (FrontPtr) and the next free memory location (NextFree).
However:
Unlike linear queues Circular queues allow for memory to be re-used:
Generally, a circular buffer requires three pointers:
The following example shows a partially-full fixed length buffer and how it handles additions and deletions from a queue. Take particular care to note the pointers. 
Circular queues are very common in computer science and they are used to store things, they have the following benefits 
and drawbacks:
This is based on the order of priority of the elements in the queue. In other words, each element of this type of queue has different level of priority attached to it; e.g., high priority or low priority.
A real world example of this would be an Accident and Emergency Department waiting room, someone who had fallen over, would probably be low priority compared with someone who had cut their head open, and as such even if the head injury patient came in later they would probably jump the queue.
In a computer we use priority queues to handle the execution of processes. Each process will have a priority attached to it, with the more important processes jumping ahead of the less important for the processor's attention when they require it. For example:
There are several <B>Method</B>s we can use to handle processor <B>Scheduling</B>, each have their own benefits and drawbacks:
For what would be the value of the pointers when Monkey and Snake are added, the first item removed and then Bear added to the following queue:
If it were a circular queue?
This would break, as there is no more space left in the queue!
A stack is an ADT that might involve a dynamic or static implementation. A stack is a last-in-first-out (LIFO) or first-in-last-out (FILO) ADT. Implementations should include two operations, pushing and popping, and a pointer to the top of the stack.
A real life example is a stack of books you might have on your desk:
In this example we keep adding (pushing) books to the stack. If we want to get at the bottom book about Cars, we must first remove (pop) all the books above it. Hence First In Last Out (FILO)
Let's take a look at a computer implementation of a stack:
Stacks have several uses:
Draw the stack after each of the following commands, starting with an empty stack. What does the stack achieve:
This set of instructions used the stack to input data in order and then output it in reverse order
Give the set of instructions required to get from State 1 to State 2 as shown below:
Dim myStack(10) as <B>String</B>
Dim ToS as <B>Integer</B> = 0 'this is our pointer
Dim item as <B>String</B>
While item <> “#”
End While
For x = ToS to 0 step -1
Next
console.readline()
Connected means that every node is connected to at least one other node.
Undirected means there is no direction associated with an edge, i.e. lines are used, not arrows.
A cycle is a circuit (a succession of edges that start and end at the same vertex) in which all the edges are different and all the vertices visited are different (apart from the start and end vertex). 
A rooted tree is a tree in which one vertex has been <B>Design</B>ed as the root and every edge is directed away from the root.
For the following tree note the root, leaves and the left sub tree
To work out the following you begin at the root of the tree, if the second input is higher than the root it goes to the right of the root, whereas if it is lower than the root it goes to the left. the third input is then used, if it is higher than the root then it gets passed to the right, if there is already a input on this segment of the tree the input is compared with the input that is in there, if it is higher than the input it is passed to the right and if it is lower it is passed to the left, this process continues until all inputs have been dealt with and the tree is complete.
Create a binary tree for the following data input:
Create a binary tree for the following major city input:
Create a binary tree for the following list of animals:
A "vector", in computing, is generally a one-dimensional array, typically storing numbers. Vectors typically have fixed sizes, unlike lists and queues. 
The vector data structure can be used to represent the mathematical vector used in linear algebra. See related pages for mathematical vector operations. Vectors are often used in computing in computer graphics and simulating physical systems.
Vectors are also used in natural language processing in computing, as a compact way to represent documents as counts of occurrences of words. For instance, the two sentences "It was the best of times, it was the worst of times" and "It was the age of wisdom, it was the age of foolishness" could be represented as two vectors:
<B>Database</B>s will probably store data about a variety of things. For example, if we look at the <B>Table</B>s required for an online store:
These <B>Table</B>s could sit on their own, but when we start to describe each of them we notice that they are related to each other. For example:
This describes the Receipt <B>Record</B>, and looking at its structure we see that the <B>Primary Key</B>s from other <B>Table</B>s are included in it.
In other words we could say:
We can then draw this diagram like so:
To link <B>Table</B>s together and allow for us to query a <B>Database</B> we use relationships. There are three types of relationship that you need to know. Each is shown below using 'crows foot notation' which is one of many ways to describe these relationships:
An animal has one genome
A genome describes only one animal
A student has many <B>Class</B>es
A <B>Class</B> has many students
A league has many teams
A team is only in one league
 
vehicle ---< wheel
Father >--< Child (unless we are talking about biological fathers: Father--<Child )
politician ---- nose
Cat >---< Owner (even though an Owner may own more than one cat, a cat might have more than one owner)
car --- driver (a car can only be driven by one driver, a driver can only drive one car at one time)
wheel --- unicycle
House >--- Postcode (a house is assign one postcode, but that same postcode might be assigned to many houses)
In this section the fundamentals of programming are revealed.
Programming languages provide a basic set of operators to calculate simple arithmetic.
Let's look at a short example of arithmetic operations before we jump into the operators themselves.
In this example we will also be using some basic variables. In VB.NET the Dim operator creates the variable, whilst in Python you can simply assign the value to the variable.
First, we set the total codice_1 to 3142.51.
The * operator calculates multiplication, so line 4 is equivalent to multiplying 0.3 and Sales together. Sales is 3142.51, so our result should be the product of 0.3 and 3142.51, and stored in codice_2.
With the exception of addition and subtraction, the symbols used are different to the ones used in real life. This is simply because the other symbols are not available on a standard keyboard (try and find ÷ ≠ m² on yours!) or the symbol is in the alphabet and can be used for naming a variable (x).
This adds two numbers together, and is denoted by the "+" symbol. If <B>String</B>s are involved it may also do <B>String</B> concatenation, that means sticking the two <B>String</B>s together. Examples:
There is a second addition operator, "+=". It increments the variable on the left of the += by the amount indicated on the right. Examples:
It also works with <B>String</B>s as a concatenation operator. Examples:
This subtracts two numbers, and is denoted by the "-" symbol. Examples:
This multiplies two numbers, and is denoted by the "*" symbol. Examples:
There are more types of division than the one denoted by the "/" symbol. There is also <B>Integer</B> division and remainder division.
This is the most commonly used form of division and is denoted by the "/" operator. Examples:
This divides two numbers, and gives the result without the remainder if the quotient is a decimal. Examples:
This divides two numbers, and gives the result's remainder if the quotient is a decimal. This is denoted by the operator "Mod" in VB.NET and "mod" in Python. Examples:
This is raising a number to a power, i.e. formula_1 is 49 . For example formula_1 is:
This results in the number 49 being assigned to the variable x. It can also be used to calculate the square root of a number. The square root of a number is the number raised to the power of 0.5.
Note: It is necessary to ensure that the variables be correctly declared to get the desired results. The following example works, but will produce the wrong result. This is because the <B>Integer</B> <B>Class</B> does not allow decimal places (just like mathematical <B>Integer</B>s.)
Since x is declared as an <B>Integer</B> type, the value square root, a real number, is stored incorrectly.
Any nth root of number can be calculated by raising the number to the power of formula_3:
This is because formula_4.
You have probably learnt about the order of operations in maths. BODMAS also applies to computer calculations. This means that when calculating a sum, the program will calculate:
For example:
console.writeline( (3+4)/7 )
console.writeline( 3+4/7 )
console.writeline( 3+4/7-1 )
If in doubt use the brackets!
You might have already covered a lot of <B>Boolean</B> logic in Unit 2. <B>Boolean</B> logic is essential for anyone wanting to program. For example you will end a game if it is codice_1 that the time is up.
if timeup = true then
end if
We might want to use more complex <B>Boolean</B> logic, for example if the time is 16:00 or before 9:00, it is the holiday or it is the weekend, then you don't have to go to school:
dim holiday, weekend as <B>Boolean</B>
If now > 16 OR now < 9 OR holiday OR weekend Then
Else
End If
Notice here how we didn't say, codice_2, we just said codice_3, if something is true, then comparing it to true will also return true (phew!), so there really is no need check and see. Programming languages allow you to compare <B>Boolean</B> values using a variety <B>Boolean</B> operators that you probably know and love:
If you have been writing a lot of truth <B>Table</B>s (you have Wittgenstein to blame), get VB.NET to do if for you!
console.writeline("A|B||A.B|A+B|AxB")'write the heading
for A = 0 to 1
next
for A = 0 to 1
next
You need to be familiar with several programming routines that come built into most common programming languages. These routines are very useful and should save you a lot of effort in writing code to perform common tasks. You might be asked to use them in the exam so learn them!
You'll have to be familiar with several 
The round function is used to round numbers to a limited number of decimal places using the codice_1 function
The truncate function returns the <B>Integer</B> part of a number, regardless of the decimal places.
This is particularly useful when you are trying to perform DIV in modular arithmetic.
An essential part of most games is the ability to use random numbers. These might be used to randomly place gold coins on a map, or to calculate whether you hit a target with a rifle at some distance.
Dim rndGen As New Random()
Dim randomNumber As <B>Integer</B>
randomNumber = rndGen.Next()
The above code will give you a random number between 1 and 2,147,483,647. You might well require a number that is a little smaller. To get a random number between two set numbers, in this case 5 and 10 you can use the following:
randomNumber = rndGen.Next(5,10)
So how exactly can we use this? Take a look at the following game:
Dim rndGen As New Random()
Dim randomNumber As <B>Integer</B>
Dim guess as <B>Integer</B>
randomNumber = rndGen.Next(1,100)
console.writeline("Please guess the random number between 1 and 100")
Do 
Loop While guess <> randomNumber
console.writeline("Well done, you took x guesses to find it!")
Adjust the code above to tell the user how many guesses they took to find the random number. HINT: you'll need a variable
What does the following code output:
dim num1 as single = 12.75
dim num2 as single = 12.499
dim total as single
num2 = Math.Round(num2, 1)
num1 = Math.Truncate(num1)
total = num1 + num2
console.writeline(Math.Round(total))
24
Write some code to output the <B>Integer</B> part of a number input by the user
Math.Truncate(input)
Write code to output the <B>Integer</B> and decimal parts of an input number:
Please insert a decimal number: 13.78
The whole number part of this number is: 13
The decimal part is: 0.78
dim num as single
console.write("Please insert a decimal number: ")
num = console.readline()
console.writeline("The whole number part of this number is: " & Math.Truncate(num))
console.writeline("The decimal part is: " & num - Math.Truncate(num))
Very popular examination questions involve manipulating <B>String</B>s. These simple functions will help you with this task.
This function is used to find the length of any <B>String</B> you pass it, counting all the <B>Character</B>s, including the spaces. In visual basic to find the length of a <B>String</B> we use the codice_2 function that returns the <B>Integer</B> length of the <B>String</B> that it has been passed:
someText = "Gary had a little lamb"
Console.writeline(Len(someText))
22
This function allows us to find the position of an item within a given <B>String</B> and returns the position's location. In visual basic this is performed by the following command:
codice_3
For example we might want to find the location of an end of a sentence by looking for a fullstop:
someText = "Gary had a little lamb. His fleece was white as snow."
Console.writeline(InStr(someText,"."))
23
We can also use this command to search for <B>String</B>s within <B>String</B>s. For example if we were to look for to see if a sentence contained a certain name:
someText = "Gary had a little lamb. Dave's fleece was white as snow."
Console.writeline(InStr(someText,"Dave"))
25
If the search item is not contained in the <B>String</B> then it will return 0
someText = "Gary had a little lamb. Dave's fleece was white as snow."
Console.writeline(InStr(someText,"Julie"))
0
This function allows you to snip items out of a <B>String</B> and return a sub<B>String</B>. Visual Basic uses the following command:
codice_4.
For example we might want to find the local number from a landline phone number we have been given. We'll have to ignore the area code:
phone = "(01234)567890"
local = phone.Sub<B>String</B>(7, 6)
console.writeline(local)
567890
This function allows you to stick <B>String</B>s together (concatenate) so that you can start to build <B>String</B>s using variables. Visual Basic uses the following command:
codice_5
For example we might have a users name stored in a variable codice_6 and a greeting that we would like to give them:
name = "Charles"
console.writeline("Hello " & name & ". How are you today?")
Hello Charles. How are you today?
When you declare a variable you give it a datatype. This datatype restricts the values that you can place into the variable. For example:
This seems to make sense, but what would happen when you try to place a real number into a <B>Integer</B>:
dim age as <B>Integer</B>
age = 34.3
console.writeline(age)
34
This might seem OK, but in other lanuages we might run into trouble. To perform this we would have to convert from one datatype to another:
dim age as decimal
age = 34.3
console.writeline(age)
age = CInt(34.3) 'converts the decimal into an <B>Integer</B>
console.writeline(age)
34.3
34
Write a short program to tell someone how many letters they have in their name (just in case they don't know!), for example:
Input: Fremlin
Hello Fremlin, you have 7 letters in your name.
Some people have stupidly typed their firstname and their surname into a <B>Database</B>, write some code to display the first name, then their surname
dim fistname as <B>String</B> = "Elizabeth Sheerin"
Input: Elizabeth Sheerin
Firstname: Elizabeth
Surname: Sheerin
A telephone number has been typed into a computer as a <B>String</B>: (01234)567890
dim phonenum as <B>String</B> = "(01234)567890"
Write some code to output the number without brackets:
Input: (01234)567890
Output: 01234567890
A similar question to the one above, telephone numbers are currently stored in a very unreadable format: 01234567890, completely missing off the area code. Can you convert them to display the first 5 figures are the area code:
dim phonenum as <B>String</B> = "01234567890"
This should then be output as:
Input: 01234567890
Output: (01234)567890
A palindrome is a word, phrase or number that may be read the same way in either direction. For example 1234321, RACECAR, TOOT and NUN. You need to write a program that checks to see if any input given is a palindrome and let the user know: 
Input: NUN
That is a palindrome!
Input: nune
That is NOT a palindrome
You will often want to check the format of a <B>String</B> being input and if it is incorrect you will want it to be submitted again. For example you might want someone to input the name of their best friend, meaning that they shouldn't be inputting any letters or spaces, and it should start with a capital letter:
Name of best friend: Beanie(CORRECT)
Name of best friend: jonny5(STOP THIS)
To do this we can match the input <B>String</B> against some rules, regular expressions or regex, in this case we only want <B>Character</B>s from the alphabet:
Breaking apart the rule:
Another example might be checking for the correct spelling of a famous composer:
We can check this using the pattern codice_14. Let's take a look at what this means:
Most regular expression tools provide the following operations to construct expressions.
<B>Boolean</B> "or"
A vertical bar separates alternatives. For example, codice_23 can match "gray" or "grey".
Grouping
Parentheses are used to define the scope and precedence of the operators (among other uses). For example, codice_23 and codice_25 are equivalent patterns which both describe the set of "gray" and "grey".
Quantification
A quantifier after a token (such as a <B>Character</B>) or group specifies how often that preceding element is allowed to occur.
Most programming languages have regular expression functions. In VB.NET we can use regular expressions by using the Regex routine:
' this code enforces the name rule from earlier
Dim name As <B>String</B>
Console.Write("Name of best friend: ")
name = Console.Readline()
' match the <B>String</B> against a regular expression
Dim m As Match = Regex.Match(name, "[A-Z][a-z]+")
If (m.Success) Then
Else
End If
A common use for regular expressions is in checking that you have a correctly typed email address. A rule for that is this: codice_32.
You can find out more about Regular expression on wikipedia and you will cover regular expressions in more detail in A2.
to/from <B>Integer</B>, real, date/time.
Over the course of the next few chapters you might see a lot of text in the code examples that doesn't seem to do anything other than aid understanding of the code. This text is called a comment and if you have this book in colour you'll see that these comments are highlighted in green.
In Visual Basic all comments start with an apostrophe codice_1 or the word codice_2. Let's take a look at a quick example:
' this is a comment
dim a, b, c as <B>String</B>' declare variables to store names
' read the three names '
a = console.readline()
b = console.readline()
c = console.readline()
console.writeline("the names are :" & a & b & c)
Another use for comments is to disable code that you don't want to delete but you do want to keep. By commenting out the code it means that you can always restore it later if you want to. It isn't a good idea to leave commented out code in final code, but it is a very common practice when you are developing something:
'the code below now only takes one name as input instead of three
dim a as <B>String</B> ' declare variables to store names
', b, c as <B>String</B> ' this code does nothing!
' read the three names '
' b = console.readline()
' c = console.readline()
console.writeline("the names are :" & a)
' & b & c)
Comments in Python use the hash codice_3 <B>Character</B>, like this:
animal = "bunny" # initialise a variable with the <B>String</B> "bunny"
print(animal)
Constants are like variables in their declarations and the ability to look at the value stored inside them, however you can not change the values while the program is running, the value of a constant remains (rather unsurprisingly) constant.
Const pi as Single = 3.14
console.writeline(pi)
3.14
If you try to change a constant value it will bring up an error. They are very useful for values that do not change or rarely change such as VAT, pi, e, etc. By using a constant you don't run the risk that you might accidentally change the value, you wouldn't want to accidentally change pi to equal 4 as All your calculations would go wrong!
Write a program that works out the area and circumference of a circle, setting pi to a constant. Use the equations: area = Πr and circumference = 2Πr For example:
Insert radius: 5
area = 78.5398163
circumference = 31.4159265
const pi as single = 3.14
dim r as single
console.write("Insert radius: ")
r = console.readline()
console.writeline("area = " & pi * r * r)
console.writeline("circumference= " & 2 * pi * r)
console.readline()
Write a program that works out the cost of two clothing items showing the price, VAT, and price inclusive of VAT. VAT = 17.5%. For example
Insert price of item 1: 10.40
Insert price of item 2: 19.99
item 1 = 10.40 + 1.82 VAT = £12.22
item 2 = 19.99 + 3.49825 VAT = £23.48825
const VAT as single = 0.175
dim price1, price2 as single
console.write("Insert price of item 1: ")
price1 = console.readline()
console.write("Insert price of item 2: ")
price2 = console.readline()
console.writeline("item 1 = " & price1 & " + " & price1 * VAT & " VAT = £" & price1 * (VAT + 1))
console.writeline("item 2 = " & price2 & " + " & price2 * VAT & " VAT = £" & price2 * (VAT + 1))
console.readline()
Why might you want to use a constant in your code instead of a normal variable?
Constants are fixed values, so you can't accidentally assign them new values in other parts of your code.
When is it sui<B>Table</B> to use a constant?
When you are using a value that doesn't need to change at run time and will be used in more than one location.
Most programming languages have built in data types that are used when declaring variables. Some common data types, and the ones you need to know for the exam, are as follows:
Using these data types we can start to write a simple computer program:
dim name as <B>String</B>
dim age as <B>Integer</B>
name = "Barry"
age = 56.3
Console.writeline("hello " & name & "! you are " & age & " years old")
But wait a second, this gives you an odd output, it says:
hello Barry! you are 56 years old
I told it that Barry was 56.3 years old! The reason is because I have used an <B>Integer</B> to store the age and not a real (single or double) datatype, it therefore drops the decimal part. <B>Integer</B>s, afterall, don't store decimal places!
Depending on the datatype, we assign values in different ways:
Using the correct datatype declare variables for a person's:
dim age as <B>Integer</B>
dim name as <B>String</B>
dim gender as char 'OR dim gender as <B>String</B>
dim height as decimal
dim DoB as date
dim license as <B>Boolean</B>
Write assignment statements for the following variables using yourself as an example:
name = "Peter" 'we must use speech marks for text, so we don't mistake the value for a variable
age = 56 'we don't need speech marks for numbers
gender = "m"
Which of the following declarations correct, which are wrong and why?
dim colour as <B>String</B>
dim wheelNum as <B>Integer</B>
dim topSpeed as single
dim hasElectricWindows as char
dim colour as <B>String</B> 'CORRECT, also we could use a single to store the frequency
dim wheelNum as <B>Integer</B> 'CORRECT
dim topSpeed as single 'WRONG, we don't need such precision, an <B>Integer</B> would do
dim hasElectricWindows as char 'WRONG, a <B>Boolean</B> would work better
Which of the following assignments are correct, which are wrong and why:
name = Pete
age = "34"
height = twenty
electricWindow = True
name = Pete 'WRONG, we're assigning a <B>String</B> so we need to use speech marks
name = "Pete"
age = "34" 'WRONG, we're assigning an <B>Integer</B> so we don't need speech marks
age = 34
height = "twenty" 'WRONG, height is numeric, so we need to assign a number without speech marks
height = 20
hasElectricWindow = True 'CORRECT assuming you made the change from the previous question
Give two reasons why is it important to get the correct datatypes:
Write code that asks the user to insert three numbers with decimals, then outputs them (1) all multiplied together, and (2) added together. For example:
Please insert number 1: 2
Please insert number 2: 3
Please insert number 3: 7.8
multiplied together = 46.8
added together = 12.8
dim num1, num2, num3 as single 'NOT <B>Integer</B>, we need decimal numbers! You can use different identifiers
console.write("Please insert number 1:")
num1 = console.readline()
console.write("Please insert number 2:")
num2 = console.readline()
console.write("Please insert number 3:")
num3 = console.readline()
console.writeline("multiplied together = " & num1 * num2 * num3)
console.writeline("added together = " & num1 * num2 * num3)
console.readline()
You don't need to know this part for the exam, but it should help you understand why we need to convert. We have two types of programming language strongly typed and weakly typed. Strongly means that you can't add a <B>String</B> to a <B>Integer</B>, even if the <B>String</B> contains a number. Weakly typed allows you to add a <B>String</B> to an <B>Integer</B> if the <B>String</B> contains a number
OOP has added many features and elements to basic Procedure-oriented programming. Writing good code, or <B>Design</B>ing OOP programs well, requires more care and planning. To help with writing good programs, OOP comes with some <B>Design</B> Principles to help us <B>Design</B> and plan our programs.
"A test for good software <B>Design</B> is how well it can deal with future change. As the cliche truthfully claims, the only constant is change. Inevitably any piece of software that is in use will be asked to change. <B>Bus</B>iness needs will evolve or the problem space will be better understood, etc. Whatever the reason, the software will need to change. A good <B>Design</B> will allow for that change without too much work. A bad <B>Design</B> will be very hard to modify. "
"When <B>Design</B>ing software, look for the portions most likely to change and prepare them for future expansion by shielding the rest of the program from that change. Hide the potential variation behind an interface. Then, when the implementation changes, software written to the interface doesn’t need to change. This is called encapsulating variation."
https://blogs.msdn.microsoft.com/steverowe/2007/12/26/encapsulate-what-varies/
w:Composition over <B>Inheritance</B>
Worked example w.r.t. "finding commonality in otherwise unrelated items" 
http://stackoverflow.com/a/384067
There are four key elements when <B>Design</B>ing or writing a program using OOP:
In OOP, an <B>Object</B> is compound data: it combines other things together into a single bundle. As noted above, what makes the <B>Object</B> unique is that it combines data (e.g. <B>Integer</B>s, <B>String</B>s, references) with code (i.e. procedures).
In most languages, <B>Object</B>s do not exist in <B>Source Code</B>: you cannot directly "write down" an <B>Object</B>. Instead you must create an <B>Object</B> piece-by-piece, filling-in the individual bits of data and code.
It is important to remember that not only does the <B>Object</B> contain data, but it is also data itself. Once the program starts running, you can freely change the value of any piece of data inside the <B>Object</B>, and in most languages you can also change the elements (data, code) of the <B>Object</B> itself.
Typical <B>Object</B>s can be things that appear on the screen (e.g., pictures, textboxes, etc.) or things are part of the programming (e.g. actors, connections, particles, etc.).
To use any value (the number 7, the word Apple) we need a data-type. Numbers have a data-type e.g. "<B>Integer</B>", and text has a data-type e.g. "<B>String</B>".
To define <B>Object</B>s and work with them in source-code, we need a data-type. <B>Class</B>es are the data-type for <B>Object</B>s. Each <B>Class</B> defines the specific set of data and the specific procedures that will make a particular <B>Object</B>.
Because <B>Object</B>s are complex, with many different variables and procedures inside them, <B>Class</B>es are more complex than normal data-types. Most OOP languages give additional features to <B>Class</B>es to help us use them and create them.
Not only does a <B>Class</B> define a data-type for an <B>Object</B>, but it usually defines default values for new <B>Object</B>s. This allows us to use <B>Class</B>es like a template, or biscuit-cutter: a single <B>Class</B> can stamp-out many identical <B>Object</B>s. The <B>Class</B> can even make small changes to each <B>Object</B> as it is created, as we'll see later.
Since <B>Object</B>s are themselves data, each <B>Object</B> can be separately modified after it's created, even though they start out similar or the same.
Let's take a look at the following example:
<B>Class</B> car
end <B>Class</B>
You can see that the <B>Class</B> is called codice_1 and it has:
Remember this is a <B>Class</B> and therefore only a template, we need to 'create' it using an <B>Object</B>
Procedures (and Functions) can be created anywhere, and used by any code at any time. In OOP, we want to restrict some Procedures (and Functions) so that they can only act upon the data inside the <B>Object</B> they are attached to. These restricted versions have a special name: <B>Method</B>s.
Every <B>Method</B> is a Procedure, with two special features:
Data can be created anywhere, and used by any code at any time. In OOP, we want to restrict some data so that it can only be acted-upon by the <B>Method</B>s in the same <B>Object</B>. These restricted variables have a special name: <B>Attribute</B>s.
Every <B>Attribute</B> is a Variable, with three special features:
NB: <B>Attribute</B>s are further split into two types: <B>Field</B>s and Properties. All <B>Field</B>s and all Properties are <B>Attribute</B>s, but with extra specialization. See the section on Encapsulation for the precise differences.
In the example above we store the fuel and maxSpeed. 
What is the difference between a <B>Class</B> and an <B>Object</B>?
What are the main components of a <B>Class</B>?
<B>Method</B>s and <B>Attribute</B>s
What is the difference between a structure and a <B>Class</B>
structures don't have <B>Method</B>s
When you write a program it often won't work as you expect. It might not compile, it might crash when you run it, or it might give you the wrong result. These are all errors with your code and we can place them into 3 different error categories:
Let's take a look at what each of them mean.
You have probably met this error a lot, when you try and run your program it won't compile, giving you an error message. If you are using something like Visual Studio it will even underline the problem code with a blue squiggly line. There is a problem with the structure, or syntax, of the code that you have written. This might be a situation where you have forgotten to add a closing bracket or you have misspelt a key word. Take a look at this example:
For x = 1 two 9
Next
You should be able to see that in line 1 the programmer has misspelt the word codice_1. This code won't work at all.
Sometimes you will have a program that compiles fine, but breaks when you actually run it. For example this code here:
Dim x as <B>Integer</B> = 0
Dim total as <B>Integer</B> = 0
While x < 5
Loop
The programmer has created an infinite loop, and the value of codice_2 will head towards infinity, eventually breaking the program.
A logic error is when a program compiles, doesn't crash, but the answers that it gives are incorrect. The logic, semantics or meaning, conveyed by the code is wrong. Take a look at the next example:
Dim Price as decimal = 45.99
Dim Tax as decimal = 0.20
Console.Writeline("Price " & Price)
Console.Writeline("VAT " & Price * Tax)
Console.Writeline("Total " & Price + Tax)
In the above example you would expect it to print out:
But because there is a logic error on line 6, it prints:
To fix it, you have to fix the logic of the code and change line 6 to:
Console.Writeline("Total = " & Price + (Price * Tax))
Name and give examples of the three error types in programming code:
What error is in the following code, how would you fix it:
dim x as <B>Integer</B>
do until x > 5
loop
There is a Runtime error. codice_3 will never be greater than 5, since line 3 gives codice_3 the value of codice_5, thus, the loop will always end in 2 and the loop will never end. This could be fixed by moving the x = 1 instruction outside the loop, between line 1 and 2.
What error is in the following code, how would you fix it:
dim n as sting
console.writeline("enter your name")
n = console.readline
The first line has a compilation (syntax) error. codice_6 should read codice_7
What error is in the following code, how would you fix it:
'print all the names
For x = 1 to 3
Next
The third line has a Logic (semantic) error. codice_8 should read codice_9
What error is in the following code, how would you fix it:
Dim y As <B>Integer</B>
y = Console.Readline()
'print some of the names
For x = 0 to y
Next
Line 1 has a compilation error, codice_10 should read codice_11. There is also a potential Runtime error on line 5, if the user inputs a value of y that is greater than 3 then the code will break. Errors like these can be solved in a number of ways, we are going to look at one now.
Dim age as <B>Integer</B>
console.writeline("How old are you?")
age = console.readline()
console.writeline("What is your name?")
For the above code we can easily break it if we type the following:
How old are you?
cabbages!
The reason, as you should already be aware, is that variable codice_12 is an <B>Integer</B> and you are trying to save the <B>String</B> "cabbages" into an <B>Integer</B>. It's like trying to fit a cannon into a camel, they just aren't compatible, and VB will definitely complain ruining all your code. What is needed is a way in which we can stop or catch these errors, we are going to take a look at try and catch.
Dim age as <B>Integer</B>
console.writeline("How old are you?")
Try
Catch ex As Exception
End Try
console.writeline("What is your name?")
This will deal with the issue:
How old are you?
Socrates!
Conversion from <B>String</B> "Socrates!" to type '<B>Integer</B>' is not valid.
What is your name?
Letting us know that you're put a <B>String</B> in when it was expecting an <B>Integer</B>. The program doesn't crash.
Use a try and catch to avoid the issue of a person inputting a value for codice_13 that would break the array.
Dim y As <B>Integer</B>
y = Console.Readline()
'print some of the names
For x = 0 to y
Next
Dim y As <B>Integer</B>
y = Console.Readline()
'print some of the names
Try
Catch ex As Exception
End Try
OOP imposes additional structure on programs. We have introduced two new structural features: <B>Object</B>s, and <B>Class</B>es. We have also seen how ordinary Variables and Procedures are given extra rules, and renamed as <B>Attribute</B>s and <B>Method</B>s. OOP languages often have ordinary Variables and Procedures too, but mostly we work with the <B>Object</B>-specific versions; this is what we mean by "<B>Object</B> oriented" - we are actively using <B>Object</B>s in our program <B>Design</B> and implementation.
This additional structure allows us to do new things in programming that weren't possible with ordinary Procedure-oriented programming. In later sections, we will see how these can help building larger and more complicated programs, while reducing the number of bugs and making them easier to work with.
We have two new structuring concepts: <B>Class</B>es, and <B>Object</B>s. How do we create them?
The <B>Class</B> is a new data-type, so we specify it in <B>Source Code</B>. Typically, we create a new source file and name it the same as we want to name our <B>Class</B>. So, a "Car" <B>Class</B> might be described by a source file called "Car.src" (in Java: "Car.java", in Python: "Car.py", etc).
But how do we create new <B>Object</B>s - how do we use our <B>Class</B> as a template to create many <B>Object</B>s for us?
This process is called Instantiation: when the program is running, we invoke a special <B>Method</B> (i.e. Procedure) within the <B>Class</B> that Instantiaties a new <B>Object</B>. (The <B>Object</B> created is referred to as an Instance of the <B>Class</B>) These special <B>Method</B>s are the same as ordinary <B>Method</B>s, but in some languages they have different syntax, or additional tags, to make clear they are intended for creating new <B>Object</B>s.
Because these <B>Method</B>s have a special purpose, and to make it easier to talk about them without getting confused with the general <B>Method</B>s on the <B>Object</B>, we have a special name for <B>Method</B>s that can Instantiate new <B>Object</B>s. These <B>Method</B>s are called Constructors.
To recap:
dim polo as new car 'instantiation 1
dim escort as new car 'instantiation 2
The code above creates an <B>Object</B> called polo and escort, both of <B>Class</B> type car (which we declared earlier). We can now use all the public <B>Attribute</B>s and <B>Method</B>s:
polo.refuel(100) 'assuming fuel starts at 0
polo.drive()
escort.refuel(50) 'assuming fuel starts at 0
escort.drive()
for x = 1 to 20
next
polo.refuel(10)
console.writeline("polo: " & polo.getFuel())
console.writeline("escort: " & escort.getFuel())
This would output the following:
pumping gas!
pumping gas!
pumping gas!
polo: 89
escort: 29
Write your own instantiation for a beetle car:
dim beetle as new car 'instantiation
What would the following output:
dim ka as new car
dim montego as new car
ka.refuel(10) 'assuming fuel starts at 0
montego.refuel(50) 'assuming fuel starts at 0
montego.drive()
montego.drive()
for x = 0 to 10
next
ka.refuel(10)
console.writeline("ka: " & ka.getFuel())
console.writeline("montego: " & montego.getFuel())
pumping gas!
pumping gas!
pumping gas!
ka: 20
montego: 37
In Procedure-oriented programming, data available to one <B>Method</B> is generally available to all <B>Method</B>s. This can be manually restricted, e.g. using private/protected/etc, see Encapsulation [link needed here], but this is optional. Usually the only limit is that the data provided to each Procedure must match specific ../Data types. When defining the Procedure, we choose which datatypes it will accept (i.e. we restrict the Parameters).
EXAMPLE: ---datatypes: 2 procedures eg int int and <B>String</B> int
When someone tries to use the Procedure, the computer looks at the data provided, and compares the datatypes to ...( so long as the types of data they provide exactly match the types we choose, the Procedure will execute.)
In <B>Object</B>-oriented programming, all data is encapsulated by default [for multiple reasons - link needed]. Unlike Procedure-oriented programming, where any Procedure can access any data anywhere in the program, <B>Method</B>s can only directly access data in their own <B>Object</B>. To access the data within a different <B>Object</B>, we must pass the whole <B>Object</B> to any <B>Method</B>s (or Procedures) that need to act on that data.
This creates a problem: the datatype of the parameter will now be the type of the <B>Object</B>'s <B>Class</B>, and each <B>Class</B> is a unique datatype. For a simple case, this works fine, but for larger problems it prevents us re-using <B>Method</B>s. This would be disastrous for OOP: we would need to endlessly copy/paste <B>Method</B>s from one <B>Class</B> to another, tweaking the parameter-types, instead of re-using the code. This would be a step backwards in ease of programming and reduction of bugs.
For example, if we have a Pet <B>Class</B> with a Year_of_Birth variable, and an Owner <B>Class</B> that also has a Year_of_Birth variable, and we have a <B>Method</B> that calculates current Age from a Year_of_Birth ... it will either work on Pet <B>Class</B>es, or on Owner <B>Class</B>es, but it cannot work on both.
To solve this, OOP languages have an essential feature called <B>Polymorphism</B>. There are many kinds of <B>Polymorphism</B>, but most of the time we only use two of them. The shared concept is that one thing can pretend to be multiple things.
The simplest form of <B>Polymorphism</B> is w:Ad hoc <B>Polymorphism</B> when the programmer writes multiple different versions of the Procedure: e.g. one that accepts <B>Object</B>s of type A, and one that accepts <B>Object</B>s of type B. Both versions have the same name, and the OOP language knows to treat them as if they are the same, but to intelligently use one or the other depending on how the Procedure is invoked at runtime.
The more powerful form, used heavily in OOP, is w:Subtyping. With subtype <B>Polymorphism</B>, the programmer links different datatypes to each other, promising the computer that - in some way - those datatypes can be used interchangeably. The mechanism for this is <B>Inheritance</B> (see below).
Consider our car example again. When we created the codice_1 <B>Object</B> we inherited from codice_2 and added the codice_3 <B>Attribute</B> and <B>Method</B>s. But what happens when we try and refuel, let's take a look at the code:
public sub refuel(byVal x as <B>Integer</B>) as <B>Integer</B>
end sub
Well this just won't do. We are creating an electric car and we don't want to say that we are pumping gas; what would our sandal-socked yoghurt eating friends say! So for the codice_1 <B>Object</B> we want to inherit everything from codice_2, but we want to morph(change) the codice_6 <B>Method</B>. To do that we are going to use something called override:
<B>Class</B> electricCar
end <B>Class</B>
In <B>Polymorphism</B> what is the keyword we use to redefine a subroutine:
overrides
Write a definition of a limo <B>Class</B> that uses <B>Polymorphism</B> that makes sure that the maxSpeed never goes beyond 100:
<B>Class</B> limo
end <B>Class</B>
Write a definition of musclecar that inherits car, but uses 30 units of fuel per drive and displays "vroom vroom!" every time it drives. It should also store details on leatherSeating, allowing you to interface with this.
<B>Class</B> musclecar 
end <B>Class</B>
Describe <B>Polymorphism</B>
<B>Polymorphism</B> allows you to inherit <B>Attribute</B>s from a parent <B>Class</B>, but redefine some of the <B>Method</B>s or <B>Attribute</B>s
In practice, the simple version of <B>Polymorphism</B> above would not save much programmer time if we end up writing different versions of a similar <B>Method</B> for each type.
To fix this problem, OOP languages use <B>Inheritance</B> (also called Sub<B>Class</B>ing, if types are implemented as <B>Class</B>es).
When one <B>Class</B> Inherits from another <B>Class</B>, it adopts the type of the other <B>Class</B>, and adopts all the <B>Method</B>s and <B>Attribute</B>s. The new <B>Class</B> can be treated as if it is the old <B>Class</B> - Procedures don't need to know whether they are seeing a new <B>Class</B> or an old one.
The original <B>Class</B> is usually called a super<B>Class</B> and the new (inheriting) <B>Class</B> is called a sub<B>Class</B>. 
Crucially, the sub<B>Class</B> is allowed to add additional <B>Method</B>s and <B>Attribute</B>s on top of the ones it inherited. Because these new features extend the behaviour of the super<B>Class</B>, we usually say that a sub<B>Class</B> "extends" the super<B>Class</B>. In some OOP languages, the syntax for making a sub<B>Class</B> is to use a keyword "extends", along with the super<B>Class</B> you wish to inherit from.
For example, the "Shape" <B>Class</B> may define variables and <B>Method</B>s common to any shape (eg number of vertices, colour, position) which are inherited by sub<B>Class</B>es, which then access the same code, where appropriate, while providing sub<B>Class</B> specific <B>Method</B>s for area - see Overriding below.
For example, "theShape.area()" would invoke a <B>Method</B> from the <B>Class</B> of which "theShape" is an instance, which would be different <B>Method</B>s when "theShape" was an instance of a polygon or an ellipse.
Subtype refers to a hierarchy of types, where both "ellipse" and "polygon" are subtypes of a supertype "Shape". The <B>Method</B> used may be selected at run time (in some languages), so that the code which invokes "theShape.area()" need not know what subtype "theShape" belongs to, so long as it provides a <B>Method</B> area .
However, this comes at a price - changes in the super<B>Class</B> may produce unwanted side effects in some sub<B>Class</B>es.
Declare a new <B>Class</B> called limo that has <B>Attribute</B>s numSeats and colourSeats; and the ability to interface with them
<B>Class</B> limo
end <B>Class</B>
What are the benefits of using <B>Inheritance</B>?
Creating new <B>Class</B>es from parent <B>Class</B>es is very quick and easy. It allows for a modular approach to creating <B>Class</B>es, where you might never use the base <B>Class</B> at all.
Building on the car example above, what would happen if we wanted to declare an electric car? Well we'd probably want to store some information on the number of batteries that it has:
<B>Class</B> electricCar
end <B>Class</B>
This seems like a very long and tedious task rewriting all the same code again. You're right! It would be far better if we only had to declare all the new stuff we wanted to add. OOP allows for <B>Inheritance</B>, where a new <B>Class</B> can inherit the <B>Attribute</B>s and <B>Method</B>s of a parent <B>Class</B>:
<B>Class</B> electricCar
end <B>Class</B>
This means that everything that car declared is now accessible from electricCar, as well as the new numBatteries <B>Attribute</B> and <B>Method</B>s. Let's instantiate this example and see what's possible
dim gwiz as new electricCar
gwiz.setnumBatteries(6) 'from electricCar
gwiz.setSpeed(60) 'from car
gwiz.drive() 'from car
<B>Inheritance</B> (aka Sub<B>Class</B>ing) and <B>Polymorphism</B> largely solve the issues caused by <B>Method</B>s and <B>Attribute</B>s being more restricted than plain Procedures and Variables. But we quickly discover that not only do we want to extend a super<B>Class</B> (i.e. add to its existing <B>Method</B>s/<B>Attribute</B>s), but we want to modify its existing behaviour.
This is so useful that most OOP languages support it as core feature, and this is called Overriding.
When a sub<B>Class</B> extends a super<B>Class</B>, it can optionally replace any of the super<B>Class</B>'s <B>Method</B>s with new, customized versions. This act of replacing is Overriding, and the old version is described as overridden.. The replacement <B>Method</B> in the sub<B>Class</B> may (but need not) invoke the overridden <B>Method</B> of the super<B>Class</B>, as well as carrying out additional operations required by the sub<B>Class</B>.
Most OO languages allow redefinition of the standard arithmetic operators (+,-,*,/...) so they can be applied to members of a <B>Class</B>, or to a <B>Class</B> and a standard variable type ( real number, <B>Integer</B>..). As with <B>Polymorphism</B>, the appropriate <B>Method</B> (which must be part of the <B>Class</B> definition) may be selected at run time.
For example, a <B>Class</B> Complex which represents complex numbers, could implement the standard arithmentical operations for its instances.
Technically, <B>Overloading</B> is a kind of ad-hoc <B>Polymorphism</B>, but it is so widely used that it has its own name.
It is seldom advisable to use Global variables as they are liable to cause bugs, waste memory and can be hard to follow when tracing code. If you declare a global variable it will continue to use memory whilst a program is running even if you no longer need/use it.
Local variables are initiated within a limited scope, this means they are declared when a function or subroutine is called, and once the function ends, the memory taken up by the variable is released. This contrasts with global variables which do not release memory.
Take a look at this example:
Module Glocals
End Module
What would the output be?
123
234
123
Why is this? Well we seem to have two versions of the variable number1.
So looking at the code inside the main sub routine we have 3 different ways of printing out the variable number1.
Rules of thumb: If you want to quickly tell the difference between a global and a local variable use these quick rules. But be warned they might try to trick you!
What is the difference between a global and a local variable?
Global variables are accessible from all parts of a program, whilst local variables are only accessible within a programming construct such as a loop, function or procedure
Why is it a good idea to use local variables instead of global variable?
Local variables release memory when you have finished with them, global variables are always stored in memory whether you need them or not
In what situation might you want to use a global variable?
When you want to declare a variable that needs to be accessible by all parts of your code
List the global and local variables for the following. What will be the output for input codice_7:
Module calcAge
End Module
Locals: age, d
Globals: months
age?
16
192
5840
For the above code how could you make the code more efficient, and why would it be more efficient?
Make the codice_8 variable a local variable by putting it inside the codice_9 sub routine, if you leave it as a global variable it will be taking up memory even when you don't need it.
List the Global and Local variables in the following code, list the output:
Module greetings
End Module
Locals: y (on line 4), q (on line 9)
Globals: q (on line 2)
6
hi,bye,bye,bye,bye,bye,bye
6
An important part of computer code is allowing your user to input data into the program, things such as text, key presses or even a data feed from a motion sensor games controller.
Once the data is in the program you want the system to output responses, these may take the form of output to a screen: graphics, text, output to a sound device, printed documents or data output to another program.
For this unit you need to be familiar with a few input and output commands. The little black box that appears on your screen is called the console. In VB.NET all the commands to read and write from this are accessed from the codice_1 command, let's take a look at some:
For the AS course it is unlikely you will need anything beyond the print to screen command and the write to file command (see later). In VB.NET there are two write to screen commands that you should be familiar with: 
console.write("Hello") 'writes the word hello to the screen
console.writeline("Hello") 'writes the word Hello to the screen and adds a carriage return (new line) 
Let's see an example of this in action:
console.write("Hello ")
console.write("how ")
console.write("are ")
console.writeline("you?")
console.writeline("I'm fine thank ")
console.write("you.")
This would output the following:
Hello how are you?
I'm fine thank
you.
Notice the difference between a codice_2 and a codice_3 command.
Python does not have two separate commands in the way VB.NET does. The codice_4 command will by default add a new line on to the end of each <B>String</B>. Here's an example:
print("This is the first line. This is the second half of the first line.")
print("This is the second line.")
will produce the output:
This is the first line. This is the second half of the first line.
This is the second line.
If you want to output several things all on the same line you have to add codice_5 to the print command. This tells Python that instead of ending with a new line you instead want to end with nothing. So the following example outputs all on the same line:
print("This output will", end="")
print(" all appear ", end="")
print("on the same line.", end="")
This output will all appear on the same line.
We can do a lot of things with the codice_6 command. If you are using Visual Studio then type the following:
console.
Up should pop some suggestions. Play around with codice_7 and codice_8
There is also a command to output a small and annoying sound, it's unlikely you'll need to know this for the exam, and your teachers will most likely hate it.
console.beep() 'plain beep
console.beep(2000,500) 'beep at 2000Hz for 0.5 seconds
Find out more about the codice_6 command on the MSDN website
To make your program interactive you'll need your user to input commands, for the exam these will most likely be text instructions or reading from a file (covered later). You might look at buttons and games controllers next year. In VB.NET there are two types of input command that you need to know:
variable1 = console.readline() 'reads input until user presses enter and stores it in variable1
variable2 = console.read() 'reads one key press/<B>Character</B> and stores the ASCII code in variable2. We'll learn more about this later
Let's take a look at a quick example of where this might be used:
dim name as <B>String</B> 'declare a variable called name
console.write("Please insert your name:") ' write "Hello" and the name to the screen
name = console.readline() 'assign the user's input into the variable name
console.writeline("Hello " & name) ' write "Hello" and the name to the screen
Please insert you name: Ali
Hello Ali
There is also the codice_10command that reads in a single <B>Character</B>. Take a look at this example:
dim urChoice as char 'declare the name
console.writeline("Please select from options 1,2,3 or 4:")
urChoice = console.Readline() 'read the users input into the variable name
console.writeline("You chose : " & urChoice )
Please select from options 1,2,3 or 4:
4
You chose : 4
In Python there is just the one command for reading user input from the keyboard which is codice_11. Here's an example:
print("Please enter your name:")
name = input()
print("Hello ", name)
which if you type in your name as Alice will give the following:
Please enter your name:
Alice
Hello Alice
What does the following code output:
console.writeline("The ")
console.write("Cat")
console.write("sat ")
console.writeline("on ")
console.writeline("the " & "mat")
The 
Catsat on 
the mat
dim num as <B>Integer</B> = 19
console.writeline("The average age ")
console.write("of a combat soldier ")
console.write("in Vietnam was " & num)
The average age 
of a combat soldier in Vietnam was 19
Write code to display the following to the screen:
My favourite colours:
Red
Blue
console.writeline("My favourite colours:")
console.writeline("Red")
console.writeline("Blue")
What would the following look like:
dim age as <B>String</B>
dim name as <B>Integer</B>
console.writeline("Enter your name: ")
age = console.readline()
console.writeline("Enter your age: ")
name = console.readline()
console.writeline("Hello " & name & ". You are " & age & " years old ")
for the input:
John
16
Enter your name: John 
Enter your age: 16
Hello 16. You are John years old 
Whoops! Fix this:
dim age as <B>Integer</B>
dim name as <B>String</B>
console.writeline("Enter your name: ")
name = console.readline()
console.writeline("Enter your age: ")
age = console.readline()
console.writeline("Hello " & name & ". You are " & age & " years old ")
When you first load VB.NET in Visual Studio and select to run a codice_1, you will be presented with some <B>Source Code</B>:
module module1
end module
These lines of code will tell the computer what to do, currently they do very little and we need to get started:
Tradition has it that the first program a programmer should write is "Hello World!". Write the following "sourcecode" into a command line VB.NET programming environment:
module module1
end module
If you are using Visual Studio then you can make the program run by pressing codice_2 or hitting the "Run" button that looks a little like this:
You should get the following output:
There are many ways to start writing programs in Python on your computer, there are even websites that you can go to and start writing Python code immediately, for example try repl.it
The traditional "Hello World!" program written in Python is just one line of code:
print("Hello World!")
You then need to run the code. If you are using a website like repl.it this is done by simply clicking the "run" button.
You should get the following output:
There it is, you're on your way to becoming a programmer! There is a lot more to learn and over the course of the next few sections you'll get a crash course in programming.
First of all let's look at another program and find out what it's doing (note that the numbers down the left are not part of the program, we often number the lines of code in this so we can say something like "Now look at line 4 which does a cool thing"):
We'll take a look at each line of the VB.NET program first:
Now let's look at each line of the Python program:
Both programs should output the following:
Hello there, my name is Peter and my age is 29
6 * 6 = 36
But wait a second, this program isn't much use! Your name probably isn't Peter and you're even less likely to be 29. Time for you to write some code yourself:
Create a short program to write the following to the screen, replacing the name Dave with your own name (unless it also happens to be Dave):
Dear Teacher,
My name is Dave and this homework is too easy.
2+2 = 4
Yours Sincerely,
Dave
VB.NET answer:
module module1
end module
Python answer:
print("Dear Teacher,")
print("My name is Dave and this homework is too easy.")
print("2 + 2 = ", 2 + 2)
print()
print("Yours Sincerely,")
print("Dave")
You can show your friends and family. But wait! It's a rubbish program if you want to share it amongst your friends! Each one of them will have to go and change the <B>Source Code</B>, then hit run. Rubbish unless you live in a country where everyone has the same name, let's call that country 'Davia', I'm pretty sure you don't live there. We better look at making a program that is a little more interactive, where people can change parts of the program without having to keep re-writing it. For that we'll need something called a variable.
An incredibly important part of computing is the idea of iteration, that is repeating the same thing again and again. You probably use iteration every day. Take writing lines in a detention for example; you write some lines, check to see if you have met the line limit, and if you haven't you write some more lines, check if you have met the line limit and so on, until you do meet the line limit and then you can stop.
'Programmers are lazy and can get computers to write detention lines for them
'they are also lazy as they can do a declaration and assignment at the same time:
dim count as <B>Integer</B> = 0
While count <= 100
End While
0. I should always do my programming homework.
1. I should always do my programming homework.
2. I should always do my programming homework.
3. I should always do my programming homework.
100. I should always do my programming homework.
Think "carefully" before you answer each of these.
A further example might be in a computer game, where the speed of a car is increased all the time the accelerator pedal is pressed down until you hit its maximum speed.
dim maxSpeed as <B>Integer</B> = 120
dim speedNow as <B>Integer</B> = 0
dim pedalDown as <B>Boolean</B> = True
While speedNow < maxSpeed And pedalDown
End While
console.writeline("MAXSPEED!")
0
1
2
3
119
MAXSPEED!
Write a program that counts from 20 to 60 inclusive like so:
202122...60
dim count as <B>Integer</B> = 20
While count <= 60
End While
Write a program that takes an input and outputs the times <B>Table</B> for that number:
insert a number: 7
1 * 7 = 7
2 * 7 = 14
3 * 7 = 21
4 * 7 = 28
5 * 7 = 35
6 * 7 = 42
7 * 7 = 49
8 * 7 = 56
9 * 7 = 63
10 * 7 = 70
dim count as <B>Integer</B> = 1
dim times as <B>Integer</B>
console.write("insert a number: ")
times = console.readline()
While count <= 10
End While
Write a program that adds all the numbers from 10 to 20 inclusive together and finally outputs the result
dim count as <B>Integer</B> = 10
dim total as <B>Integer</B> = 0
While count <= 20
End While
console.writeline("the total is: " & total)
The while loop:
For example:
dim speed as <B>Integer</B> = 0
While speed < 120
End While
0
1
118
119
Another type of while loop is a Do-While loop. This is slightly different from the While loop in that you perform the task "before" you check that you have to perform the task again. This means you perform the task whatever the circumstances of the check:
Visual Basic handles this with some slight syntax differences
console.write("how old are you?")
age = console.readline()
Do 
Loop Until age > 17
console.writeline(age & " is too old to attend school!")
This is great for young students:
how old are you? 15
15 year olds should attend school!
16 year olds should attend school!
17 is too old to attend school!
But we run into a problem when we have a 78 year old:
78 year olds should attend school!
78 is too old to attend school!
For the dodgy example above re-write the Do While as a While Do loop
console.write("how old are you?")
age = console.readline()
While age < 17
End While
console.writeline(age & " is too old to attend school!")
Be careful when you use each loop!
The most complicated tool you may meet is the for loop. This is a glorified While loop and don't be put off by how complicated it looks. It also tends to be one of the easiest ways to iterate in Visual Basic
It is far easier to use in vb
For speed = 0 to 120
Loop
For loops also allow you to count downwards. For example if you creating a timer that counts down to a target. To do this we use the codice_1 code, making the following code:
For x = 10 To 1 Step -1
Next
console.writeline("Test over!")
display:
10,9,8,7,6,5,4,3,2,1,Test over!
Write a for loop to display the words "I will eat my greens" 40 times:
for x = 1 to 40
next
Write code that will input a lower and higher number, then write the numbers on the screen, starting at the lower and writing each number until you reach the higher. Use a for loop, it should display the following:
insert lower number: 10
insert higher number: 13
10
11
12
13
dim lower, higher as <B>Integer</B>
console.write("insert lower number: ")
lower = console.readline()
console.write("insert higher number: ")
higher = console.readline()
For x = lower to higher
Next
Write a for loop that will output the frequencies: 100,200,300,400, ... , 20000. HINT, you might want to start at 1 and multiply. Remember codice_2
For x = 1 to 200
Next
Get the computer to keep asking a user whether they are "Ready to launch?". If they say anything other than "Yes", then keep asking the question. If they say yes, then count down from 5 and end with the words "BLAST OFF!".
Ready to launch? No
Ready to launch? Not yet
Ready to launch? Yes
5
4
3
2
1
BLAST OFF!
Extension: If you want to really show that you know how to use case statements, get it to say: FIVE, FOUR, THREE, TWO, ONE instead of showing the numbers
Dim answer As <B>String</B>
Do
Loop While answer <> "Yes"
For x = 5 To 1 Step -1
Next
Console.Write("BLAST OFF!")
You have met the three main sorts of iteration that you can use, some being more suited for solving certain problems than others:
Click here to learn more
Some times it might be a good idea to combine several loops together. Take a look at this example 
For x = 1 to 10
Next
This code uses a loop inside a loop to print out the times <B>Table</B>s. All that time you spent learning them at school can be rewritten in six lines of code!
1 :
1 * 0 = 0
1 * 1 = 1
1 * 2 = 2
1 * 3 = 3
1 * 4 = 4
1 * 5 = 5
1 * 6 = 6
1 * 7 = 7
1 * 8 = 8
1 * 9 = 9
1 * 10 = 10
2 :
2 * 0 = 0
Write a for loop inside a loop to display a Christmas Tree, like so:
\\
\\\\
For x = 1 to 5
Next
Adjust the code above so that the user inputs how high the tree is
dim h as <B>Integer</B>
console.writeline("please insert a height")
h = console.readline()
For x = 1 to h
Next
Typical <B>Object</B>s can be things that appear on the screen (e.g., pictures, textboxes, etc.) or things are part of the programming (e.g. actors, connections, particles, etc.).
These store information about the <B>Object</B>. In the example above we store the fuel and maxSpeed. The <B>Attribute</B>s are attached to the <B>Class</B>es, and if there are several instances (<B>Object</B>s) of the <B>Class</B>es then each will store its own version of these variables. Note that instead of the usual dim, there is the word private or public, we'll cover that in the encapsulation section.
Techniques
 * association aggregation
OOP is probably the most widely-used programming paradigm today. As a result, there are many different ways it is used, and many ideas on good and bad styles of programming within OOP languages. However, there are three core ideals that are generally agreed to be valuable in most or all OOP situations:
The three ideals are typically abbreviated as:
Original OOP article follows, with only minor changes e.g. sp corrections
When talking about OOP you must remember the following:
Where:
You noticed that we didn't have to use the dim statement for the <B>Attribute</B>s and we used the word codice_1 instead. What this means is that these <B>Attribute</B>s are not directly accessible once you have instantiated the <B>Class</B>. Let's take our polo <B>Class</B> as an example:
polo.fuel = 100 'this would be accep<B>Table</B> (but not in the exam!)
In the example we access the fuel <B>Attribute</B> of the polo <B>Class</B> and give the car 100 units of fuel because fuel is declared as public, there are no restrictions in accessing it. However, when we try the following we run into trouble:
polo.maxSpeed = 100 'this would be unaccep<B>Table</B>
The reason that this wouldn't work is because we have declared the maxSpeed <B>Attribute</B> as private. If something is declared as private you can't access it externally, but how do you access it? The only way to access a private <B>Method</B> or <B>Attribute</B> is to use an interface, or public <B>Method</B>. In the car code example we have:
public sub setSpeed(byVal s as <B>Integer</B>) 'declaring an interface
end sub
Because this <B>Method</B> is public we can call it through: codice_2. And because setSpeed is declared inside the car <B>Object</B>, it can have access to all the private <B>Attribute</B>s and <B>Method</B>s.
We also need to find out the speed of a car to display to the user, we can do this by creating a get routine:
public function getSpeed() 'declaring an interface (a function as we are returning a value)
end function
Because this <B>Method</B> is public we can call it through: codice_3. And because getSpeed is declared inside the car <B>Object</B>, it can have access to all the private <B>Attribute</B>s and <B>Method</B>s.
In general <B>Attribute</B>s should always be declared as private and only accessible through interfaces, using a setX command to give the private variable X a new value, and using the getX command to return the value of X. You should never directly access X!
Declare a colour <B>Attribute</B> for the car that can only be accessed through an interface
private colour as <B>String</B> 'this must be private!
Write an interface to set the colour
public sub setColour(byVal c as <B>String</B>) 'declaring an interface, make sure it's public!
end sub
Write an interface to return the colour
public function getColour() 'it must be a function to return a value
end function
Create an actor <B>Class</B> with the following:
<B>Class</B> actor
End <B>Class</B>
For the actor <B>Class</B> declared above instantiate:
dim wizard as new actor 'it doesn't have to be named wizard, it could have another name
dim orc as new actor 'it doesn't have to be named orc, it could have another name
wizard.setName("Barry") 'remember to use your get and set routines!
wizard.setHealth(100)
wizard.setLocation(4,5)
orc.setName("Herbert")
orc.setHealth(35)
orc.setLocation(20,2)
orc.displaystats()
Encapsulation is such a common thing that some languages have short cuts for making get and set routines. In VB.NET this involves using a codice_4:
Private _fuel As <B>Integer</B>
Public Property Fuel() As <B>Integer</B>
End Property
As we will never call codice_5 directly it doesn't matter that it has an underscore at the beginning. Using this code we can perform the following <B>Method</B>s without having the fuel <B>Attribute</B> as public:
lada.fuel = 23
Console.Writeline(lada.fuel)
What is the parent <B>Class</B> of car in the above diagram?
Draw an <B>Inheritance</B> diagram for the following <B>Class</B>es:
Draw an <B>Inheritance</B> diagram for the following <B>Class</B>es:
The key difference between procedural and <B>Object</B>-oriented programming is that in <B>Procedural Programming</B>, the lines of code and the data the code operates on are stored separately. An <B>Object</B>-oriented program puts all the data and the process that can be carried out on that data together in one place called an <B>Object</B> and allows restrictions to be placed on how data can be manipulated by the code.
<B>Object</B>-oriented programming can be described as being organised in a way that reflects the real world. For example, in real life you may have an <B>Object</B>, such as a bank. Inside that <B>Object</B> there are various other <B>Object</B>s such as customers and financial transactions. Inside each of those <B>Object</B>s there are a number of data items and behaviours. For example, there are data about customers. These data are handled in a particular way and therefore have to be processed accordingly. For example, one process might be to add new customer data.
Another process might be that money withdrawn needs to be deducted from the balance.
In <B>Object</B>-oriented programming, a banking application would be created to mirror these real-life relationships. So there might be one <B>Object</B> will then contain customer data and all the processes needed for that data.
In most OOP languages <B>Class</B>es are used, this allows the efficiency of programming to be increased.
There are a number of advantages to this approach:
Where Procedure-oriented programming uses procedures to make code easier to write and understand, <B>Object</B>-oriented programming (OOP) goes a step further and uses <B>Object</B>s to make code easier to create and work with.
In OOP, the word "<B>Object</B>" has special meaning: <B>Object</B>s are defined as a specific way of organizing <B>Source Code</B>. Briefly, an <B>Object</B> is the combination of:
"A car could be represented by a Car <B>Object</B>."
"The data might include: colour, manufacturer, top-speed"
"Procedures might include: start_engine, accelerate, brake"
If a program only requires a few lines of <B>Source Code</B> to write down, there is no advantage to using this technique. Procedure-oriented and <B>Object</B>-oriented programming were invented because programs were getting longer and longer, and were difficult to work with. Programmers needed more structure to simplify the programming process.
A program of moderate size and complexity can be simplified using procedures. With especially large or complex programs, procedures are not enough; OOP became popular as a way of handling these very complex programs.
A program may be complex in the raw <B>Source Code</B> - many lines of code, many procedures. Or it may be complex in the way it's written - many human authors, many interactions between different parts. OOP helps with both.
We will look at the detailed reasons for and against once we've covered the key concepts.
OOP started from observing ways of writing Procedure-oriented programs that were more effective (easier to write, had fewer bugs) than others. A few techniques that were optional in Procedure-oriented programming became the core of OOP:
Ordinary programs execute line after line until they reach the end. This is very simple to read through, but as programs become longer it is difficult to read, difficult to maintain, and bugs become more likely.
Procedure-oriented programming is a way of imposing structure onto a program - specifically: adding procedures - so that it is easier to work with.
Almost all programs use procedures to some extent. For instance, we need procedures to display output on the screen, or to read input from the user. But in Procedure-oriented programming, we also create new, customised, procedures as much as possible, to simplify the program itself.
Here's a program that is not procedure-oriented. It uses the "input" procedure, but repeats almost identical lines of code three times:
i1 = input( "First number" )
i2 = input( "Second number" )
result1 = i1 + i2
i3 = input( "First number" )
i4 = input( "Second number" )
result2 = i3 + i4
i5 = input( "First number" )
i6 = input( "Second number" )
result3 = i5 + i6
Here's the same example using Procedure-oriented Programming:
result1 = sum()
result2 = sum()
result3 = sum()
def sum():
When a procedural program encounters a procedural name such as codice_1 on line 1, then the program jumps off, executes the code corresponding to codice_1 and returns to execute line 2.
Adding procedures to a program has several benefits:
In the example above, the new procedure codice_3 asked the user for two numbers, calculated the sum, and returned it. The name of the procedure enabled us to read the code and make intelligent guesses even without reading the contents of the codice_3 procedure.
If a program only requires a few lines of <B>Source Code</B> to write down, there is little or no advantage to using this technique.
In particular, if none of your code is repeated, and there are no sections of inter-related code (eg. the three lines of code for summing two numbers above), then adding a procedure can make the program longer and harder to work with. Unnecessary procedures do not generally improve the program.
Procedure-oriented and <B>Object</B>-oriented programming were invented because programs were getting longer and longer, and were difficult to work with. Programmers needed more structure to simplify the programming process.
A program of moderate size and complexity can be simplified using procedures.
You should have experience of programming solutions to problems. This experience is probably in a language such as: VB.NET, PHP, Python, Java or Pascal and you should be able to quickly understand what code like this would do:
numBananas = 2
numApples = 5
numFruit = numBananas + numApples
So far you have been using Structured programming techniques. Taking a look at the example above, structured languages move from the program line by line, starting at 1, then 2, then 3.
There are many other paradigms in programming, but in this course you will be learning the following types:
Structured programming techniques involve giving the code you write structures, these often involve writing code in blocks such as:
It also involves breaking down problems into smaller problems until routines can be written that execute single tasks. The routines operate on data passed to them through parameters and these routines can be re-used and are often packaged into libraries to save time in development. 
dim x as <B>Integer</B>
x = 7
If x = 2 then
else
end if
Sharing the same features as structured programming techniques, Procedure-oriented programming implement procedures/subroutines to execute common functionality
dim x as <B>Integer</B>
x = 7
x = doubleIt(x)
console.writeline(x)
<B>Object</B>-oriented programming takes the techniques used in structured programming further and combines routines and the data they use into <B>Object</B>s. The data items stored for an <B>Object</B> are called <B>Attribute</B>s and the routines that operate on these <B>Field</B>s are called <B>Method</B>s.
<B>Class</B> Building
<B>Class</B> Program
In <B>Functional Programming</B> programs define mathematical functions. A solution to a problem consists of a series of function calls. There are no variables or assignment statements, but instead there are lists and functions that manipulate these lists. An example of a <B>Functional Programming</B> language is Haskell.
A logic program consists of a set of facts and rules. A knowledge base is built up about a specific subject and an inference engine uses the knowledge base to answer queries which are presented in the form of a goal. Logic programming is often used for artificial intelligence systems.
Event Driven programming refers to your standard Windows Form idea, the program waits in a loop until an event(e.g. the click of a button, or a keystroke). The program then runs the code associated with this event and then returns to its loop, providing that the code did not instruct it to close.
If more than one event occurs, code is queued by the program and run in the order the events were triggered.
An essential part of most games is the ability to use random numbers. These might be used to randomly place gold coins on a map, or to calculate whether you hit a target with a rifle at some distance.
Dim rndGen As New Random()
Dim randomNumber As <B>Integer</B>
randomNumber = rndGen.Next()
The above code will give you a random number between 1 and 2,147,483,647. You might well require a number that is a little smaller. To get a random number between two set numbers, in this case 5 and 10 you can use the following:
randomNumber = rndGen.Next(5,10)
So how exactly can we use this? Take a look at the following game:
Dim rndGen As New Random()
Dim randomNumber As <B>Integer</B>
Dim guess as <B>Integer</B>
randomNumber = rndGen.Next(1,100)
console.writeline("Please guess the random number between 1 and 100")
Do 
Loop While guess <> randomNumber
console.writeline("Well done, you took x guesses to find it!")
Adjust the code above to tell the user how many guesses they took to find the random number. HINT: you'll need a variable
Recursion is a key area in computer science that relies on you being able to solve a problem by the cumulation of solving increasingly smaller instances of the same problem.
An example of recursion in a name is the GNU Operating System, you might well ask what GNU stands for:
Wait a minute, they have defined the name by restating the name!:
Luckily for us, with computer code our recursion should tend towards an end as we are solving increasingly smaller instances of the same problem, we should be tending towards an end. With the GNU example the name always remains the same size, but with the following example there is an end:
Which is pseudocode to describe the process of revising an essay, the revision process involves reading the essay, getting feedback, applying the changes, then revising the slightly better essay. You keep doing this until the essay is complete.
Let's take a look at some computer science examples
A <B>Class</B>ic computer example of a recursive procedure is the function used to calculate the factorial of a natural number:
For example:
Did you notice what I did with the final solution? Instead of writing 5 * 4 * 3 * 2 * 1, I used 5! which elicits the same result. Looking back our definition of why recursion is used, we seem to solve big problems by solving smaller instances of the same problem, so factorials are ripe for recursion:
As we can see, each n! is the product of n * (n-1)!. In summary:
Now let's have a look at how we would write code to solve this:
It looks very simple and elegant. But how does it work?
Let's build a trace <B>Table</B> and see what happens. This trace <B>Table</B> will be different from the ones that you have built before as we are going to have to use a stack. If you haven't read up on stacks you must do so before continuing:
All is going well so far until we get to line 3. Now what do we do? We'll soon have two values of n, one for Function call 1 and one for Function call 2. Using the trace <B>Table</B> as a stack (with the bottom of the stack at the top and the top of the stack at the bottom) we'll save all the data about the function call including its value of n and make note of what line we need to return to when we have finished with factorial(3).
We now have a similar situation to before, let's store the return address and go to factorial(2)
We now have a similar situation to before, let's store the return address and go to factorial(1)
Now we have another problem, we have found an end to the factorial(1). What line do we go to next? As we are treating our trace <B>Table</B> as a stack we'll just pop the previous value off the top and look at the last function call we stored away, that is function call 3, factorial(2), and we even know what line to return to, line 3:
We know that factorial(1) = 1 from the previous returned value. Therefore factorial(2) returns 2 * 1 = 2
Again we'll pop the last function call from the stack leaving us with function call 2, factorial(3) and line 3.
We know that factorial(2) = 2 from the previous returned value. Therefore factorial(3) returns 3 * 2 = 6
Again we'll pop the last function call from the stack leaving us with function call 1, factorial(4) and line 3.
We know that factorial(3) = 6 from the previous returned value. Therefore factorial(4) returns 4 * 6 = 24
We reach the end of function call 1. But where do we go now? There is nothing left on the stack and we have finished the code. Therefore the result is 24.
Another good example is a <B>Method</B> to calculate the Fibonacci numbers. By definition, the first two Fibonacci numbers are 0 and 1, and each subsequent number is the sum of the previous two.:
For example, take the 6th number, 5. This is the sum of the 5th number, 3, and the 4th number, 2.
In mathematical terms, the sequence "F" of Fibonacci numbers is defined by the recursive statement
with the first two values being
Let's try and create a code version of this:
Recursion does have some issues though, consider how much data we had to store on the stack for just 4 function calls. If we were to perform 1000, the memory used would be incredibly large.
Give the output of the following recursive function call recur(6):
function recur(ByVal n as <B>Integer</B>)
end function
Give the output of the following recursive function call recur(4):
function recur(ByVal n as <B>Integer</B>)
end function
Give the output of the following recursive function call recur(6):
function recur(ByVal n as <B>Integer</B>)
end function
An important part of programming is the use of selection, that is the ability to do something if certain criteria is met. This may be as simple as increasing your health bar in a computer game if you eat a chicken drumstick or inserting the cooling rods into the nuclear reactor if the temperature exceeds a certain value.
The most common selection statement is the IF statement, the idea is that you compare a value to some criteria, IF the value and criteria match then you proceed in a certain way, otherwise you do something else.
For example:
The Else part is optional, you can just ignore the commoner! (and dump the Else)
You might also want to test multiple things in the If statement. For example:
We often want to write IF statements that do some kind of comparison or test. We just did exactly that in the example above with codice_1 which tests if the value of the age variable is greater or equal to 18.
Most of these operators you will recognise from learning maths but some are slightly different in computing. The following operators are straightforward:
The most important operator that is different in computing is one that you have already used many, many times probably without even noticing, which is the codice_2 operator. In most programming languages the codice_2 operator is used for assignment, for example if we want to assign the value codice_4 to a variable called codice_5 we write codice_6 which is the same in both VB.NET and Python. These two languages are different when it comes to equals which we saw in the example above testing if the value of the codice_7 variable was equal to codice_8. In VB.NET the equals operator is just codice_2 whereas Python uses codice_10 instead. This can lead to a very common programming mistake when writing Python - if we try to write an IF statement which uses codice_2 by mistake:
we will get an error message similar to this:
Traceback (most recent call last):
  File "python", line 4
      if name = "Queen" and age >= 18 then:
SyntaxError: invalid syntax
Finally we need an operator for not equals. In VB.NET we use codice_12 whereas in Python we use codice_13. Here's an example in the form of a really quite rubbish game:
Write a single IF statement for the following:
Ask a user for their eye colour, if they say green call them a "Goblin", else they must be a different type of monster:
What eyes have thee?
Green
Thou art a Goblin?
Alternatively:
What eyes have thee?
Blue
Pray tell, be thou another form of beast?
dim eyes as <B>String</B>
console.writeline("What eyes have thee?")
eyes = console.readline()
If eyes = "Green" Then
Else
End If
Try the code by inputting "green". It doesn't work! We need to adjust the IF statement:
If eyes = "Green" or eyes = "green" Then 'the Or part makes sure it picks up upper and lower case letters
"alternatively we could use UCase() we'll find out more about this later
If UCase(eyes) = "GREEN" Then 'UCase converts the entire input into capitals
</syntaxhighlight>
How old are you:
11.8
You're probably at secondary school
How old are you:
9
You're not at secondary school
How old are you:
19
You're not at secondary school
Using one IF statement write code to handle the above. HINT: you might need more than one clause in the IF ... THEN section.
dim age as single
console.writeline("How old are you:")
age = console.readline()
If age >= 11 And age < 17 Then
Else
End If
Now for some very simple AI:
How do you feel today: Happy or Sad?
Sad
Have you had some exercise: Yes or No?
No
Go for a walk, you might feel better
In all other situations the program should say: "Sorry I don't know how to help". Using one IF statement write code to handle the above:
dim feel as <B>String</B>
dim exercise as <B>String</B>
console.writeline("How do you feel today: Happy or Sad?")
feel = console.readline()
console.writeline("Have you had some exercise: Yes or No?")
exercise = console.readline()
If feel = "Sad" AND exercise = "No" Then
Else
End If
Sometimes when we are trying to write complex code we will need to use a combination of IFs. In the example above we might want to still treat an under-age queen with respect, an under-age commoner with contempt, serve an 18+ queen with respect, and serve an 18+ commoner with common manners. In fact it seems as if we need 4 different IF statements. We could solve it like this:
If name = "Queen" And age >= 18 Then
End If
If name = "Queen" And age < 18 Then
End If
If name <> "Queen" And age >= 18 Then '<> means not equal (so does !=)
End If
If name <> "Queen" And age < 18 Then
End If
if name == "Queen" and age >= 18:
elif name == "Queen" and age <18:
elif name != "Queen" and age >= 18:
elif name != "Queen" and age <18:
This seems awfully cumbersome and we will now look a more elegant way of solving this, using Nested IF's. First of all, nested means placing one thing inside another, so we are going to place an IF inside another.
If name = "Queen" Then
Else
End If
if name == "Queen":
else:
Try the examples above with the following data, both solutions should provide the same answer:
Write nests of IF statements for the following:
A car can be hired when a person is over 21 and not intoxicated.
How old are you?
22
Good, that's old enough. Have you been drinking?
Yes
Come back tomorrow
It should also handle:
console.writeline("How old are you?")
20
console.writeline("You're too young I'm afraid. Come back in a few years")
dim age as <B>Integer</B>
dim drinking as <B>String</B>
console.writeline("How old are you?")
age = console.readline()
if age >= 21 then
else
end if
Create a login screen to do the following:
Enter username
Jonny5
RECOGNISED! Enter password:
Alive
Please enter Jonny5
If they get the username wrong it should immediately kick them out and not ask for the password. If they get the password wrong it should kick them out.
dim name as <B>String</B>
dim password as <B>String</B>
console.writeline("Enter username:")
name = console.readline()
if name = "Jonny5" then
else
end if
As you should be aware by now a lot of programming is doing things as quickly as possible. You might be fed up with writing long if statements, having to keep hitting that enter key to make new lines. There is a faster way to code: single line IF statements.
This is a much shorter way of writing:
But be careful, code like this can often be harder to read and therefore debug. Once it has been through the <B>Interpreter</B> / <B>Compiler</B> it almost certainly won't be running any faster either, it's just there for you to save a little space. For the exam keep to the longer version.
The other type is the Case statement, this can be summarised by several if statements where the value is compared to several criteria and the action of first criteria matched is performed, otherwise a default action may be performed.
However, most programming languages will give you a shortened way of implementing a case statement without the need to write all of these if statements. For example in VB.NET we use the codice_14
Dim number As <B>Integer</B> = 5
Select Case number
End Select
Between 4 and up to 8
Create a program where someone types in the name of an animal and it outputs the sound the animal makes. The animals it should handle are:
Try and complete this task by only using 5 case statements.
Dim animal As <B>String</B>
animal = console.readline()
Select Case animal 
End Select
You are now going to use a case statement to create an electronic piano.
Create a case statement in the code below, that will play the notes written above. The while true loop means that the code will never end and will continue for ever. For bonus points try and get the code to accept both upper and lower case inputs
'instruction statement here
While True
While End
Remember to make sound you use:
console.beep(2000,500) 'beep at 2000Hz for 0.5 seconds
dim note as char
console.writeline("please insert a musical note:")
While True
End While
We've previously discussed the benefits of using functions and subroutines when programming, but since each function is stored independently, the computer needs to be able to store what it has currently been working on (including its variables and parameters) and put it aside, so it can go to the new function and then be able to return to where it was. This is where a stack frame is used.
Consider the following program:
Sub Main
End Sub
Sub openFile(fileName as <B>String</B>)
End Sub
Function fileExists(fileNameToCheck as <B>String</B>) as <B>Boolean</B>
End Sub
The program tries to open a file (called birthday_picture.png) by calling the subroutine openFile. This subroutine calls a function to make sure the file exists and based on the <B>Boolean</B> value it returns (either True or False), the subroutine will continue to open the file or print out an error message. When the file is opened (or in the case the file doesn't exist, an error is printed out) the program writes a message before finishing.
To understand why a stack frame is needed, consider the very first subroutine the program starts in: Main. Once the program starts executing, it will look at the first line of instructions and go to the subroutine openFile. However, the computer needs to remember to come back to Main once done with openFile, otherwise it will never get to printing out the goodbye message! Similarly if we look at openFile, it has a call to fileExists, but the computer also needs to know to go back to openFile, and at the right point within openFile, otherwise it may try to open a file that doesn't exist!
The way the computer keeps track of all this is by creating a stack frame every time it gets called to another subroutine or function. Within this stack frame, it stores:
A diagram may help you visualise this:
As the computer encounters a function or subroutine call, it stores the local variables, parameters and current address in memory and adds it to the stack. Once it is done with the call, it removes that frame from the stack and looks at the return address of the next frame (which would belong to the function that called it) and resumes executing at that point. This goes on until the stack is empty (i.e., it returns to the first subroutine in the program) and the program finishes.
Very popular examination questions involve manipulating <B>String</B>s. These simple functions will help you with this task.
This function is used to find the length of any <B>String</B> you pass it, counting all the <B>Character</B>s, including the spaces. In visual basic to find the length of a <B>String</B> we use the codice_1 function that returns the <B>Integer</B> length of the <B>String</B> that it has been passed:
someText = "Gary had a little lamb"
Console.writeline(Len(someText))
22
This function allows us to find the position of an item within a given <B>String</B> and returns the position's location. In visual basic this is performed by the following command:
codice_2
For example we might want to find the location of an end of a sentence by looking for a fullstop:
someText = "Gary had a little lamb. His fleece was white as snow."
Console.writeline(InStr(someText,"."))
23
We can also use this command to search for <B>String</B>s within <B>String</B>s. For example if we were to look for to see if a sentence contained a certain name:
someText = "Gary had a little lamb. Dave's fleece was white as snow."
Console.writeline(InStr(someText,"Dave"))
25
If the search item is not contained in the <B>String</B> then it will return 0
someText = "Gary had a little lamb. Dave's fleece was white as snow."
Console.writeline(InStr(someText,"Julie"))
0
This function allows you to snip items out of a <B>String</B> and return a sub<B>String</B>. Visual Basic uses the following command:
codice_3.
For example we might want to find the local number from a landline phone number we have been given. We'll have to ignore the area code:
phone = "(01234)567890"
local = phone.Sub<B>String</B>(7, 6)
console.writeline(local)
567890
This function allows you to stick <B>String</B>s together (concatenate) so that you can start to build <B>String</B>s using variables. Visual Basic uses the following command:
codice_4
For example we might have a users name stored in a variable codice_5 and a greeting that we would like to give them:
name = "Charles"
console.writeline("Hello " & name & ". How are you today?")
Hello Charles. How are you today?
When you declare a variable you give it a datatype. This datatype restricts the values that you can place into the variable. For example:
This seems to make sense, but what would happen when you try to place a real number into a <B>Integer</B>:
dim age as <B>Integer</B>
age = 34.3
console.writeline(age)
34
This might seem OK, but in other lanuages we might run into trouble. To perform this we would have to convert from one datatype to another:
dim age as decimal
age = 34.3
console.writeline(age)
age = CInt(34.3) 'converts the decimal into an <B>Integer</B>
console.writeline(age)
34.3
34
Write a short program to tell someone how many letters they have in their name (just in case they don't know!), for example:
Input: Fremlin
Hello Fremlin, you have 7 letters in your name.
Some people have stupidly typed their firstname and their surname into a <B>Database</B>, write some code to display the first name, then their surname
dim fistname as <B>String</B> = "Elizabeth Sheerin"
Input: Elizabeth Sheerin
Firstname: Elizabeth
Surname: Sheerin
A telephone number has been typed into a computer as a <B>String</B>: (01234)567890
dim phonenum as <B>String</B> = "(01234)567890"
Write some code to output the number without brackets:
Input: (01234)567890
Output: 01234567890
A similar question to the one above, telephone numbers are currently stored in a very unreadable format: 01234567890, completely missing off the area code. Can you convert them to display the first 5 figures are the area code:
dim phonenum as <B>String</B> = "01234567890"
This should then be output as:
Input: 01234567890
Output: (01234)567890
A palindrome is a word, phrase or number that may be read the same way in either direction. For example 1234321, RACECAR, TOOT and NUN. You need to write a program that checks to see if any input given is a palindrome and let the user know: 
Input: NUN
That is a palindrome!
Input: nune
That is NOT a palindrome
You will often want to check the format of a <B>String</B> being input and if it is incorrect you will want it to be submitted again. For example you might want someone to input the name of their best friend, meaning that they shouldn't be inputting any letters or spaces, and it should start with a capital letter:
Name of best friend: Beanie(CORRECT)
Name of best friend: jonny5(STOP THIS)
To do this we can match the input <B>String</B> against some rules, regular expressions or regex, in this case we only want <B>Character</B>s from the alphabet:
Breaking apart the rule:
Another example might be checking for the correct spelling of a famous composer:
We can check this using the pattern codice_13. Let's take a look at what this means:
Most regular expression tools provide the following operations to construct expressions.
<B>Boolean</B> "or"
A vertical bar separates alternatives. For example, codice_22 can match "gray" or "grey".
Grouping
Parentheses are used to define the scope and precedence of the operators (among other uses). For example, codice_22 and codice_24 are equivalent patterns which both describe the set of "gray" and "grey".
Quantification
A quantifier after a token (such as a <B>Character</B>) or group specifies how often that preceding element is allowed to occur.
Most programming languages have regular expression functions. In VB.NET we can use regular expressions by using the Regex routine:
' this code enforces the name rule from earlier
Dim name As <B>String</B>
Console.Write("Name of best friend: ")
name = Console.Readline()
' match the <B>String</B> against a regular expression
Dim m As Match = Regex.Match(name, "[A-Z][a-z]+")
If (m.Success) Then
Else
End If
A common use for regular expressions is in checking that you have a correctly typed email address. A rule for that is this: codice_31.
You can find out more about Regular expression on wikipedia and you will cover regular expressions in more detail in A2.
to/from <B>Integer</B>, real, date/time.
To save you rewriting lots of code again and again you might use a sub routine, there are two types: Procedures and Functions. For example in a program you wanted to know today's date, instead of having to write a separate sub routine to calculate the date each time you wanted to work it out, you would probably use codice_1. This is a function, when you call it, it returns a value. It was written by someone else and you can keep reusing it as many times as you want. Any program written in industry will use sub routines calling things like: codice_2 . Procedures and Functions allow for you to:
An easy way to tell the difference between a Procedure and a Function is to look at the names:
Declarations are where you state the name of your procedure/function and the code that you want to execute. Even if you declare a procedure/function, it doesn't mean that the code will run, you need a "Call" to actually get the code to execute.
Sub printNumber()
End Sub
Functions are slightly different, as they return values you must include a return function in their declaration. And you must specify the datatype of the value being returned, in the case below that is an Inteteger specified by: codice_4
Function printNumber() as <B>Integer</B>
End Function
Calls allow you to run the code declared in a procedure/function. You can build up all sorts of programming structures by making Calls part of the code. Remember that Functions are fun, so you should be doing something with the returned value.
printNumber() ' a procedure call
console.writeline(printNumber()) ' a function call
dim x = MaximumSpeed() ' another function call
Parameters allow you to pass values to the procedures and functions that you declare, you can pass all sorts of data as parameters and you can pass as many as you like.
'declaration
Sub printNumber(number1 as <B>Integer</B>) 'one parameter
End Sub
'call
printNumber(4)
The output would be:
4
'declaration
Sub printNameAge(name as <B>String</B>, age as <B>Integer</B>) 'two parameters
End Sub
'call
printNameAge("Mounir", 17)
The output would be:
Mounir is 17 years old
'declaration
function squareNumber(number1 as <B>Integer</B>) as <B>Integer</B> 'one parameter
End Function
'call
console.writeline(squareNumber(4))
Note that as it's a function, we had to include the call in an equation. It returns a value, it can't sit on its own. The output would be:
16
What is the difference between a function and procedure?
Functions return values, Procedures may or may not return a value.
Why would you use subroutines (functions and procedures) in your code?
Write a function declaration with the identifier of Avg that will accept 3 numbers (num1, num2, num3) and return the average:
Function Avg(num1, num2, num3)
End Function
For the above function, write code with a function call to work out the average of three numbers input by a user:
num1 = 4
num2 = 7
num3 = 10
Average = 7
dim a, b, c as <B>Integer</B>
console.write("input num1 = ")
a = console.readline()
console.write("input num2 = ")
b = console.readline()
console.write("input num3 = ")
c = console.readline()
console.write("Average = " & Avg(a,b,c))
Sub nameTimes(name, num)
End Sub
For the procedure above list:
The parameter that you are passing to a procedure or function is referred to. That means you are pointing at it, you are going to directly change its value and anything that happens to it within the procedure or function will change the original value.
Dim number1 as <B>Integer</B> = 123
Sub Main()
End Sub
Sub IncPrintNumber(ByRef num as <B>Integer</B>)
End Sub
The output would be:
123
124
124
The parameter that you are passing to a procedure or function is copied. That means you are taking a copy of the original value put into the procedure or function call. Anything that happens to it within the procedure or function will NOT change the original value.
Dim number1 as <B>Integer</B> = 123
Sub Main()
End Sub
Sub IncPrintNumber(ByVal num as <B>Integer</B>)
End Sub
This saves a local variable of the number1 value, storing it in num, it is only valid inside the IncPrintNumber sub routine
The output would be:
123
124
123
Sub Main()
End Sub
Sub Add(ByXXX num1 as <B>Integer</B>, ByXXX num2 as <B>Integer</B>)
End Sub
What is the output of the above code when codice_5?
7
What is the output of the above code when codice_6?
15
Sub Swap(ByRef p as <B>String</B>, ByVal q as <B>String</B>)
End Sub
Sub Main()
End Sub
What is the output of the above code?
hello - goodbye
hello - hello
What is the difference between a parameter passed by Value and a parameter passed by Reference?
A parameter passed by value copies the value of the parameter passed into the sub routine. Any changes made to this value do not impact on the original value.
A parameter passed by Reference passes a link to a variable. Any changes made to the parameter in the sub routine change the original variable.
Let's take a look at this program:
you might be expecting both programs to print out:
But instead they say:
Hello Peter you are 29 years old
This also means you are 348 months old
Bye Peter!
What friendly programs! 
Let's break the VB.NET program down line by line:
What you have just seen is a declaration of two variables, "name" and "age". A variable is a known or unknown value that has been given a symbolic name. This allows the name to be used independently of the value. It is advisable that a meaningful name for readability and convenience. This name is known as the identifier. To declare a variable in VB.NET we do the following:
Dim identifierName As datatype
Most programming languages have rules about identifiers: they generally have to use only Alphanumeric <B>Character</B>s (a..Z0..9) and some languages are case sensitive (name != Name).
Once you have declared a variable you need to assign it a value. Assignment, in programming terms, is the giving of a value to a variable, for example:
identifierName = 7
Here we are assigning the value codice_10 to the variable codice_11, so when we use codice_11, we mean the value codice_10:
dim identifierName as <B>Integer</B>
identifierName = 7
console.writeline("The value stored in identifierName is: " & identifierName)
Producing:
The value stored in identifierName is: 7
Update the code above to display the age in days, hours, minutes and seconds. No use of calculators! Use the code to do all the work for you.
dim name as <B>String</B>
dim age as <B>Integer</B>
name = "Syeda"
age = 31
console.writeline("Hello " & name & " you are " & age & " years old")
console.writeline("This also means you are " & age * 12 & " months old")
console.writeline("This also means you are " & age * 365 & " days old")
console.writeline("This also means you are " & age * 365 * 24 & " hours old")
console.writeline("This also means you are " & age * 365 * 24 * 60 & " minutes old")
console.writeline("This also means you are " & age * 365 * 24 * 60 * 60 & " seconds old")
console.writeline("Bye " & name & "!")
console.readline()
Give a good reason why you made age a variable in the previous code
To keep track of a changing value that is used in many places but only needs to be updated in one.
What will the following code output:
dim x, y as <B>Integer</B>
x = 45
y = 9
console.writeline("The sum of x + y = " & x + y)
console.writeline("y goes into x " & x / y & " times")
console.writeline("x multiplied by y = " & x * y)
console.readline()
The sum of x + y = 54
y goes into x 5 times
x multiplied by y = 405
A couple of things to note here:
Let's break the Python program down line by line:
What you have just seen is a declaration of two variables, "name" and "age". A variable is a known or unknown value that has been given a symbolic name. This allows the name to be used independently of the value. It is advisable that a meaningful name for readability and convenience. This name is known as the identifier. To declare a variable in Python we simply create it with a meaningful name.
Most programming languages have rules about identifiers: they generally have to use only Alphanumeric <B>Character</B>s (a..Z0..9) and some languages are case sensitive (name != Name).
Once you have declared a variable you need to assign it a value. Assignment, in programming terms, is the giving of a value to a variable, for example:
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
This is for the new Computer Science Specification. Keep in mind that there is another Comp1 exam for Computing (for retakes?) though this specific page is for the new course.
This is where suggestions can be made about what some of the questions might be and how we can solve them.
Please be respectful and do not vandalise or tamper with the page, as this would affect students' preparation for their exams!
C# Solution:
Not Answer :
// Kieran South
// Animal <B>Class</B>
protected double NaturalLifespan;
protected int ID;
protected static int NextID = 1;
protected int Age = 0;
protected double ProbabilityOfDeathOtherCauses;
protected double ProbabilityOfDeathDisease;
protected bool IsAlive;
protected static Random Rnd = new Random();
public Animal(int AvgLifespan, double AvgProbabilityOfDeathOtherCauses, int Variability)
// CheckIfKilledByOtherFactors <B>Method</B> in Animal <B>Class</B>
public virtual bool CheckIfKilledByOtherFactor()
Delphi/Pascal Solution
Answer :
function Animal.CheckIfKilledByOtherFactor() : <B>Boolean</B>;
//Harry Barron, Faringdon Community College
Java Solution
Answer :
//I spiced this up - any rabbit has a 1% chance of contracting disease at any simulation.
//If the rabbit Above/Below it in the Rabbits Array is infected then it has a 25% chance and if both do it's a 50% chance.
//If a rabbit is infeced it has a 10% chance to die, no matter how it was infected.
//Almost certainly won't come up in the exam, but good practice.
Python Solution:
Answer :
VB.NET Solution
Answer :
Private Sub disease(ByVal ShowDetail As <B>Boolean</B>, ByVal diseasekilled As <B>Boolean</B>, ByVal ProbabilityOfdisease As Double)
Public Overridable Function CheckIfKilledDisease(ByVal ProbabilityOfDeathdisease As Double)
Public Function setdiseasekilled(ByVal deathcount As <B>Integer</B>)
//Call the following in the 'Advance Generation' Sub and declare the variables:
If RabbitCount > 0 Then
This code also allows for the disease spreading, and with each turn the disease will spread and there is a higher chance of rabbits dying.
VB.NET Solution (using <B>Object</B>-oriented programming)
Answer :
Animal <B>Class</B>:
Private diseased As <B>Boolean</B>
Public Overridable Sub Inspect()
Public Function Checkifinfected()
Warren <B>Class</B>:
Private diseased As <B>Boolean</B> = False
Public Sub Inspect()
Public Function Checkifinfected()
Public Sub Becomeinfected() '(validation also added to prevent multiplier from being re-used)
Simulation <B>Class</B>:
Private Sub AdvanceTimePeriod()
//-Lots of code that doesn’t need to be shown-
Private Sub CreateLandscapeAndAnimals(ByVal InitialWarrenCount As <B>Integer</B>, ByVal InitialFoxCount As <B>Integer</B>, ByVal FixedInitialLocations As <B>Boolean</B>)
This code allows for the disease to spread between warrens and animals.
It has no symptoms, but increases the ProbabilityOfDeathOtherCauses variable by 10%.
This code was VERY QUICKLY made by Shaun Aziz and almost definitely contains lots of errors.
Feel free to fix them and add your name below(preferably along with what you fixed):
Nobody has yet to fix anything. :(
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
//Start of Fire
//End of Fire
//Harry Barron, Faringdon Community College
Java Solution
Answer :
This <B>Method</B> needs to be called from somewhere. I added an option in the simulation menu to execute the storm code. If you call the storm via the menu like I did, then other factors such as the rabbits dying from natural causes and being eaten still happen for the warrens affected.
// Joel LB, Twyford Sixth Form
Python Solution:
Answer :
"""FIRE TRIGGER BASED ON RANDOM CHANCE
"""FIRE SUBROUTINE"""
VB.NET Solution
Answer :
C# Solution:
Answer :
//Charles' Linq solution is slow, since it iterates through the entire range and checks for equality.
//Other solutions use a try-catch block, which is bad practice, since exception throwing should be avoided
//unless a genuinely unforeseeable problem has occurred.
//My Solution: by (((Samuel Collins))):
private int InputCoordinate(char Coordinatename)
//Note: <B>String</B> interpolation requires C# 6/7. The same behaviour can be achieved using + symbols in earlier versions.
//Written by Charles Batten using Linq for coordinate range chceking
using System.Linq;
private int InputCoordinate(char Coordinatename)
//In Response To Luke's Attempt, I attempted to solve the problem and developed the following solution.
//Declyn Sealey, St Mary's College
//For a better solution:
//for a non monkeyed together solution that doesn't use unnecessary breaks
Delphi/Pascal Solution
Answer :
// Add SysUtils to uses
function Simulation.InputCoordinate(CoordinateName : Char): <B>Integer</B>;
//Graveney School MVP's
Java Solution
Answer :
//This is the alternative solution and works by checking the coordinates for menu options 3 and 4, this is worse but still works:
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
//Rest of AdvanceTimePeriod() for Foxes
<B>Class</B> Warren
//Other Variables
private void MateRabbits(bool ShowDetail)
//Alex Marchant, UTC Reading
Delphi/Pascal Solution
Answer :
//Global Variable
//Within Warren.MateRabbits
//Within Simulation.New
//Callum, Exeter College
Java Solution
Answer :
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
procedure Main();
Java Solution
Answer :
public <B>Class</B> Main
} // Gman, Reading School
Python Solution:
Answer :
def Main():
VB.NET Solution
Answer :
C# Solution:
Answer :
public Simulation(int LandscapeSize, int InitialWarrenCount, int InitialFoxCount, int Variability, bool FixedInitialLocations)
//Logan Dibnah, St Mary's College
Delphi/Pascal Solution
Answer :
//Harry Barron, Faringdon Community College
Java Solution
Answer :
if (MenuOption == 3)
Python Solution:
Answer :
Alternative Answer:
if MenuOption == 3:
Python Alternative Solution:
Answer :Solution: 
VB.NET Solution
VB.NET Solution
Answer :
If MenuOption = 3 Then
C# Solution:
Answer, includes an eagle with an adapted fox <B>Class</B>, eagle has 25% chance of consuming closest fox, has the same fox <B>Attribute</B>s and working food/death system (it is quick and dirty, many improvements should be made):
<B>Class</B> Eagle : Animal
// Harry G Poole High School
Delphi/Pascal Solution
Answer is incomplete at the moment. Will finish it in 2 days (Some Functionality added see below the first answer):
//This <B>Method</B> only allows eagle to kill fox. There is not reporoduction, death or food units for eagle. This can be implemented but takes time.
//Also if you make any changes to the constuctors or procedures in the <B>Class</B> declaration, you must change them when you implement that constructor or procedure 
// In the fox <B>Class</B> add 'killedbyeagle' parameter to AdvanceGeneration
//Create a new <B>Class</B>
Type Eagle = <B>Class</B>(Animal) //Creating the Eagle <B>Class</B>
end;
//Add to the Location <B>Class</B> under Public
//Add to the simulation <B>Class</B> under Private
Eaglecount:<B>Integer</B>;
killedbyeagle:<B>Boolean</B>;
Procedure EaglesEatFoxes(FoxX:<B>Integer</B>;FoxY:<B>Integer</B>); // Eats Foxes procedure
//Add parameter to CreateLandscapeAnimals as shown below
procedure CreateLandscapeAndAnimals(InitialWarrenCount : <B>Integer</B>; InitialFoxCount : <B>Integer</B>; FixedInitialLocations : <B>Boolean</B>; InitialsEaglesCount:<B>Integer</B>);
//Add parameter to the constructor under Public in Simulation <B>Class</B> as shown below
constructor New(LandscapeSizeInput : <B>Integer</B>; InitialWarrenCount : <B>Integer</B>; InitialFoxCount : <B>Integer</B>; VariabilityInput : <B>Integer</B>; FixedInitialLocations : <B>Boolean</B>; InitialEaglesCount:<B>Integer</B>);
//Add this after Fox.New constructor
Constructor Eagle.New(Variability :<B>Integer</B>);
begin
self.New(DefaultLifespan, DefaultProbabilityDeathOtherCauses, Variability); //Just creates the Eagle and initalises some values
End;
//Modify the first part Fox.AdvanceGeneration
procedure Fox.AdvanceGeneration(ShowDetail : <B>Boolean</B> ; killedbyeagle:<B>Boolean</B>);
// Add to the Location.New Constructor
Eagle:=nil;
//Add this to the Simulation.New constructor after FoxCount
Eaglecount:=0;
//using your code outlined above i managed to implement the eagle further into the program where it displays on the screen and kills foxes
//add this code to the main procedure after the number of foxes 
write('Initial number of eagles: ');
readln(InitialeagleCount);
//add this to the Simulation.CreateLandscapeAndAnimals procedure
var
// add this to the else statement under the fox creation
for e := 0 to InitialEagleCount - 1 do // add eagles into the landscape
//add this to the Simulation <B>Class</B>
procedure CreateNewEagle(); // create the new eagle in the simulation
//create a new procedure in simulation to create the eagle similar to the fox
procedure Simulation.CreateNewEagle(); // create new eagle
//edit the display so that it looks nicer inside the Simulation.DrawLandscape procedure
//also add in under the fox input
//in Simulation.AdvanceTimePeriod add this variable
eaglespotted : <B>Boolean</B>;
//and add this at the start of the fox loop 
// form the example i changed the EaglesEatFoxes to a function that returned <B>Boolean</B> like so
Function EaglesEatFoxes(FoxX : <B>Integer</B>; FoxY : <B>Integer</B>): <B>Boolean</B>; // function return <B>Boolean</B>
// the then edited code for the simulation.EaglesEatFoxes
function Simulation.EaglesEatFoxes(FoxX: <B>Integer</B>; FoxY: <B>Integer</B>): <B>Boolean</B>; // calculates a random value
//this then makes it possible for the eagle to spot and kill the fox, the eagle still has no food needed and cannot die but adds some functionality
//Henry Atkins, Oakwood Park Grammar
Java Solution
Answer :I came up with this as a quick test. I'm sure this could be done in a more efficient way but this does work. More instructions near the bottom of this!
<B>Class</B> AlexHunter extends Animal {
// Call the findFoxes <B>Method</B> in the AdvanceTimePeriod <B>Method</B> in the Simluation <B>Class</B> at the beginning and then put the below line of code just before the if(showdetail) condition:
// Hope that makes sense!
// Harnaam Jandoo - Reading School
Python Solution:
Answer :
<B>Class</B> Location:
self.__EagleCount = 0
<B>Class</B> Eagle(Animal):
KilledByEagle = False
for e in range(0, 5):
def CheckIfKilledByOtherFactor(self):
def __EaglesEatFox(self, foxX, foxY):
if self.__EagleCount > 0:
VB.NET Solution
Answer :
//Ben Sosteric Riddlesdown
Dim InitialEagleCount As <B>Integer</B>
<B>Class</B> Location
<B>Class</B> Simulation
//Under the same sub
If MenuOption = 5 Then
//Under same sub
Private Sub CreateLandscapeAndAnimals(ByVal InitialWarrenCount As <B>Integer</B>, ByVal InitialFoxCount As <B>Integer</B>, ByVal InitialEagleCount As <B>Integer</B>, ByVal FixedInitialLocations As <B>Boolean</B>)
Landscape(3, 7).Eagle = New Eagles(Variability, 45)
Private Sub CreateNewEagle()
If Not Landscape(x, y).Eagle Is Nothing Then
<B>Class</B> Eagles
C# Solution:
Includes a new procedure and appended AdvanceTimePeriod procedure, only problem being there is a chance foxes could be moved twice, a <B>Boolean</B> value in the fox <B>Class</B> which signifies if they have been moved that period or not would solve this. Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
 for x in range (0, self.__LandscapeSize):
 def __FoxMovesToWarran(self,FoxX,FoxY):
 def MoveThisPeriod(self): 
VB.NET Solution
Answer :
'Extension to the answer 2 code in the below problem
'View that problem first to get all of the code to make this work
'Create these 2 functions in the simulation <B>Class</B>
'J.M, Year 13 student
C# Solution:
Answer :
//In the simulation <B>Class</B>:
private void AdvanceTimePeriod()
//In the Fox : Animal <B>Class</B>:
public bool MoveFox()//Move Fox ------------------------------------------------------------------------------
// Will Anderson, The Harvey Grammar School
// Edited by JW, The Harvey Grammar School
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :#IN THE ADVANCEPERIOD
if not self.__Landscape[x][y].Fox is None:
def __init__(self, Variability):
VB.NET Solution
Answer :
Answer 2:
Private Sub AdvanceTimePeriod()
'Addition to the fox <B>Class</B>
'J.M, Year 13 student
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
<B>Class</B> Fox extends Animal {
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
<B>Class</B> Fox : Animal
// In the "public bool ReproduceThisPeriod() <B>Method</B>
public bool ReproduceThisPeriod()
// Adam Williams, The Harvey Grammar School
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
public void GiveFood(int FoodUnits, double ReproductionProbability) {
Python Solution:
Answer :
def AdvanceGeneration(self, ShowDetail):
VB.NET Solution
Answer :
<B>Class</B> Fox
End <B>Class</B>
'Mohammad Noyan Choudhury, City University of London
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
<B>Class</B> Location:
<B>Class</B> Simulation:
def Main():
<B>Class</B> Mountain():
def __DrawLandscape(self):
def __CreateLandscapeAndAnimals(self, InitialWarrenCount, InitialFoxCount, FixedInitialLocations,InitialMountainCount):
def __CreateNewMountain(self):
 def __CreateNewWarren(self):
Charles Naden-Lamb Fallibroome Academy 
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
<B>Installation</B> : Past this <B>Method</B> in the Simulation <B>Class</B>
private void BridgeMeteor() {
<B>Installation</B> : Call the <B>Method</B> in AdvancedTimePeriod() just before DrawLandscape()
<B>Installation</B> : Now paste the Meteor <B>Class</B> in the very bottom of the code
<B>Class</B> Meteor {
Python Solution:
Answer :
<B>Class</B> Location:
def __AdvanceTimePeriod(self):
def __DrawLandscape(self):
<B>Class</B> Meteor:
VB.NET Solution
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
<B>Class</B> Location:
<B>Class</B> DangerZone:
for x in range (0, self.__LandscapeSize):
 def __CreateLandscapeAndAnimals(self, InitialWarrenCount, InitialFoxCount, FixedInitialLocations):
<B>Class</B> Fox(Animal):
VB.NET Solution
Answer :
This part of the code is inspired by the computer survival game 'Don't Starve'. It features many improvements and additions to the code, some which have already been completed above. But the main feature is transforming the simulation into a game, by allowing the user to move around the landscape and interact with the Warren's, Foxes and any other Entities you may have implemented.
The list of challenges are as follows: 
Python Solution:Reign Of The Giant Python Solution
Thomas O'Keeffe (BEEF CORP)
Queen Elizabeth School,Kirby Lonsdale
Location <B>Class</B>
<B>Class</B> Location:
New Player <B>Class</B>
<B>Class</B> Player:
New Simulation Menu
Fox Fight <B>Method</B>s
Move Player and Other <B>Method</B>s
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
def __InputCoordinate(self, CoordinateName):
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
11.1 - Program code for Location <B>Class</B>.
<B>Class</B> Location:
11.2 - Program code for CreateLandscapeAndAnimals subroutine from the Simulation <B>Class</B>.
 def __CreateLandscapeAndAnimals(self, InitialWarrenCount, InitialFoxCount, FixedInitialLocations):
11.3 - Program code for DrawLandscape subroutine from the Simulation <B>Class</B>.
 def __DrawLandscape(self):
11.4 - Program code for CreateWarren and CreateNewFox subroutines from the Simulation <B>Class</B>.
C# Solution:
Answer :
Delphi/Pascal Solution
Answer :
Java Solution
Answer :
Python Solution:
Answer :
This is for the new Computer Science Specification.
This is where suggestions can be made about what some of the questions might be and how we can solve them.
Please be respectful and do not vandalise or tamper with the page, as this would affect students' preparation for their exams!
State the name of a user defined subroutine - 
State the name of an identifier for an array variable - Tiles, Contents, T<B>String</B>Array, T<B>Integer</B>Array
Give an example of instantiation - Tile.Create, TTileDictionary.Create?
Give an example of a sub<B>Class</B> that returns - 
(1) - An <B>Integer</B> - TTileDictionary
(2) - A <B>Boolean</B> value - QueueOfTiles.IsEmpty
(3) - A <B>String</B> - QueueOfTiles.Remove, GetStarttingHand
Give an identifier for a <B>Class</B> using composition - 
State the name of an identifier for a sub<B>Class</B> - 
Give the name of a built in function - 
Give an example of an assignment statement - 
State the name of an identifier for a sub<B>Class</B> - 
Give a name of a sub<B>Class</B> that uses iteration and give an example - AddEndOfTurnTiles (For Count := 1 to NoOfEndOfTurnTiles) DO CheckWordIsValid(While...Do)
Give the name of a sub<B>Class</B> that uses selection - GetScoreForWord(If Length(word)>7 then Score := Score+20 etc..)
Give the name of a sub<B>Class</B> that uses exception handling - LoadALlowedWords (Try...Finally)
Why has Try...Finally been used - 
Name the subroutine that uses a <B>Linear Search</B> <B>Algorithm</B> - CheckWordIsValid (Follow up) - Give the time complexity of a <B>Linear Search</B>- O(n), Disadvantage of <B>Linear Search</B> - Has to look through each word step by step to find if the word is valid therefore inefficient 
Recursion - ?
-Feel free to answer and add questions- 
Change the distribution of letters so that there are 50% vowels and 50% consonants
public void Add()
This is not exactly 50:50, I know..
The new distribution will be 10:21
procedure QueueOfTiles.Add();
//Performance wise, this isn't the most efficient technique, it just repeatedly
//tries new letters until it gets the kind it wants vowel/consonant, but it does
//require minimal typing, and AQA isn't going to benchmark anything. 
void add() {
 def Add(self):
Change the distribution of letters so that more common letters like 'E' are more likely to be put into a hand than 'Z'
const
//Could alternatively be a local variable, but this seemed likely to be marginally kinder to memory
procedure QueueOfTiles.Add();
def Add(self):
OR:
def Add(self): 
An option to shuffle the letter in the hand of the player, if they are in a different order it might help to find a word.
public static <B>String</B> SuffleLettersInHand(<B>String</B> PlayerTiles)
private static <B>String</B> GetChoice() //Asks and <B>Record</B>s the users game choice
private static void HaveTurn(<B>String</B> PlayerName, ref <B>String</B> PlayerTiles, ref int PlayerTilesPlayed, ref int PlayerScore, Dictionary<char, int> TileDictionary, ref QueueOfTiles TileQueue, List<<B>String</B>> AllowedWords, int MaxHandSize, int NoOfEndOfTurnTiles)
procedure ShufflePlayerTiles (var PlayerTiles : <B>String</B>);
var
function GetChoice() : <B>String</B>;
procedure HaveTurn(PlayerName : <B>String</B>; var PlayerTiles : <B>String</B>; var PlayerTilesPlayed : <B>Integer</B>; 
<B>String</B> shuffleHand(<B>String</B> playerTiles) {
def SuffleLettersInHand(PlayerTiles):
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles):
Allow players to skip a turn and end their turn by drawing three or more letters
static int RandomNumber = 3;
private static void AddEndOfTurnTiles(ref QueueOfTiles TileQueue, ref <B>String</B> PlayerTiles, <B>String</B> NewTileChoice, <B>String</B> Choice)
private static <B>String</B> GetChoice()
private static void HaveTurn(<B>String</B> PlayerName, ref <B>String</B> PlayerTiles, ref int PlayerTilesPlayed, ref int PlayerScore, Dictionary<char, int> TileDictionary, ref QueueOfTiles TileQueue, List<<B>String</B>> AllowedWords, int MaxHandSize, int NoOfEndOfTurnTiles)
procedure AddEndOfTurnTiles(var TileQueue : QueueOfTiles; var PlayerTiles : <B>String</B>; NewTileChoice : <B>String</B>; Choice : <B>String</B>; AdditionalLetters : <B>Integer</B> = 3);
//Implemented a 'default parameter', it's not required for the other calls (defaults to 3), but I can use it to specify otherwise
//http://wiki.freepascal.org/Default_parameter
function GetChoice() : <B>String</B>;
procedure HaveTurn(PlayerName : <B>String</B>; var PlayerTiles : <B>String</B>; var PlayerTilesPlayed : <B>Integer</B>; 
def AddEndOfTurnTiles(TileQueue, PlayerTiles, NewTileChoice, Choice):
def GetChoice():
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles):
Sub AddEndOfTurnTiles(ByRef TileQueue As QueueOfTiles, ByRef PlayerTiles As <B>String</B>, ByVal NewTileChoice As <B>String</B>, ByVal Choice As <B>String</B>)
When a number other than 1, 4, 7 or 0 is entered the program shouldn't use that as a word attempt
//Been at this for ages, this is the only way i can find to get this working, if anyone else has a more efficient <B>Method</B> please replace
//Create a new function checkchoice for the purposes of this check
function CheckChoice(Choice : <B>String</B>) : <B>Boolean</B>;
begin
end;
//Then make these modifications with the Getchoice function and it should work
function GetChoice() : <B>String</B>;
if Choice.lstrip('-').isdigit(): 
Function GetChoice()
Alternative Solution By Big Heny Jnes
Choice = GetChoice()
Alternative Solution by FatMatt
Sub HaveTurn(ByVal PlayerName As <B>String</B>, ByRef PlayerTiles As <B>String</B>, ByRef PlayerTilesPlayed As <B>String</B>, ByRef PlayerScore As <B>Integer</B>, ByVal TileDictionary As Dictionary(Of Char, <B>Integer</B>), ByRef TileQueue As QueueOfTiles, ByRef AllowedWords As List(Of <B>String</B>), ByVal MaxHandSize As <B>Integer</B>, ByVal NoOfEndOfTurnTiles As <B>Integer</B>)
A feature that allows the user to save the game
private static void PlayGame(List<<B>String</B>> AllowedWords, Dictionary<char, int> TileDictionary, bool RandomStart, int StartHandSize, int MaxHandSize, int MaxTilesPlayed, int NoOfEndOfTurnTiles)
def LoadGame():
def SaveGame(PlayerData,TileQueue):
def PlayGame(AllowedWords, TileDictionary, RandomStart, StartHandSize, MaxHandSize, MaxTilesPlayed, NoOfEndOfTurnTiles, Load=False):
def DisplayMenu():
def Main():
To check if the word is valid the program uses <B>Linear Search</B> O(n) , improve it using any other more efficient and quicker <B>Algorithm</B>, 
e.g. <B>Binary Search</B> O(logn) 
private static bool CheckWordIsValid(<B>String</B> Word, List<<B>String</B>> AllowedWords)
def CheckWordIsValid(Word, AllowedWords):
Tell the player(s) if the required text file is missing
private static void LoadAllowedWords(ref List<<B>String</B>> AllowedWords)
def LoadAllowedWords():
Ask the players to add new word(s) to be added to the valid word list.
private static void DisplayMenu()
static void Main(<B>String</B>[] args)
private static void AddWords(ref List<<B>String</B>> AllowedWords)
def LoadAllowedWords(): 
Sub Main()
Sub AddWordToList(ByVal Word As <B>String</B>)
Sub DisplayMenu()
Michael Slater - Jumeirah College
Add a high score <B>Table</B>
Create a function to read from a high score CSV file, containing the players score and then the players name. The file is read and the sorted using a <B>Bubble Sort</B>, the top 5 scores and names are then outputted.
Saves the high score into this new file.
The winner of the game is asked if they would like to save their high score.
The "Main" function is updated to allow a choice 3 to display the current high scores.
The "DisplayMenu" <B>Method</B> is also updated to show the user can press 3 to display the high score.
def SaveHighscore(Name,Score):
def LoadHighscores():
def DisplayHighscores():
def DisplayWinner(PlayerOneScore, PlayerTwoScore):
def DisplayMenu():
def Main():
Add a time limit for turns
private static void HaveTurn(<B>String</B> PlayerName, ref <B>String</B> PlayerTiles, ref int PlayerTilesPlayed, ref int PlayerScore, Dictionary<char, int> TileDictionary, ref QueueOfTiles TileQueue, List<<B>String</B>> AllowedWords, int MaxHandSize, int NoOfEndOfTurnTiles)
import time
def GetChoice():
Filter out inappropriate words
def GetChoice():
Ask the user to confirm their word choice or go back and change it if they made a typo etc.
void haveTurn(<B>String</B> playerName, Tiles playerTiles, 
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles): 
Sub HaveTurn(ByVal PlayerName As <B>String</B>, ByRef PlayerTiles As <B>String</B>, ByRef PlayerTilesPlayed As <B>String</B>, ByRef PlayerScore As <B>Integer</B>, ByVal TileDictionary As Dictionary(Of Char, <B>Integer</B>), ByRef TileQueue As QueueOfTiles, ByRef AllowedWords As List(Of <B>String</B>), ByVal MaxHandSize As <B>Integer</B>, ByVal NoOfEndOfTurnTiles As <B>Integer</B>)
'Theres probably a better way to do this, but this is one solution
Michael Slater - Jumeirah College
Description of question
The have turn <B>Method</B> was edited, such that it adds a valid word to a used word list and then checks each time the user inputs a word if it is inside of this list, if not it has not been used before and is a valid word.
The PlayGame <B>Method</B> is also amended to contain the UsedWords <B>String</B> list, this stores all of the valid words which have been played and is passed to the HaveTurn function by ref.
while (PlayerOneTilesPlayed <= MaxTilesPlayed && PlayerTwoTilesPlayed <= MaxTilesPlayed && PlayerOneTiles.Length < MaxHandSize && PlayerTwoTiles.Length < MaxHandSize)
def PlayGame(AllowedWords, TileDictionary, RandomStart, StartHandSize, MaxHandSize, MaxTilesPlayed, NoOfEndOfTurnTiles):
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles, WordsUsed):
def CheckWordIsValid(Word, AllowedWords, WordsUsed):
Description of question
private static int GetScoreForWord(<B>String</B> Word, Dictionary<char, int> TileDictionary) 
def GetScoreForWord(Word, TileDictionary):
Description of question
Remove points from the players score if they do not enter a valid word
private static void HaveTurn(<B>String</B> PlayerName, ref <B>String</B> PlayerTiles, ref int PlayerTilesPlayed, ref int PlayerScore, Dictionary<char, int> TileDictionary, ref QueueOfTiles TileQueue, List<<B>String</B>> AllowedWords, int MaxHandSize, int NoOfEndOfTurnTiles)
procedure HaveTurn(PlayerName : <B>String</B>; var PlayerTiles : <B>String</B>; var PlayerTilesPlayed : <B>Integer</B>;
var PlayerScore : <B>Integer</B>; TileDictionary : TTileDictionary; var TileQueue : QueueOfTiles;
var AllowedWords : T<B>String</B>Array; MaxHandSize : <B>Integer</B>; NoOfEndOfTurnTiles : <B>Integer</B>);
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles):
Description of question
Firstly a list of <B>String</B>s variable called "PlayedWords" is created inside of the PlayGame Subroutine, this is used to store each of the words that our played by the player. This variable is then passed to the HaveTurn <B>Method</B> and too the Display Winners <B>Method</B>.
private static void PlayGame(List<<B>String</B>> AllowedWords, Dictionary<char, int> TileDictionary, bool RandomStart, int StartHandSize, int MaxHandSize, int MaxTilesPlayed, int NoOfEndOfTurnTiles)
The HaveTurn <B>Method</B> is then edited such it accepts the PlayedWords parameter as ref, if the user plays a word and the word is not 0 in length (blank), then it will be added to the list.
private static void HaveTurn(<B>String</B> PlayerName, ref <B>String</B> PlayerTiles, ref int PlayerTilesPlayed, ref int PlayerScore, Dictionary<char, int> TileDictionary, ref QueueOfTiles TileQueue, List<<B>String</B>> AllowedWords, int MaxHandSize, int NoOfEndOfTurnTiles, ref List<<B>String</B>> PlayedWords)
else
The DisplayWinner <B>Method</B> is also eddied such that it cycles through all the word plays and prints them to the console, using a foreach loop.
private static void DisplayWinner(int PlayerOneScore, int PlayerTwoScore, List<<B>String</B>> PlayedWords)
Console.WriteLine("In this game the words played were:");
Description of question
private static void PlayGame(List<<B>String</B>> AllowedWords, Dictionary<char, int> TileDictionary, bool RandomStart, 
//Edited Portion of HaveTurn
private static void HaveTurn(<B>String</B> PlayerName, ref <B>String</B> PlayerTiles, ref int PlayerTilesPlayed, ref int PlayerScore,
private static void DisplayWinner(int PlayerOneScore, <B>String</B> PlayerOneHighestScoringWord, int PlayerTwoScore, //
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles, BestWords):
def DisplayWinner(PlayerOneScore, PlayerTwoScore, BestWords):
def PlayGame(AllowedWords, TileDictionary, RandomStart, StartHandSize, MaxHandSize, MaxTilesPlayed, NoOfEndOfTurnTiles):
Description of question
public void Add()
private static void CreateTileDictionary(ref Dictionary<char, int> TileDictionary)
private static bool CheckWordIsValid(<B>String</B> Word, List<<B>String</B>> AllowedWords)
/* LettersDiff() is a <B>Method</B> that returns the number of letters between two <B>String</B>s that do not match */
private static int LettersDiff(<B>String</B> s1, <B>String</B> s2)
import re
<B>Class</B> QueueOfTiles():
def CreateTileDictionary():
def DisplayTileValues(TileDictionary, AllowedWords):
def CheckWordIsInTiles(Word, PlayerTiles):
def CheckWordIsValid(Word, AllowedWords):
def CheckWordWildcard(Word, AllowedWords):
Description of question
def DisplayWinner(PlayerFirstScore, PlayerSecondScore,PlayerFirstName,PlayerSecondName):
def PlayGame(AllowedWords, TileDictionary, RandomStart, StartHandSize, MaxHandSize, MaxTilesPlayed, NoOfEndOfTurnTiles):
Public Sub Add()
End Sub
Private Shared Sub CreateTileDictionary(ByRef TileDictionary As Dictionary(Of Char, <B>Integer</B>))
End Sub
Private Shared Function CheckWordIsValid(ByVal Word As <B>String</B>, ByVal AllowedWords As List(Of <B>String</B>)) As <B>Boolean</B>
End Function
Private Shared Function LettersDiff(ByVal s1 As <B>String</B>, ByVal s2 As <B>String</B>) As <B>Integer</B>
End Function
Description of question
Description of question
private static int GetScoreForWord(<B>String</B> Word, Dictionary<char, int> TileDictionary) 
def GetScoreForWord(Word, TileDictionary):
In queue <B>Class</B> definition, make use of the IsEmpty <B>Method</B> in Show <B>Method</B>.
<B>Class</B> QueueOfTiles():
Add the ability to set the player names
void displayWinner(int playerOneScore, int playerTwoScore, <B>String</B> PlayerOneName, <B>String</B> PlayerTwoName) // Added playerone and playertwo to the function
def DisplayWinner(PlayerOneScore, PlayerTwoScore, PlayerOneName, PlayerTwoName):
def PlayGame(AllowedWords, TileDictionary, RandomStart, StartHandSize, MaxHandSize, MaxTilesPlayed, NoOfEndOfTurnTiles):
Description of question
Create a circular tile queue to improve efficiency of program.
This involves using an anagram-finding <B>Algorithm</B> to make the game unnecessarily difficult to win. I can't imagine this will come up in the exam but I want to avoid doing my actual homework and you're in for the ride.
Okay so the first thing we're going to do is the function for finding anagrams. The function will be called when the computer needs to enter a word and it will return a valid word.
def ComputerChoice(PlayerTiles, AllowedWords, MaxHandSize):
Next, we're going to modify PlayGame to take an additional <B>Boolean</B> parameter. This parameter will be called Computer. When Computer is True, a single-player game will be played against the computer, which is a very useful feature if like me, you don't have any real friends to play against.
<syntaxhighlight>
def PlayGame(AllowedWords, TileDictionary, RandomStart, StartHandSize, MaxHandSize, MaxTilesPlayed, NoOfEndOfTurnTiles, Computer):
</syntaxhighlight>
There is another step to modifying PlayGame. The way the game will work is that Player One will always be human and Player Two will either be human or the computer according to the <B>Boolean</B> value of Computer. So when PlayGame calls the HaveTurn function in its while loop, the value of computer can always be False for Player One. For Player Two, we can simply pass the value of Computer.
Now this won't work unless we update HaveTurn to accept Computer and behave differently when it's the computer's turn. Make sure you change NewTileChoice to NewTileChoice = GetNewTileChoice(Computer).
def HaveTurn(PlayerName, PlayerTiles, PlayerTilesPlayed, PlayerScore, TileDictionary, TileQueue, AllowedWords, MaxHandSize, NoOfEndOfTurnTiles, Computer):
Okay now we are almost done. We will modify GetNewTileChoice to take Computer as a parameter. It is necessary to use GetNewTileChoice because when the computer chooses either "1", "2", "3", "4", the player needs to be reminded of the options so that they can see which one the computer chose. The number will simply be chosen randomly. No anagrams to find here :(
def GetNewTileChoice(Computer):
The last thing to do is change DisplayMenu and Main to allow players to choose single-player.
Here is DisplayMenu:
def DisplayMenu():
And here is Main:
def Main():
Yay! It works! Or maybe it doesn't for you because my instructions and code are hot garbage. Anyway, I hope this momentarily distracted you from the pain of A-Levels.
This is the skeleton code for the AQA AS Paper from 2017. This code is useful for those retaking, and can also be used as a practise for those taking a newer paper.
This is where suggestions can be made about what some of the questions might be, and how they can be solved in different programming languages. If you see that a solution to a question is missing in a language you use, be bold and add it!
Please be respectful and do not vandalise or tamper with the page, as this would affect students' preparation for their exams!
static void SeedLands(char[,] <B>Field</B>, int Row, int Column)
 Function GetHowLongToRun() As <B>Integer</B>
Function GetHowLongToRun() As <B>Integer</B>
End Function
' Alternative Solution which doesn't crash when non numerical values are entered:
Function GetHowLongToRun() As <B>Integer</B>
End Function
' Alternative solution that accounts for numbers outside of the specified range, non-numerical values, and non-<B>Integer</B>s within the range:
Function GetHowLongToRun() As <B>Integer</B>
'Additional variable required to check if input it decimal or not.
'Try-Catch validation in case <B>String</B> entered.
'Validation for decimals.
'Validation if number not in range.
static int GetHowLongToRun()
PYTHON
def GetHowLongToRun():
def GetHowLongToRun():
static int GetHowLongToRun()
//The '{}' indicates the lines of code I have added ontop of the vanilla skeleton code
Function GetHowLongToRun() : <B>Integer</B>; 
Var 
Begin
End;
//minor edit to the simulate summer subroutine
// James Barlow BTC
Extremely similar to the rainfall subroutine but i noticed this <B>Method</B> would also work.
static void SimulateAutumn(char[][] <B>Field</B>)
//Inder Panesar
def CropVirus(<B>Field</B>, Row, Column):
def SimulateAutumn(<B>Field</B>): 
def SimulateSpring(<B>Field</B>):
 if randint(0, 1) == 1:
def CropVirus(<B>Field</B>):
 NumberOfPlants = 0
Sub SimulateOneYear(ByVal <B>Field</B>(,) As Char, ByVal Year As <B>Integer</B>)
Procedure CropVirus(var <B>Field</B>: T<B>Field</B>);
var
begin
end;
Function SimulateSpring(<B>Field</B>: T<B>Field</B>): T<B>Field</B>;
Var
Begin
def Save<B>Field</B>(<B>Field</B>):
 FileName = input("Enter File Name To Save As: ")
def Simulation():
ALTERNATIVE
def SaveFile(<B>Field</B>):
def Simulation():
Sub SaveToFile(ByVal <B>Field</B> As Char(,))
End Sub
Answer :
Procedure Savefile(<B>Field</B> : T<B>Field</B>); //Note : this procedure is very similar to the display procedure
Var
Begin
End;
Answer :call <B>Method</B> in simulationstatic void WriteFile(char[][] <B>Field</B>) {
Answer :call <B>Method</B> in simulation
// Inder Panesar
Answer :
// SaveFile C# Solution //
// By Reidan Beachill, 07/04/2017 //
// Below is only a few additions to call the save subroutine //
// END Simulation() //
// Add the following subroutine somewhere in the code, this contains validation on whether the file exists and saves the file//
// START saveCurrentPositions() //
static void saveCurrentPositions(char[,] <B>Field</B>)
// END saveCurrentPositions() //
Answer :
// SaveFile C# Solution 2//
// adds a simple save function without the excess code //
// bundled with free grammatical errors and hardcoded file paths//
Answer :
<syntaxhighlight lang="Python">
def SaveFile(<B>Field</B>):
def Simulation():
Currently the rocks are defined as a constant but not used - we can either allow the user to enter a number of rocks to be randomly placed, or add a random number of rocks to the <B>Field</B>.
Function CreateNew<B>Field</B>() As Char(,)
End Function
JAVA: 
static void instertRocks(char[][] <B>Field</B>)
 static void CreateNew<B>Field</B>(char[][] <B>Field</B>) {
//alternative way of adding rocks
//Inder Panesar
def CreateNew<B>Field</B>():
Answer 2 :
i have found a simpler solution that doesn't require much coding
//side note- There is an isssue when dealing with maximum sizes. as for now i have no solution to this currently.
James Barlow, Bridgwater college, KEK with a head like this I'd run -> Tool
Within codice_1, below the code that selects the number of rocks if that is in use.
Console.Write("Should the seed position be centre (C), random (R), or at specific coordinates (S)? C/R/S: ")
SeedPosition = Console.ReadLine()
<B>Field</B> = PlantFirstSeed(<B>Field</B>, SeedPosition)
Adding a new function:
Function PlantFirstSeed(ByVal <B>Field</B> As Char(,), ByVal SeedPosition As Char) As Char(,)
End Function
This solution will require that you add codice_2 to the start of the program.
def CreateNew<B>Field</B>():
static void CreateNew<B>Field</B>(char[][] <B>Field</B>)
Change the program so when you enter number of years it doesn't accept any <B>Character</B> input and returns an error with another chance of input.
Answer :
 static int GetHowLongToRun() //Function that returns the number of years to run the simulation
Answer :
Answer :
//Inder Panesar
Answer :
while (True):
By iuhiuh (aka. SJP)
def GetHowLongToRun():
Answer :
'Big up NewVic mandem ' The Real Swifty
Add functionality for plants that thrive on or require frost
Answer :
// Reverse engineered Through pain and lots of energy drinks from python (You had 2 cans? Seriously you are such a lightweight)
//Ps Totally No spelling mistakes this time
//Top Of program
static bool Thrive = false;
// New subroutine
static void FrostPlant()
char ThriveInFrost='n';
bool thrive = false;
Console.Write("Does the plant thrive in frost (Y/N): ");
ThriveInFrost = char.Parse(Console.ReadLine());
if (ThriveInFrost == 'Y' || (ThriveInFrost == 'y'))
thrive = true;
else
thrive = false;
//can you feel it now Mr Krabs?
Thrive = thrive;
// In Simulate Spring
// add in the if(Frost part)
if (Thrive != true)
PlantCount = 0;
for (int row = 0; row < <B>Field</B>LENGTH; row++)
for (int Column = 0; Column < <B>Field</B>WIDTH; Column++)
if (<B>Field</B>[row, Column] == PLANT)
PlantCount++;
if (PlantCount % 3 == 0)
<B>Field</B>[row, Column] = SOIL;
//Yes SpongeBob, Im feeling it now
else
for (int row = 0; row < <B>Field</B>LENGTH; row++)
for (int Column = 0; Column < <B>Field</B>WIDTH; Column++)
if (<B>Field</B>[row, Column] == PLANT)
SeedLands(<B>Field</B>, row - 2, Column - 2);
SeedLands(<B>Field</B>, row - 1, Column - 2);
SeedLands(<B>Field</B>, row - 2, Column - 1);
SeedLands(<B>Field</B>, row - 2, Column);
SeedLands(<B>Field</B>, row - 2, Column + 2);
SeedLands(<B>Field</B>, row - 2, Column + 1);
SeedLands(<B>Field</B>, row - 1, Column + 2);
SeedLands(<B>Field</B>, row, Column - 2);
SeedLands(<B>Field</B>, row, Column + 2);
SeedLands(<B>Field</B>, row + 2, Column - 2);
SeedLands(<B>Field</B>, row + 1, Column - 2);
SeedLands(<B>Field</B>, row + 2, Column - 1);
SeedLands(<B>Field</B>, row + 2, Column);
SeedLands(<B>Field</B>, row + 2, Column + 2);
SeedLands(<B>Field</B>, row + 1, Column + 2);
SeedLands(<B>Field</B>, row + 2, Column + 1); 
Console.WriteLine("There has been a frost");
CountPlants(<B>Field</B>);
Answer :
//Replace the current SimulateSpring sub-routine with this
Answer :
Answer :
<B>Class</B> Paper1_ASLv1_2017_Java_Pre
//Inder Panesar
Answer :
<B>Field</B>LENGTH = 20 
<B>Field</B>WIDTH = 35
Thrive_in_Frost = input("Does the plant thrive in frost (Y/N): ")
if Thrive_in_Frost == "Y":
else:
if Frost:
return <B>Field</B>
Answer :
'to ask if plants survive frost
'frost thriving
When the program loads a file, if the user does not include the ".txt" extension, ensure that it is automagically added.
Answer :
// These two lines are the only changes
Answer :
Function ReadFile() : T<B>Field</B>;
Var
Begin
End;
Answer :
//Inder Panesar 15/03/2017
Answer :
def ReadFile():
Answer :
'adds .txt if required, but ignores other file types for now. Add into readfile subroutine (and possibly the saving one too while you're at it)
Answer :
Answer :
Answer :
static void Display(char[,] <B>Field</B>, <B>String</B> Season, int Year)
Answer :
Procedure Display(<B>Field</B> : T<B>Field</B>; Season : <B>String</B>; Year : <B>Integer</B>);
Var
Begin
End; 
Answer :
//Inder Panesar 14/03/2017
Answer 1:
def Display(<B>Field</B>, Season, Year):
Answer 2:
def Display(<B>Field</B>, Season, Year):
Answer 3:
def Display(<B>Field</B>, Season, Year):
Answer 4: Vertical Columns 
"""This creates Vertical Columns that work for any length between 2 and 99"""
def Display(<B>Field</B>, Season, Year):
Answer 5: 
"""All you need is a few lines."""
def Display(<B>Field</B>, Season, Year):
Answer :
Answer :
Answer :
static void SimulateBird(char[][] <B>Field</B>)
Answer :
def BirdEvent(<B>Field</B>):
def BirdEvent(<B>Field</B>):
def BirdEvent(<B>Field</B>):
Answer : 
'Big up Newvic mandem u get me
'The Real Swifty
$IBRAHIM$ THE ROADMAN69
Answer 2: 
Answer :
Place a random chance to call this function (I used 1/40 chance, can be adjusted) inside of all of the seasons (optional, can just be one)
Also, if you have placed a validation for getting a response, create a <B>Boolean</B>, and place the "End of Simulation, run again or end?" code inside of an if statement, and if there is a meteor shower, set a global variable to True, and it will not allow the option to continue, just end. E.g.
Below is the function for the Meteor Storm:
Answer:
// Inder Panesar
Answer :
def Meteor(<B>Field</B>, Year):
def Simulation():
Another Answer :
def Meteorites(<B>Field</B>, Year):
def SimulateOneYear(<B>Field</B>, Year):
Answer :
Place a random chance to call this function in autumn (or wherever you want to call it)
The thread.sleep is there to make sure it is a random number every time
--Brock College <3
--Big Up you Lads
--Edit to correct season by a member of the best CSGO team: https://steamcommunity.com/groups/TeamOgreLords
Answer :
Answer :
// Inder Panesar
Answer 1:
def Tornadoify(<B>Field</B>,Row,Column):
def Tornado(<B>Field</B>):
if randint(1,10) = 10:
Answer :
 tornado_chance =randint(1,10)
Answer : 
'to start the tornado
'how the tornado works
~ 'Big up NewVic man dem 'The Real Swifty ~
Answer 1:
def CreateNew<B>Field</B>(): 
Answer 2:
def CreateNew<B>Field</B>(): 
Answer 3:
def CreateNew<B>Field</B>(): 
Answer:
//Inder Panesar
Answer 1:
Note - Add this code into 'Initialise <B>Field</B> Void' just under Console.WriteLine("| " + <B>String</B>.Format("{0,3}", Row));
Compact version - The 4 'for' statements can be reduced to 2 as they both carry out the same function.
for (int Row = 0; Row < <B>Field</B>LENGTH; Row++)
Answer 2:
This code is very good and works perfectly, though your comment on where to put it is a bit off.
I found a way to implement this code in the create new <B>Field</B> section
James Barlow, Bridgwater college, inb4 messed up by headteacher -> Tool
Answer 1:
Function rockWall(ByVal <B>Field</B>(,) As Char) As Char(,)
'Made by Jacky Chan of Reed's School
'racism is not funny grow up
[i.e. When the simulation starts, the first <B>Field</B> shown is the state of the <B>Field</B> at the END of Spring. If you start, for example, with the TestCase.txt file, you will not see the <B>Field</B> as it is in the TestCase.txt file, but only once Spring has sprung. This amendment requires the simulation to show the point when Spring starts and then continues as before. Thus, any test file used as the starting point will be shown as Season 0 (to confirm that the <B>Field</B> state is as it should be when the test file is read, and the simulation then continues. Hope this is a clearer explanation. Apologies if this has simply muddied the water.]
I've read this at least 40 times and I still have no idea what this question means.
I think this will come up - Excellent question.
Answer :
Answer:
//Inder Panesar
Answer :
Display(<B>Field</B>, "original", Year); //Show the original <B>Field</B>, before it is changed
Answer :
Answer :
<syntaxhighlight lang="VB.NET">
Answer :
<syntaxhighlight lang="c#">
// at the beggingng of the code
static int antelopecount = 5;
// before the simulate one year
static void antelope(char[,] <B>Field</B>)
static void SimulateOneYear(char[,] <B>Field</B>, int Year)
//comments about this code, their is a high chance for the antelopes to not eat a single seed, so i have not based their death around starvation, if you wish to do this you can change the second IF statement in the Antelope procedure so that when an antelope does not eat a seed it will die. be warned as a genocide of antelopes will be casued by this and they will all die if their population is not high enough
Answer :
<syntaxhighlight lang="c#">
static void Main(<B>String</B>[] args)
//Function that asks the user if they want to change the <B>Field</B> size
//Procedure that actually changes the proportions of the <B>Field</B>
def Get<B>Field</B>Size():
<syntaxhighlight lang="python">
def ReadFile(): 
For both of these previous solutions as <B>Field</B>WIDTH and <B>Field</B>LENGTH are no longer global variables, they need to be returned back to the main program and passed to every function that uses them.
<syntaxhighlight lang="VB.net">
Function SimulateAutumn(ByVal <B>Field</B>(,) As Char) As Char(,)
'big up daddy programming for the ends, it's rough out here for the mandem
This is for the AQA AS Computer Science Specification.
This is where suggestions can be made about what some of the questions might be and how we can solve them.
Please be respectful and do not vandalise or tamper with the page, as this would affect students' preparation for their exams!
Description of question
Description of question
Description of question
Description of question
Description of question
Description of question
Description of question
Description of question
4.13.1.1 <B>Analysis</B>
Content
Be aware that before a problem can be solved, it must be defined, the requirements of the system that solves the problem must be established and a data model created. Requirements of system must be established by interaction with the intended users of the system. The process of clarifying requirements may involve prototyping/agile approach.
Students should have experience of using abstraction to model aspects of the external world in a program.
4.13.1.2 <B>Design</B>
Content
Be aware that before constructing a solution, the solution should be <B>Design</B>ed and specified, for example planning data structures for the data model, <B>Design</B>ing <B>Algorithm</B>s, <B>Design</B>ing an appropriate modular structure for the solution and <B>Design</B>ing the human user interface.
Students should have sufficient experience of successfully structuring programs into modular parts with clear documented interfaces to enable them to <B>Design</B> appropriate modular structures for solutions.
Be aware that <B>Design</B> can be an iterative process involving a prototyping/agile approach.
4.13.1.3 Implementation
Content
Be aware that the models and <B>Algorithm</B>s need to be implemented in the form of data structures and code (instructions) that a computer can understand.
Students should have sufficient practice of writing, debugging and testing programs to enable them to develop the skills to articulate how programs work arguing for their correctness and efficiency using logical reasoning, test data and user feedback.
Be aware that the final solution may be arrived at using an iterative process employing prototyping/an agile approach with a focus on solving the critical path first.
4.13.1.4 Testing
Content
Be aware that the implementation must be tested for the presence of errors, using selected test data covering normal (typical), boundary and erroneous data.
Students should have practical experience of <B>Design</B>ing and applying test data, normal, boundary and erroneous to the testing of programs so that they are familiar with these test data types and the purpose of testing.
It should also undergo acceptance testing with the intended user(s) of the system to ensure that the intended solution meets its specification.
Students will only need to provide evidence of user feedback not details of the tests carried out by the end user.
4.13.1.5 <B>Evaluation</B>
Content
Know the criteria for evaluating a computer system.
Abstraction and Automation
<B>Algorithm</B> to calculate square of a number 
Procedure sqr(int: number)
Calculate number ** 2 
End Procedure 
Text in bold is the result of a procedural abstraction which is the procedure itself without the actual value of number in this case.
from the details of how it is constructed. For example, a stack could be implemented as an
array and a pointer for top of stack.
 What is abstraction? 
<B>Character</B>istics. 
Definition: 
How a process is performed without human intervention
Ethics: 
Case study :
"There has been impact on the jobs of people working in car factories." 
"Ford cars is one company that has effected this by the use of their automated equipment to create their cars, thus decreasing employees hours of work." 
Human vs Robots
Repetitive
Fatigue 
Avoiding mistakes
Can't adapt easily
1 Why is automation deemed as unethical for the manufacturing industry?
2. Why process are automated?
Backus-Naur Form (also known as Backus Normal Form (BNF) or BNF for short) is a notation technique to express syntax of languages in computing. The expression is put in lists and can be used to see if syntax that is written is valid. Backus-Naur means "not in normal form compared to convention".
BNF is represented using the following symbols:
The way that these symbols are laid out are as such:
In plain English, the expression above means "The parent expression is defined as the child expression 1 or the child expression 2". This means that to make up the parent expression, it must have a child expression and a child expression is made up of other things.
In this example, The BNF structure is breaking down the syntax to create 
Compact set notation is a useful tool to describe the properties of each element of a set, rather than writing out all elements of a set.
The <B>Table</B> below lists all of the necessary symbols for compact set notation.
Example 1:
We might want to describe a set A, which contains all natural numbers greater than 10.
This means that we are interested in a subset of ℕ, such that each of its elements is greater than the value 10.
Using set notation this set can be described as:
Example 2:
This time set A is described as natural numbers, which are multiples of 10. This can be notated as:
Example 3:
The elements of set A are all even numbers, up to including 12.
Set notation allows us to write this set as {0,2,4,6,8,10,12}, which in this example is feasible.
However, this would be very impractical, if A is described as all even numbers, up to including 1,000,000!
The <B>Table</B> below explains how each expression is linked to the English description of the elements of the set A.
Example 4:
Set A is described as all the natural multiples of 3, below 5,000.
The <B>Table</B> below explains how each expression is linked to the English description of the elements of the set A.
Using set notation, define the set A as all the numbers divisible by 4. Which of the following terms are applicable to A: coun<B>Table</B>, uncoun<B>Table</B>, finite, infinite.
A = { x | x ∈ N } Set A is a countably infinite set.
Using set notation, define the set B as all the numbers divisible by 4. Which of the following terms are applicable to A: coun<B>Table</B>, uncoun<B>Table</B>, finite, infinite.
A = { x | x ∈ N } Set A is a countably infinite set.
Not every programming language offers the ability to perform set theory calculations out of the box. In Visual Basic it has only been available since VB.NET 2008, using the LINQ libraries that you have to import to get it working:
Imports System.Linq
Imports System.Xml.Linq
Module Module1
End Module
An <B>Algorithm</B> is a step-by-step set of instructions to solve a specific problem and it is important to understand that the same problem can be solved with a variety of <B>Algorithm</B>s.
This section of the specification is concerned with the criteria that is used to chose the most sui<B>Table</B> <B>Algorithm</B> for a set of a given problem out of a set of <B>Algorithm</B>s for the same problem.
In other words, how can we measure the efficiency of a given <B>Algorithm</B>, so it can be compared with a different <B>Algorithm</B> which solves the same problem?
A very common problem is the searching of an item in a set of items. This may be a name in a very large <B>Database</B> for people.
One of the <B>Algorithm</B>s to solve this problem is shown in the illustration below:
[image of <B>Linear Search</B> flowchart to be follow here]
[link to Python implementation to follow below]
Another <B>Algorithm</B> for solving the same problem is shown in illustrations below.
[image of <B>Binary Search</B> flowchart to be added here]
[link to Python implementation added below]
Both <B>Algorithm</B>s are solving the same problem. Which one should be chosen to be coded as a program to solve the problem?
In order to decide which <B>Algorithm</B> to chose over another, they are compared in terms of their efficiency: the time it takes to find the solution and the resources which are consumed in the process. Consider the choice between different cars, where you might consider both the speed it will take to travel from one destination to another and the fuel it will consume during the journey.
That is the amount of (memory) space the <B>Algorithm</B> will take up before it terminates with the correct solution.
In order to identify the space-wise efficiency we need to look at the amount of data structures used as the <B>Algorithm</B> is running. When considering space-wise efficiency, the aim is to utilise data structures which take up the least amount in memory.
Examples:
This is the amount of time it takes for the <B>Algorithm</B> to terminate with the correct solution.
Any measure of time will depend on other factors, like
Clearly, it is important to reduce these dependencies to a minimum when comparing different <B>Algorithm</B>s. Both the programming language and hardware used are subject to changes over time. Hence, it is generally agreed that any comparison should not take these factors into consideration.
This leaves us with the size of the input as the only dependency we want to allow when consider the time it will take for the <B>Algorithm</B> to terminate with the correct answer.
In other words, we want to find a function f(n), where n is the size of the input, e.g. the length of the list to be searched. The function uses the number of computational steps necessary for the <B>Algorithm</B> to terminate.
In order to eliminate dependencies only the following steps are considered when calculating efficiency:
Consider the following <B>Algorithm</B>:
number1 <- INPUT
number2 <- INPUT
sum1 <- number1 + number2
number3 <- INPUT
sum2 <- sum1 + number3
Count the number of computational steps in the <B>Algorithm</B>
7
Optimise the <B>Algorithm</B> in terms of space. 
number1 <- INPUT
number2 <- INPUT
number3 <- INPUT
sum <- number1 + number2 + number3
Composition is putting pieces back together the opposite of the decomposition
In computing there are 2 types of composition: (1) <B>Object</B> Composition and (2) Function Composition
Generally speeking, both types of composition involve incorporating multiple <B>Object</B>s/functions to create a single, more complex <B>Object</B>/function. The process of determining <B>Object</B>s/functions to be 'composed' is part of the abstraction process (see computational thinking), and could be the direct result of decomposition (see decomposition). This is a requred process of the Software Development Lifecycle, but can be applied to any other activity where Computational Thinking is applied.
The following function could be decomposed:
Function PrintCustomerBankAccounts
into 
Function PrintCustomerSavingsAccount
Function PrintCustomerBankAccount
if there were different <B>Attribute</B>s (see <B>Attribute</B>s) for the 2 account types.
However it may be determined
This is the first step we take in computational thinking. First, we need to decompose, or break down, the problem into the smaller problems. Then we can solve each problem separately. This will help us to simplify complex problems into each step we should analyse. Let's look at the example of a journey to London.
Think about taking a trip from Basingstoke to London Waterloo. The steps you take from your house to the train station seem quite complex. But if you break it down to the different stages of the trip, "decomposition" makes it easier. You need directions, transportation, times and prices for a successful journey. Work backwards from the time you need to be in London which is 12 noon. 
1. Make sure you have a paper A-Z London with the tube map. 
2. Which trains get into London before 12? 
3. Then think about how you would arrive at the train station. Do you need a <B>Bus</B>, car, or can you walk?
4. Finally, you need to have enough money for your journey and a snack. 
Now you have all the steps necessary to complete your journey. Decomposition ensures you have enough money, directions, transportation options and timings. You can now apply this <B>Method</B> to computing with modular <B>Design</B>.
A finite state machine is a form of abstraction (WHY/HOW?). It models the behaviour of a system by showing each state it can be in and the transitions between each state.
Consider an elevator :
[picture of elevator to be inserted here]
Possible states of the system: 
'static on floor 1', 'moving up', 'static on floor 2', 'moving down'
[picture of states inserted here]
The transitions and their inputs: 
Form the above we can draw the finite state machine for the elevator.
[picture of completed finite state machine to be inserted here]
We can also produce a state transition <B>Table</B> (DEFINE THIS LANGUAGE BOX?):
[picture of state transition diagram to be inserted here]
Representing a system as a finite state machine is very powerful because the model allows us to demonstrate the behaviour very clearly. We can prove that the system is ro<B>Bus</B>t and will not behave in any unexpected manner. Consider the example of the elevator: by modelling the system as a finite state machine, it is possible to show that the elevator is not able to move up and down without stopping. This is because the <B>Design</B> clearly shows that it is impossible to transition from the state 'moving up' to the state 'moving down'.
Applications of finite state machines are found in many sciences. Mainly engineering, biology and most commonly in linguistics, where they are used to describe languages.
Looking at the above diagram we can see that it starts in state S1, an input of 1 will keep it in state S1, and an input of 0 will move it to state S2. Once in S2 an input of 1 will keep it there, and an input of 0 will <B>Switch</B> it back to S1. This means that the following inputs are valid:
It might appear to accept any binary value, but this isn't true. The only state it can accept in is state S1. This places the following rule on all accepted inputs: "A combination of binary digits involving an even number of zeros". This is useful for parity checks. If I try the following:
I am stuck in state S2 and the FSM has not accepted. Can you create a FSM to only accept Binary numbers with odd numbers of 1s?
For the FSM above which of these inputs are valid:
For the FSM above which of these inputs are valid:
Draw a finite state automata that will accept the word Banana whilst using only 3 states
Draw a finite state automata that will accept the words:
Some FSMs output values dependent on the state and the input values:
The above Mealy Machine outputs a value for each input. You can tell which is which by: codice_1. So for the following input:
It outputs
Shifting all the bits right, and dividing the binary number input by two.
For the Mealy machine above, what do the following inputs output:
What does this machine do, what do the outputs tell you?
This machine could be used to track the money going into a vending machine, letting you know how much you have left to pay on a 50p chocolate bar
What is the difference between a mealy machine and a finite state automaton?
In this section we are learning about deterministic finite automaton. This means that for a state and a valid input there is only one possible transition to take. There are such things a nondeterministic finite automaton where, for a given input there are multiple paths (or none) that could be taken:
A state transition <B>Table</B> follows every state and input. Inputs are usually placed on the left, and separated from the outputs, which are on the right. Here's a simple example of a state machine with two states, and a binary input:
Create a state transition <B>Table</B> for the following FSM:
Create a state transition <B>Table</B> for the following FSM:
Draw the FSM for the following state transition <B>Table</B>:
You might have already cottoned on. This represents a traffic light system
Draw the FSM for the following state transition <B>Table</B>:
Very early on in modern computing, a British academic named Alan Turing devised the halting problem. This problem is to do with whether we can determine if a program will ever come to a halt or run for ever, for example:
console.writeline("hello")
Would write "hello" to the screen then stop. However, take a look at:
dim x as <B>Integer</B> = 9
while x > 8
end while
This would never finish, it would never come to a halt as x will always be larger than 8 and never get any smaller. This means the while loop will continue for ever, constantly printing out "hello". In the two cases shown it is easy to tell if a program will halt or not, but it isn't so easy for all programs. Imagine we get a more complex piece of code:
dim x as <B>Integer</B> = 9
dim total as <B>Integer</B> = 0
while total < 100
end while
This is harder but still solvable taking a little more thinking and a little time on the processor. We could get a piece of code that takes weeks, years or even thousands of years to finish. But how can we know that all programs will end or not? To determine whether the program halts we:
Surely we create a mathematical proof to determine whether code will end or not I hear you say. Well let's prove just the opposite:
Let us create a program K that will loop forever if the result of H is to halt, and halt if the result of H is to loop for ever:
function K(i):
We can therefore see that there are examples of programs such as K that we cannot determine whether they are ever going to halt.
Big O Notation (also known as Big-O Notation) is a mathematical way of describing the limiting behaviours of a function. In other words, it is a way of defining how efficient an <B>Algorithm</B> is by how "fast" it will run.
You can work out the time that an <B>Algorithm</B> takes to run by timing it:
Dim timer As New Stopwatch()
timer.Start()
For x = 1 to 1000000000
Next
timer.Stop()
' Get the elapsed time as a TimeSpan value. 
Dim el As TimeSpan = stopWatch.Elapsed
' Format and display the TimeSpan value. 
Dim formattedTime As <B>String</B> = <B>String</B>.Format("{0}:{1}:{2}.{3}", el.Hours, el.Minutes, el.Seconds, el.Milliseconds / 10)
Console.WriteLine( "Time Elapsed: " + formattedTime)
However, this isn't always sui<B>Table</B>. What happens if you run some code on a 33 MHz processor, and some code on a 3.4 GHz processor. Timing a function tells you a lot about the speed of a computer and very little about the speed of an <B>Algorithm</B>.
dim N as <B>Integer</B> = 7483647
dim sum as double= 0
for i = 1 to N
loop
console.writeline(sum)
optimised version
dim N as <B>Integer</B> = 7483647
dim sum as double = N * (1 + N) / 2
console.writeline(sum)
Sets describe collections of things or values, such as numbers, animals or people.
In a set, each value occurs only once. For example, the value fox will occur only once in the set of animals. Just as the value 3 occurs only once in the element of all natural numbers, N.
The cardinality of a set refers to the number of elements it contains.
An empty set is written ∅ and its cardinality is 0.
Sets may be finite or infinite. For example, the set of people currently alive in the world will be finite, but the set of N is infinite.
A set may be coun<B>Table</B> or uncoun<B>Table</B>. A coun<B>Table</B> set is a set, whose elements can be matched with the set of natural numbers. In other words, it is possible to count the elements one-by-one. If a set is finite, it will always be coun<B>Table</B>. The best example of an uncoun<B>Table</B> set is R. It is impossible to match each element of R with an element of N. This is because there are not enough elements in N to match each one with an element of R.
x ∈ S, x is an element of S.
Examples:
Using set notation, state that Sunday is a weekend day.
Sunday ∈ WeekendDays
Using set notation, state that Monday is not a weekend day.
Monday ∉ WeekendDays
What is the cardinality of the set WeekendDays.
2
Let set A be the set of all atoms in the world. Which of the following words can be used to describe this set?
Coun<B>Table</B>, uncoun<B>Table</B>, finite, infinite.
Coun<B>Table</B>, finite.
Let set P be the set of all prime numbers. Which of the following words can be used to describe this set?
Coun<B>Table</B>, uncoun<B>Table</B>, finite, infinite.
Coun<B>Table</B>, infinite.
A ∪ B, meaning that all elements of the set A form a union with all of the elements in set B. This is a set comprehension, since this generates a new set.
Examples:
Let A = {0,2,4,6,8,10,12}
and B = {0,3,6,9,12}. 
Write out all elements of A ∪ B
A ∩ B, meaning that the set A and set B form an intersection. The generated set will be ∅, if the two sets share no elements.
Examples:
Let A be the set of numbers which are divisible by 3 and B the set of numbers divisible by 4.
Now let A be the set of all A-level students who take computer science and B the set of all A-level students who take mathematics.
As above,
and B = {0,3,6,9,12}.
A ∩ B =
A ∩ {goat,4,6,9} =
A ∩ {goat,3,9} =
It has no intersected values (Ø)
B ∩ {3,5,7,9,11} =
A \ B, meaning that the set A and set B form a set difference. This will generate a set, which contains the elements of A, which are NOT also in B.
Examples:
Let A be the set of all A-level students who take computer science and B the set of all A-level students who take mathematics.
As above,
and B = {0,3,6,9,12}.
Let us take a look at the two sets we are using as examples:
A ∖  B    =
B ∖  A    =
B ∖  {1,2,3,5,7,11}    =
A ∖  {0,1,2,3,5,8,13}    =
S ⊂ T, meaning that S is a proper subset of T, such that all elements in S are also elements of T. However, there will need to be at least one element in T, which is not in S.
Examples:
As above,
and B = {0,3,6,9,12}.
Is A a proper subset of B, so that we can write A ⊂ B? Explain your answer.
No, because there are elements in the set B which are not in the set A. In other words we can find an element, for which x ∈ B and x ∉ A
Relating to the above definitions for A, define a set which is a proper subset of A.
A ⊆ B, meaning that A forms a subset of B. In other words, A could be identical to B, but does not have to be!
Examples:
Let A be the set of all students in 6th form and B the set of all students taking computer science.
Now let A be all of the students present in school and B the set of students currently in the assembly hall.
Let A be all students who sit the A-level exam in computer science. Let B be all the students who gain a 'B' grade or above in the A-level computer science exam.
Is B a subset of A? Explain your answer.
Yes, because it may be the case that all students who sit the exam will also gain grade 'B' or above.
Let A be the set of customers in a restaurant. Let B be the set of all the vegetarian customers in the restaurant.
Is B a subset of A? Could A be a subset of B? Could A be a proper subset of B? Explain your answer.
B is a subset of A since every vegetarian customer is a customer. A could be a subset of B, because it may be the case that all customers present are also vegetarian. It cannot be a proper subset, since A contains B.
You will often want to check the format of a <B>String</B> being input and if it is incorrect you will want it to be submitted again. For example you might want someone to input the name of their best friend, meaning that they shouldn't be inputting any letters or spaces, and it should start with a capital letter:
Name of best friend: Beanie(CORRECT)
Name of best friend: jonny5(STOP THIS)
To do this we can match the input <B>String</B> against some rules, regular expressions or regex, in this case we only want <B>Character</B>s from the alphabet:
Breaking apart the rule:
Another example might be checking for the correct spelling of a famous composer:
We can check this using the pattern codice_5. Let's take a look at what this means:
Most regular expression tools provide the following operations to construct expressions.
<B>Boolean</B> "or"
A vertical bar separates alternatives. For example, codice_14 can match "gray" or "grey".
Grouping
Parentheses are used to define the scope and precedence of the operators (among other uses). For example, codice_14 and codice_16 are equivalent patterns which both describe the set of "gray" and "grey".
Quantification
A quantifier after a token (such as a <B>Character</B>) or group specifies how often that preceding element is allowed to occur.
Most programming languages have regular expression functions. In VB.NET we can use regular expressions by using the Regex routine:
' this code enforces the name rule from earlier
Dim name As <B>String</B>
Console.Write("Name of best friend: ")
name = Console.Readline()
' match the <B>String</B> against a regular expression
Dim m As Match = Regex.Match(name, "[A-Z][a-z]+")
If (m.Success) Then
Else
End If
A common use for regular expressions is in checking that you have a correctly typed email address. A rule for that is this: codice_23.
You can find out more about Regular expression on wikipedia and you will cover regular expressions in more detail in A2.
The abstract model of the Turing Machine and the Universal Machine..
Before attempting to study Turing Machines you should ensure you are familiar with Finite State machines from the AS Computing specification and the few additional FSM concepts added to the A2 course. 
Turing machines provide a general or formal model of computation and can be used to determine whether or not a task is compu<B>Table</B>.
A universal Turing machine (UTM) is a Turing machine that can execute other Turing machines by simulating the behaviour of any Turing machine. If a sequence is compu<B>Table</B> then a UTM will be able to execute it. A UTM behaves as an <B>Interpreter</B> which is just what a PC does when it runs a Java applet or Flash script.
Principle of Universality: A universal machine is a machine capable of simulating any other machine.
An ethical issue is one that concerns our own individual behaviour and our own personal concept of right and wrong. We learn our moral values from other people such as our parents, teachers and peers, and we learn them for ourselves from experience. Ethics vary slightly from morals in that they are a way of trying to define a set of moral values or principles that people within society live by. Ethical issues are sometimes referred to therefore as social issues.
"Topics that aren't examined but you might be interested in:"
Most organisations collect data on an ongoing basis and much of this data is personal. At a basic level this might be name and address information, but may also include data about individuals' finances, health, relationship status, family, employment history and even their personal views.
This presents a number of issues:
There are a number of other moral and ethical issues relating to Computer Science:
"Topics that aren't much examined but you might be interested in:"
As is clear from the topics discussed above, ethical and moral issues become a matter of debate. When you are using your own computer at home, you make your own moral decisions about these issues. When you are using a computer in a school, college or any other organisation, you normally have to agree to a "code of conduct".
The main principles of the British Computer Society (BCS) code of conduct are that members should:
Legal issues relate to those issues where a law has been passed by the Government. There are very few Acts of Parliament that are specific to the world of computing. The two main ones are the Data Protection Act and the Computer Misuse Act.
In addition, the Freedom of Information Act, the Regulation of Investigatory Powers Act and the Copyright, <B>Design</B>s and Patents Act are of particular relevance to computing.
Also, using a computer does not exempt you from all the other laws of the Kingdom. For example, someone who carries out an act of fraud on the Internet can be prosecuted under the Fraud Act. Someone who steals computer data can be prosecuted under the Theft Act. Someone who makes false allegations about someone else in an email can be prosecuted for libel under the Defamation Act.
The Data Protection Act was passed in 1998 and was enforced in March 2000, under the Labour government, who was given a mandate by the British people for constitutional reform.
The 1998 Act replaced and consolidated earlier legislation such as the Data Protection Act 1984 and the Access to Personal Files Act 1987. At the same time it aimed to implement the European Data Protection Directive.
The Data Protection Act places controls on organisations and individuals that store personal data electronically. The Act's definition of "personal data" covers any data that can be used to identify a living individual.
There are eight main principles behind the Data Protection Act. Anyone processing personal data must comply with the eight enforceable principles of good practice. They say that data must be:
Another feature of the Act is that data subjects have the right to know what data are stored about them by any particular individual or organisation. These are known as subject access rights.
The Act implements what was a manifesto commitment of the Labour Party in the 1997 general election. Before its introduction, there had been no right of access to government by the general public, merely a limited voluntary framework for sharing information.
The Act went through Royal Assent in 2000 and came fully into force in 2001. It is important to note due to devolution, Scotland has its own version of the Act named the Freedom of Information (Scotland) Act, which was passed in 2002 and was full enforced at 2005.
The Freedom of Information Act extends the subject access rights of the Data Protection Act and gives general rights of access to information held by public authorities such as hospitals, doctors, dentists, the police, schools and colleges.
The Act gives individuals access to both personal and non-personal data held by public authorities. The idea behind the Act was to provide more openness between the public and government agencies. Therefore, to respond to individual requests for information. Much of this is done through websites and email communications.
The Computer Misuse Act 1990 is an Act of the Parliament of the United Kingdom, introduced partly in response to the decision in R v Gold & Schifreen case of 1988. Critics of the bill complained that it was introduced hastily and was poorly thought out. Intention, they said, was often difficult to prove, and that the bill inadequately differentiated "joyriding" hackers like Gold and Schifreen from serious computer criminals. 
The Act has nonetheless become a model from which several other countries, including Canada and the Republic of Ireland, have drawn inspiration when subsequently drafting their own information security laws, as it is seen "as a ro<B>Bus</B>t and flexible piece of legislation in terms of dealing with cyber crime”. Several amendments have been passed to keep the Act up to date.
The Computer Misuse Act was introduced primarily to prevent hacking (data misuse) and contains three specific offences relating to computer usage:
The Act was introduced before the widespread use of the Internet, which has led to problems with enforcement. Prior to the Internet, hacking did take place, but not on the scale that it does today. There are now millions of computers and <B>Network</B>s connected to the Internet and the opportunities for hackers have increased enormously.
The Regulation of Investigatory Powers (RIP) Bill was introduced in the House of Commons on 9 February 2000 and completed its Parliamentary passage on 26 July. A number of offences have been prosecuted involving the a<B>Bus</B>e of investigatory powers. Widely reported cases include the Stanford/Liddell case, the Goodman/Mulcaire Royal voicemail interception, and Operation Barbatus.
The Act has numerous critics, many of whom regard the RIP as excessive and a threat to civil liberties in the UK. Campaign group Big Brother Watch published a report in 2010 investigating the improper use of RIP by local councils. Some even argue that the Act contravens the Human Rights Act, the European Charter on Fundamental Rights (which was introduced by the Lisbon Treaty) and the European Convention on Human Rights.
The RIP Act was introduced to clarify the powers that government agencies have when investigating crime or suspected crime. It is not specific to the world of computing but was introduced partly to take account of changes in communication technology and the widespread use of the Internet.
There are five main parts of the Act. The most relevant to computing are Part 1 which related to the interception of communications, including electronic data, and Part 3 which covers the investigation of electronic data protected by <B>Encryption</B>. In simple terms, it gives the police and other law enforcement agencies the right to intercept communications where there is suspicion of criminal activity. They also have the right to decipher these data if they are encrypted, even if this means that the user must tell the police how to decrypt the data.
It also allows employers to monitor the computer activity of their employees; for example, by monitoring their email traffic or tracking which websites they visit during the work time. This raises a number of issues relating to civil liberties.
The Copyright, <B>Design</B>s and Patents Act 1988 (c 48), also known as the CDPA, is an Act of the Parliament of the United Kingdom that received Royal Assent on 15 November 1988. The Act was passed following a number of cases, such as:
The Act creates a specific regime of moral rights for the first time in the United Kingdom: previously, an author's moral right had to be enforced through other torts, e.g. defamation, passing off, malicious falsehood.
The Act was also passed to implement European Union directives into UK law.
The Act gives rights to the creators of certain kinds of material, allowing them control over the way in which the material is used. The law covers the copying, adapting and renting of materials.
The law covers all types of material but of particular relevance to computing are:
Copyright applies to all works regardless of format. Consequently, work produced on the Internet is covered by copyright. It is illegal to produce pirate copies of software or more versions on a <B>Network</B> than have been paid for. It is an offence to adapt existing versions of software without permission. It is also an offence to download music or films without the permission of the copyright holder.
In computing, two techniques are used to protect copyright:
Other acts that are particularly relevant to computing are:
Cultural issues are all factors that influence the beliefs, attitudes and actions of people within society. Common cultural influences are family, the media, politics, economics and religion. These are cultural differences between different groups of people. For example, people from difference countries often have a different culture.
There are elements of computer use that have a cultural impact in that they can change our attitudes, beliefs and actions:
"One of the following laws:"
The Data Protection Act and the Computer Misuse Act
"Legislation:"
"Affect:"
Copyright, <B>Design</B>s and Patents (Act)
"Any of the following:"
"Definition:"
a) Copyright, <B>Design</B>s and Patents (Act) 
b) Computer Misuse (Act) 
c) Health and Safety at Work (Act)
"Any of the following:"
Data that relate to a living person//individual who can be identified from that data
"Any of the following:"
You should already have met the internal components of the computer and the peripherals, that sit outside. We are now going to look at two different categories of peripherals. Those that input data into a computer, and those that output data from the computer.
How do we tell what is an input and what is an output device? Think about it from the computer's perspective. If a device is putting data into the computer in the form of text, sound, images, button presses etc. then it is an input device, if the device is outputting things from the computer such as sound, movement, printing, images etc., then it is an output device. It really is that easy to tell the difference, but be warned, some devices can be both input and output!
Let's take a look at two examples:
When you are using the monitor it displays things that you are doing, such as moving windows and clicking on website links. At no point do you click on the screen or put anything into the monitor. The only thing it does is output information, therefore it is an output device. Easy!
A mouse is used to move a little cursor around the screen, clicking and dragging as you go. if you let go of the mouse, the cursor will stop. The computer is relying on you to move the mouse, the mouse won't move on its own! Therefore it is an input device.
Pay special attention to devices with an background, you need to be able to describe exactly how they work!
A mouse is a pointing device used on the screen of a computer. Enables the user to execute commands or issue instructions to the computer by controlling a pointer on the screen.
The keyboard is one of the most popular ways of inputting data information and instructions into a computer. The basic mechanical keyboard relies on springed keys being pressed down to complete an electrical circuit. This circuit then transmits a binary signal (commonly using ASCII) to the computer to represent the key pressed.
There are many different keyboard layouts, with differences between languages and countries. The most popular layout is the QWERTY keyboard. Other layouts include:
There are variations QWERTY keyboard with the UK and the USA having very slight differences in layout. There also variations in English language keyboards such as the Dvorak layout, which followers claim to be superior to QWERTY.
Microphone connected to software that converts human speech into commands or text.
Pros
Cons
And became these:
3. The different colour arrays are combined to form an image and makes this:
4. Once the RGB values have been captured, they can then be stored digitally using SD or compact flash cards. Save formats include JPEG or TIFF.
Pros
Cons
Used in supermarkets,warehouses,libraries keeping track of produce etc. They allow for quick reading of product details so that prices and information can be retrieved and/or stock levels updated. However the amount of data stored in a barcode is very limited
To make sure that the number you have received is correct barcodes employ check digits. Read on to find out more
Pros
Cons
Used in things like multi choice question papers. The student would be given a selection of answers and then mark the ones they thought correct with a pen or pencil. When finished, the forms would be fed into a machine that would look for black marks. The position of these marks correspond to answers and the form could be marked at some speed.They can also be used for student registration 
Used in scanning printed or written text into a digital format. Used by Amazon and Google to scan books.
Used to read data from bank cards and access cards. Data is stored in the magnetic, generally black, strip on the back of these cards
Used in bank cards, often known as part of 'chip and pin'. More secure than Magnetic stripes though more expensive to produce.
Used to read data without physical contact. Examples include the London Oyster Card System. Where the card has a Radio Frequency Identification(RFID) chip.
Pros
Cons
More and more devices are relying on touch technologies.
Pros
Cons
Used in the <B>Design</B> and architectural industries. This allows for people to draw on the <B>Table</B>t in a natural way (as they would with a pencil and paper) and for their drawing to appear on the computer.
Several of the scanners featured here <B>Record</B> biological (bio) measurements (metrics) about human beings. Physical data such as finger prints are unique to each person.
Flat bed scanners are used to convert images and text into a digital format.
 The ridges and troughs on a person's finger and toes are unique to that person. Using a scanner a finger print pattern can be <B>Record</B>ed and compared to others on a <B>Database</B>, allowing a computer to match finger prints from crimes to a suspect, or to allow people into restricted areas.
Retina scanners are used to <B>Record</B> the pattern of blood vessels at the back of someone's eye. As everyone has different pattern of vessels, retina scanners can be used to uniquely identify people.
By taking a picture of the blood vessels and colouring of someone's eye, we can get a unique pattern that can be used to identify individuals. People might try and circumvent this by using contact lenses
With input devices we have a lot of data being sent into the computer, with image capture devices we could be talking about billions of ones and zeroes. How can we make sure that they all get from the input device to the computer safely, without becoming corrupted? There are many error checking <B>Method</B>s out there and you will cover some of them in more detail in Unit 1, however, for the moment we will learn a little about check digits:
An example of using check digits (The exam will not expect you to know this technique) is the final digit of a Universal Product Code computed as follows:
For instance, the UPC-A barcode for a box of tissues is "036000241457". The last digit is the check digit "7", and if the other numbers are correct then the check digit calculation must produce 7. 
Pay special attention to devices with an background, you need to be able to describe exactly how they work!
A cathode ray tube is a Visual Display Unit. You might know them as the old 'fat' televisions and monitors that have mostly been superseded by LCD screens.
Pros
Cons
LCDs are Visual Display Units. Most modern Televisions and Monitors are liquid crystal displays (LCD). An LCD screen is made up by an array of pixels or picture elements, each pixel contains Red Green and Blue and there is a back light that shines through the pixel, creating an image
To change the image displayed on the screen will require different combinations of Red, Green and Blue pixels. To do this the pixels are sandwiched between two polarized grills.
These grills are controlled by an electric current and when current is applied, the grids go perpendicular to each other, blocking out all light from a particular colour.
Applying different current patterns to different pixels means that you can choose whether each pixel displays Red, Green or Blue, thus building an image:
Pros
LCD screens have several benefits over traditional CRT screens:
Cons
Plasma screens are Visual Display Units. They are generally more expensive than LCDs and CRTs, and offer similar performance to an LCD. They are power hungry and used mainly for large television sets
Speech output might include speech synthesis, headphones or speakers
Electronic paper is made up of tiny plastic balls that have different colours on each side (black and white). Applying an electrical current to the 'paper' flips the balls to make the pattern of a picture and an image is displayed. The image stays there until you apply another current. This is used in modern e-book readers such as the Amazon Kindle and in other devices such as phones
Pros
Cons
There are several different types of Printers, the one's you need to know are below
Impact printers rely on a forcible impact to transfer ink to the media, similar to the action of a typewriter. All but the dot matrix printer rely on the use of formed <B>Character</B>s, letterforms that represent each of the <B>Character</B>s that the printer was capable of printing. Impact printers varieties include, typewriter-derived printers, teletypewriter-derived printers, daisy wheel printers, dot matrix printers and line printers. Dot matrix printers remain in common use in <B>Bus</B>inesses where multi-part forms are printed, such as car rental services, this allows several sheets of paper to be written to with one strike of the printer head, it also allows for carbon paper to be written to through sealed envelopes:
Dot matrix printers use a print head containing a line of pins. The number of pins can vary from 7 into the dozens. As the print head passes over the paper the pins impact on the ink ribbon forming <B>Character</B>s on the paper line by line.
Pros
Cons
Inkjets are examples of non-impact printer. They operate by propelling variably-sized droplets of liquid or molten material (ink) onto almost any sized page. They are the most common type of computer printer used by consumers.
Pros
Cons
Lasers are examples of non-impact printers. A laser printer rapidly produces high quality text and graphics. They work in the following way:
Pros
Cons
Plotters were an alternate printing technology once common in engineering and architectural firms. Pen-based plotters rely on contact with the paper, but not impact, per se, and special purpose pens that are mechanically run over the paper to create text and images. They were particularly adept to printing vector graphics, though they have generally been replaced with wide-format conventional inkjet/laser printers.
Pros
Cons
Many 3D printers work by heating up a filament of coloured plastic, fed from a spool. As the plastic cools it builds the model from the base up. 
There are also 3D printers which work with resin, powder, or paper. There are medical applications which build prosthetics and even much larger printers which use concrete for building.
For a seven pin impact printer, what <B>Character</B> would the following line codes output:
This section will be looking at the various forms of secondary storage devices (media). For each device you should be familiar with the following details:
Pay special attention to devices with an background, you need to be able to describe exactly how they work!
Magnetic media stores data by assigning a magnetic charge to metal. This metal is then processed by a read head, which converts the charges into ones and zeros. Historically, magnetic media has been very popular for storing programs, data, and making backups. However, solid state technology is starting to be used more and more, storing programs and data on new devices such as mobile phones and cameras.
Hard disks are usually found inside computers to store programs and data. They are increasingly cheap and more and more companies are using them to back things up. Hard disks can vary in physical size with some disks getting as small as your thumb. More closely packed platters, greater density of data on each platter to allow for more tracks and cylinders and the ability to write smaller magnetic spots have all been developments in the <B>Design</B> of hard disks to increase their storage capacity. The capacity of a commercial disk is currently up to about 4 terabytes allowing users to read and write to them. They are constructed from several key components:
For the exam you must be able to explain how a hard disk works:
Writing data is very similar:
Pros
Cons
An SSD(Solid state drive) consists of an array of NAND <B>Flash Memory</B> with a controller that manages the pages and blocks and complexity of writing. A block is made up of many pages, when you need to overwrite pages it has to be erased before it can be written to however because of the limitations of the technology the whole block must be erased.
NAND <B>Flash Memory</B> is based on a floating gate transistor which traps and stores charge. 
-FINISH-
Pros
Cons
Increasingly obsolete, the tape has been a medium to deliver software and back up data since the early days of computing. Nowadays they are used mostly for corporate backing up and archiving of data. Tapes are sequential data stores, meaning that if you had information stored at the end of the tape you would have to wind your way through the entirety of the tape before you could read it. There is no random access like with a hard disk! Tapes can be several terabytes in size and reading and writing can be very fast as long as you read or write continuous sections of the tape at once.
Pros
Cons
Optical media works by creating a disc with a pitted metallic surface. There are several different types of disk out there ranging from 650 MB to 128 GB, with the pits and lands getting closer together for higher volume disks. The principle behind how each of them works is the same.
A CD-ROM is a metal disc embedded into a plastic protective housing. Each disc has to be 'mastered'; this is the process of creating the CD and placing the data on it. CDs are WORM (Write Once, Read Many) media; this refers to the fact that once they have been mastered, there is no way to change the data on them. 
Reading from a CD-ROM
Pros
Cons
The CD-R is made of a reflective metal disk with a layer of (usually green, opaque) dye on top.
Writing to a CD-R
Reading from a CD-R
Pros
Cons
The CD-RW is made of a reflective metal disk with a layer of a special ('phase change') metal on top.
Writing to a CD-RW
Reading from a CD-RW
Pros
Cons
USB Flash drives are solid state, that means that there are no moving parts. This is very useful for seek times as we don't have to wait for mechanical movement, meaning seek time is very low and it allows for fast Random Access Memory. Flash drives can be set to read only mode, but they will always allow for reading and writing. The size of flash drives is not as great as a Hard Disk and they are generally much more expensive per megabyte
Pros
Cons
Work in much the same way as a Flash drive and can often be converted into Flash Drives. They have different connectors and are generally smaller than USB Flash drives allowing for them to be used in cameras, mobile phones and game consoles.
Description here...
= Client Server Model =
The client-server model is a architecture that implies every computer on the <B>Network</B> will be a client or a server. Clients are PC's that generate requests for the servers to handle. The clients rely on servers for resources that the client needs such as files or processing power. Servers are powerful machines that are <B>Design</B>ed to handle a specific task such as <B>Network</B>ing, printing or file management.
Examples of client-server models are virtually everywhere. In a situation where a PC that is accessing a website for information on a topic such as client-server, the web server is acting as the server by providing the webpage and the PC is the client which is viewing the content of the web page on client-server(the page explanation on client server).
One of the key aspects of computing is communication. For example, <B>Input and Output Devices</B> need to communicate with the processor, the hard disk needs to communicate with memory and so on.
Communication in this sense takes place through the transmission of data and instructions. We have already looked at many examples of data transmission inside the computer. In this section, we are more concerned with communication between computers and peripheral devices and also between one computer and another across local and global <B>Network</B>s. 
This section will also include a detailed <B>Analysis</B> of the infrastructure that makes up the Internet.
Serial transmission sends and receives data one bit at a time in sequence. Serial connections are used to connect most of the peripherals to the computer such as the mouse and keyboard, and it is serial cables that connect computers together to form a <B>Network</B>.
The speed of the transmission will depend on the type of cabling used so it is not necessarily the case that serial transmission is slow. For example, the Universal Serial <B>Bus</B> (USB) is a high-speed serial connection that allows peripheral devices to be connected to your computer. Serial <B>Network</B> cables are capable of transmission rates of 1 Gbps (1000 million bits per second).
Parallel transmission uses a number of wires to send a number of bits simultaneously. The more wires there are, the more data can be sent at any one time. A 32-bit parallel connection, for example, may connect the processor and memory together.
Universal Serial <B>Bus</B> (USB) was <B>Design</B>ed to standardise the connection of computer peripherals (including keyboards, pointing devices, digital cameras, printers, 
por<B>Table</B> media players, disk drives and <B>Network</B> adapters) to personal computers
Bandwidth is the term used to describe the amount of data that can be transmitted along a communication channel. It relates to the range of frequencies that are available on the carrier wave that carries the data. The range in this case is the difference between the upper and lower frequencies. As the range of frequencies increases so does the amount of data that can be transmitted within the same time frame. We have already touched on the relative speed at which data can be transmitted. Speed is a vital factor in communications. Bandwidth is measured in hertz (Hz) and megahertz (mHz).
Bit rate is the term used to describe the speed at which a particular transmission is taking place. It is closely linked to the bandwidth because the bit rate will be limited by how much bandwidth is available.
Bit rate is measured in bits per second (bps). Bandwidth represents the frequencies and therefore the capacity that is available and bit rate represents the actual speed of transfer. The bit rate that can be achieved is directly proportional to bandwidth.
Baud rate is another term used to describe the speed at which data can be transmitted. One baud represents one electronic state change per second. An electronic state change may be a change in frequency of the carrier wave, a change in voltage, a change in amplitude or a shift of a waveform.
Traditionally, one bit is sent on each state change so one baud is roughly equates to one bit per second. However, it is possible to send more than one bit per state change by using different voltage levels to represent the bits. In this case rather than sending bits, you are sending 'symbols', which may have any number of bits in them. The baud rate is determined by the transmission medium.
Latency is the general term used to explain the time delay that occurs when any component within a computer system is responding to an instruction. This is because the instruction is being transmitted down cables, through <B>Bus</B>es and logic gates, all of which takes time. Therefore, latency can occur at any stage of transmission process. These delays can be so short as to be unnoticeable.
There are three general causes of latency when communicating data:
To send a single bit of data you will always have a delay caused by latency for the data to travel the physical distance to its destination. Having a 25 Mbps connection does not somehow allow a single bit data of data to travel that a distance any faster. A large bandwidth connection simply allows you to send or receive more data in parallel. The data still needs to travel to and from your computer. 
 When data is transmitted over long distances latency can become a problem. Explain what latency is. 
each signal change bit rate can be HIGHER than baud rate. If the baud rate is S and there are n bits encoded in each symbol change, bit rate is S x n.
Synchronous means that the two devices which are communicating will synchronise their transmission signals. Using the system clock, the computer sending the data will control the transmission rate to be in time with the device or computer receiving the signal. If the two devices are not synchronised then data could be lost during transmission. Once they are synchronised the two devices can send and receive data without need for any further information.
Asynchronous transmission does not require the permanent synchronisation of the sender's and receiver's system clocks. Instead, it synchronises only for the duration of the transmission by sending additional bits of information called start and stop bits.
To send a <B>Character</B> may require an 8-bit code to be transmitted. In addition to the eight bits, asynchronous data transmission requires at least two other bits. At the start of the eight bits there is a start bit and at the end, a stop bit. The <B>Character</B> may also include a parity bit
The process works as follows:
Protocols are a <B>Method</B> for ensuring that different computers can communicate with each other. A protocol is a set of rules. In the context of communication, there are a number of rules that have been established in relation to the transmission of data. Protocols cover aspects such as the format in which data should be transmitted and how items of data are identified.
From using the Internet, you will probably already have comes across four common protocols:
 What is synchronous data transmission? 
solid stream 
DHCP is a <B>Method</B> of automatically allocating IP addresses to machines on a 'need to use' basis. Rather than have every machine in the <B>Network</B> given a fixed IP address we allocate IP addresses to those machines as and when they connect. The key word in DHCP is "dynamic." - instead of having just one fixed, specific IP address, most computers will be assigned one that is available from a subnet or "pool" that is assigned to the <B>Network</B>.
It is possible to have more machines than available IP addresses on the assumption that everyone wont be using the <B>Network</B> at once.
We don't have to manually assign IP addresses and so saves time and avoids the possibility of accidentally assigning the same IP address twice.
Tracing internet activity may be difficult as the same machine may have two or more different IP addresses over a period of time.
Any device being used as a server cannot be allocated an IP address dynamically.
Each device connected to the Internet needs a unique address. The <B>Design</B> of IP version 4 (IPv4) specified a 32-bit <B>Field</B> for this in the IP header. In theory this allows for 2 addresses (4,294,967,296) which, at the time, seemed a big enough address space to allow for future expansion. However due to the way in which the addresses space was structured and allocated, and the unimaginable growth of the Internet, the address space is now depleted.
In preparation for this depletion a new version of IP has been developed and is called IP version 6 (IPv6). This uses 128-bit addressing. As of 2016 both systems are in use, with major new <B>Network</B>s using IPv6. However IPv4 is still predominant and will coexist for many more years.
This section will deal with IPv4.
To write out the 32-bit address we don't usually write it in binary. We split it into four 8-bit chunks (bytes) and convert each byte to decimal. We then write the four decimal values with a '.' between them. This is then referred to as dotted decimal notation.
11000000101010000000111000010111 = 192.168.14.23
An IP address has structure in a similar way that a postal address has structure. A postal address is a multi-level route to the destination.
This tells us to get to this location we first need to get to the UK, then London, then Newtown then the road. On the road we will find number 10.
IP address have a two-level address. First we have the <B>Network</B> address, then the host address and all within the 32-bit address.
The <B>Network</B> address will be common to all devices connected to a particular <B>Network</B> such as a home, an office or a big <B>Bus</B>iness.
Generally the <B>Network</B> is under one administrative control. The <B>Network</B> may be divided into sub <B>Network</B>s but more of that later. Thus we first have to deliver the packet to the right <B>Network</B> and this is the job of a <B>Router</B> or <B>Router</B>s. Once it is on the right <B>Network</B> we can deliver it to the correct host.
The question arises as to how many of the 32 bits we should devote to the <B>Network</B> address and how many to the host.
None of theses options is ideal by itself. We have a few really big <B>Network</B>s, many medium sized <B>Network</B>s and lots of fairly small <B>Network</B>s. Thus we adopt all three approaches and define three <B>Class</B>es of <B>Network</B>s.
We use the first bit or bits of the IP address to indicate the <B>Class</B>.
<B>Class</B> A addresses start with a binary 0 hence the first byte is in the range 0-127
<B>Class</B> B addresses start with binary 10 hence the first byte is in the range 128-191
<B>Class</B> C addresses start with binary 110 hence the first byte is in the range 192-223
For all devices on a given <B>Network</B>, the <B>Network</B> bits will be the same. The host bits will then be different for each device. With each <B>Class</B> of address (A, B or C) we have 8, 16 or 24 bits respectively for hosts, so we can calculate the range of possible host addresses we can have.
However, in any <B>Network</B>, the first and last addresses are special.
The first address (all 0's) is used to refer to the <B>Network</B> itself. This is not usable as a destination address but is used in routing protocols. The last address (all 1's) is called the <B>Network</B> directed broadcast and can be used to send an IP packet to all devices in the <B>Network</B>.
A large <B>Bus</B>iness with a <B>Class</B> A or B address will probably have many seperate sub<B>Network</B>s in their organisation. They subdivide the host <B>Field</B> in their allocated address by 'borrowing' bits to create sub<B>Network</B>s. We now ignore the <B>Class</B> of the address and have a common new division of the bit structure which is specified with a sunbet mask. Research how this works.
When an organisation has subnetted their <B>Network</B>, some subnets may need further division. Thus we end up with subnets of varying sizes. We hence have different structures of bits in different <B>Network</B>s. Thus we have many different subnet masks, hence the name Variable Length Subnet Masks (VLSM) . Research how to do this.
With the structure of the Internet, many companies who own sequential <B>Network</B> addresses may all be interconnected and share a common link back towards the core. Thus it is possible to aggregate several addresses together to create 'supernets'. We then have to ignore the <B>Class</B> of address and just use the subnet masks. This is called <B>Class</B>less Inter Domain Routing.(CIDR). How has this helped keep the Internet working.
The Internet protocol has evolved over a period of time and undergone several versions. IP version 4 (IPv4) has been the main version through the explosive growth of the Internet through the 80s, 90s and into the 21st century. With a 32 bit address <B>Field</B> there are over 4 billion addresses. However due to the way the addresses were subdivided, the way they were allocated and used and the growth, no more addresses are available for new <B>Network</B>s. NAT has gone a long way to aleviate thie problem, but demand is such that a new and bigger adress space has been developed. This is IP version 6 (IPv6). This new version has a 128 bit address <B>Field</B> and many new features.
Ipv4 is covered by RFP 791 in all its detail.
<B>Field</B>s of interest are
Ipv6 was first covered by RFP 2460 in all its detail, but is often being superceeded.
This version allocates 128 bits for addresses. This is 2 addresses ( 7.9×10 )
<B>Network</B> Address Translation (NAT) is a process where an IP packet goes through a device, usually a <B>Router</B>, and the source and/or destination IP address is swapped for a different one.
Imagine the senario where a company with 1000 IP devices has been allocated a <B>Class</B> C IP address. This only gives the company 245 unique address it can use. Thus the company uses a private address range internally such as 172.16.0.0 . This <B>Class</B> B <B>Network</B> has over 65,000 addresses. However these addresses are non-rou<B>Table</B> in the Internet and IP packets with this as a source address will not be returned if they make it out to the Internet. The 172.16.0.0 addresses are called Local Addresses. The <B>Class</B> C addresses are called Public Addresses. A <B>Router</B> on the edge of the <B>Network</B> connects the LAN (or LANs) inside the company to the ISP. This edge <B>Router</B> hold a list of the allocated address from the <B>Class</B> C range. This is refered to as the NAT pool. 
This edge <B>Router</B> then looks for IP packets which have a destination address out on the Internet. Before the packet is sent to the ISP, the <B>Router</B> swaps the source address (local address) in the IP Packet for an address from the NAT pool (public address). The process of swapping is called translation. A copy of translation is kept. The IP packet then traverses the Internet and hits the destination device. The reply is formed and the return IP packet is generated. The sources address the packet came in with (the public address from the NAT pool) now becomes the destination address for the return journey. The public address is rou<B>Table</B> and thus the packet is routed back to the edge <B>Router</B> of the companies <B>Network</B>. Here the original translation was <B>Record</B>ed so the reverse translation can be performed on the destination address. The packets public destination address is swapped for the local address. The packet now has a destination address of the original sources and is returned to the originator.
Clearly the translation must be maintained in memory to allow the return packet to be translated back. On some occasions one outbound packet may result in my hundreds of return packets and thus the same translation will be used by all. However after some time we can assume no more packets will be comming back and the translation <B>Record</B> can be deleted. This is typically 60–120 seconds. (How long do you wait for a web page to load before you give up ?)
In the early days of the Internet, when a home user connected to the Internet via an ISP, the ISP had enough public IP addresses to give each user their own public IP address for the duration of their connection. Each home user had one PC and this device received this public address. However most home users now connect many devices to the Internet via their ISP. The ISPs do not have enough addresses to give each home several addresses. Hence as of today (2016), a home is given one IP address and this sits on the home <B>Router</B>'s external interface. Internally the home <B>Network</B> use private address and the <B>Router</B>'s internal (LAN) interface has one of these addresses. The home devices then each get a unique address from the private range. Thus when ever an internal device sends an IP packet out to the Internet, it 'borrows' the single public address. The same is also true for small offices of just a handfull of users. Hence the term 'SOHO' (Small Office/ Home Office).
This process of NAT where there is only one public IP addresses is also known as NAT - <B>Overloading</B> or Port Address Translation (PAT).
Above is a typical home <B>Network</B> showing several devices on a home <B>Network</B> with private addresses from the 192.168.0.0 <B>Class</B> C <B>Network</B>.
The ISP has allocated an address 82.10.250.19 which is allocated to the interface on the <B>Router</B> connecting to the Internet. This is called the public address. Devices can communicate internally using their private addresses, but must 'borrow' the public address when sending packets out onto the Internet.
Take an example of a PC on internal <B>Network</B> with an IP address of 192.168.0.101. 
In the case where the company had 1000 computers and only a <B>Class</B> C <B>Network</B>, how many users would be able to get access to the Internet. What happens when a user has finished their Internet session or turned off their PC ?
In a SOHO <B>Network</B> there is only one public IP address. Does this mean only one user can use the Internet at any one time ?
One of the key aspects of computing is communication. For example, <B>Input and Output Devices</B> need to communicate with the processor, the hard disk needs to communicate with memory and so on.
Communication in this sense takes place through the transmission of data and instructions. We have already looked at many examples of data transmission inside the computer. In this section, we are more concerned with communication between computers and peripheral devices and also between one computer and another across local and global <B>Network</B>s. This section will also include a detailed <B>Record</B> of the infrastructure that makes up the Internet.
A <B>Network</B> is any number of computers connected together for communication, sharing processing power, storage capacity and other resources. In order to connect to a <B>Network</B>, a computer must have a <B>Network</B> adapter, more commonly know as a <B>Network</B> Interface Card (NIC).
The NIC is a printed circuit board which is contained inside the computer like any other card (graphics and sound cards, for example). The NIC will be specifically <B>Design</B>ed to allow the computer to connect either via cable or wirelessly to the particular <B>Network</B> topology being used. The type of card also dictates the speed of data transmission that will be available between devices and the <B>Network</B>. These are typically already integrated into modern motherboards.
<B>Network</B>s are usually described in terms of geographical area that they cover and the way in which the connections are configured, known as <B>Network</B> topology.
A <B>Local Area <B>Network</B> (LAN)</B> is a number of computer and peripherals connected over a small geographical distance, covering one building or site. Most LANs are made up of one or more servers and clients. A server is a high specification computer with sufficient processing power and storage capacity to service a number of users. A client is any computer attached to the <B>Network</B>.
A Wide Area <B>Network</B> (WAN) is a number of computers and peripherals connected together over a large geographical distance. This could mean any <B>Network</B> that extends beyond a single site right up to global <B>Network</B>s such as the Internet. WANs make use of a wider variety of communication media including telephone wires, microwaveable links, satellite connections and fibre optic cables.
In addition to the server and client the other critical device within a <B>Network</B> is a <B>Router</B>. Modern <B>Router</B>s are actually a number of devices merged together into a single device. The typical <B>Router</B> for a home <B>Network</B>:
A star topology takes its name from the simplified way in which it can be represented on paper as shown in image below. This shows the devices are conceptually connected together.
The image above shows each client connected to a central server via individual connection. The main feature is the dedicated connection between server and client. In reality it will be a <B>Switch</B> in the centre with server attached to one of the ports. The server will be high specification machine with a large amount of processing power and storage capacity. The clients have access to the server through the cabling.
The other main <B>Network</B> topology is the <B>Bus</B> topology, where all of the nodes within the <B>Network</B> are connected via one main cable. If there is a main server, all of the clients connect to it down this main cable. This cable carries data between the server and the clients with each client branching off the main <B>Bus</B> cable.
The main cable or backbone must allow high-speed data transmission as all data must pass down this one channel. A common implementation of the <B>Bus</B> system is an Ethernet <B>Network</B> system.
There is a distinction to be made between the physical topology and logical topology of a <B>Network</B>. Physical topology refers to actual connection of cables. However, it is possible for <B>Network</B>s that are connected in a particular physical topology to act in a different way with the addition of more hardware and software. For example, some Ethernet <B>Network</B>s were physically laid out as a star, but used <B>Hub</B>s to repeat signals, which effectively creating a <B>Bus</B> <B>Network</B>s.
In the star and <B>Bus</B> topologies, the diagram shows a main server. Although the clients have local resources in terms of processing power and storage capacity, they are dependent upon the server. This is the most common way of constructing a LAN with a large number of users. The server will be a high-end computer with a large amount of processing power and storage capacity. It needs to be big enough and fast enough to cope with the demands placed upon the clients.
In a peer-to-peer <B>Network</B>, no one computer is in overall control of the <B>Network</B>. Instead the resources of each computer or workstation are available to all the computers in the <B>Network</B>. Each workstation therefore can act either as a client or a server, depending on the current task. This more common among smaller <B>Network</B>s on for certain applications such as file sharing.
A wireless <B>Network</B> varies from a wired <B>Network</B> in that it does not use cables to make the physical connections between devices. Instead the data is sent using radio waves. Wireless <B>Network</B>s can be implemented over small or large geographical distances so it is possible to have a wireless LANs (WLAN) and wireless WANs (WWAN). Many <B>Bus</B>iness and home <B>Network</B>s are set up wirelessly, doing away with the need for costly cabling and enabling easy access to the <B>Network</B> from any device with a wireless <B>Network</B> adapter (NIC).
All devices on a <B>Network</B> have a Media Access Control (MAC) address. This is a unique identifier encoded into the <B>Network</B> interface card (NIC) in the format of six groups of two hex digits separated by colons, e.g. 02:32:45:77:89:ab. Any device that connects to a <B>Network</B> using WiFi will connect through a wireless access point and must have its own unique <B>MAC Address</B>. Every NIC ever manufactured has a unique address meaning that they can be used to identify every device uniquely. The first half of the <B>MAC Address</B> is the manufactured code and the second half is the unique device code allocated <B>Network</B> adapter (NIC).
WiFi is the generic term for a Wireless Local Area <B>Network</B> (WLAN) where devices can connect wirelessly to each other and where a connection can be made to the Internet providing one of the devices in the <B>Network</B> is online. WiFi operates to a generic standard called IEEE 802.11, ensuring that all devices are compliant and can connect and transmit data around the <B>Network</B>.
SSID is simply the technical term for a <B>Network</B> name. 
When you set up a wireless home <B>Network</B>, you give it a name to distinguish it from other <B>Network</B>s in your neighbourhood. 
You'll see this name when you connect your computer to your wireless <B>Network</B>. 
An SSID is the primary name associated with a 802.11 wireless local area <B>Network</B> (WLAN) including home <B>Network</B>s and public hotspots. 
On home Wi-Fi <B>Network</B>s, a broadband <B>Router</B> or broadband modem stores the SSID and allows administrators to change it. 
<B>Router</B>s can broadcast this name to help wireless clients find the <B>Network</B>
Strong <B>Encryption</B> of transmitted data can be done using WPA /WPA2, SSID (Service Set Identifier) broadcast disabled, MAC (Media Access Control) address white list:
Wi-Fi Protected Access (WPA) is a security standard for users of computers equipped with a wireless connection. It is an improvement on and is expected to replace the original Wi-Fi security standard, Wired Equivalent Privacy (WEP). WPA provides more sophisticated data <B>Encryption</B> than WEP and also provides user authentication. WEP is still considered useful for the home user, but insufficient for the corporate environment where the large flow of messages can enable hackers to discover <B>Encryption</B> keys more quickly.
Stands for Wi-Fi Protected Access 2, the follow-on security <B>Method</B> to WPA for wireless <B>Network</B>s that provides stronger data protection and <B>Network</B> access control. It provides enterprise and consumer Wi-Fi users with a high level of assurance that only authorised users can access their wireless <B>Network</B>s. Based on the IEEE 802.11i standard, WPA2 provides government grade security
Most <B>Router</B>s and other wireless access points automatically transmit their <B>Network</B> name (SSID) at regular intervals (every few seconds). This SSID broadcasting feature of Wi-Fi <B>Network</B> protocols is intended to allow clients to dynamically discover and roam among wireless <B>Network</B>s (WLANs). For security, this feature can be disabled. The tradeoff is between security and the convenience of setting up new <B>Network</B>ing clients.
A media access control address (<B>MAC Address</B>), also called physical address, is a unique identifier assigned to <B>Network</B> interfaces cards (NICs) for communications on the physical <B>Network</B>. Many <B>Network</B> admins set up <B>MAC Address</B> whitelists, or a <B>MAC Address</B> filter, to control who is allowed on their <B>Network</B>s. This is used when <B>Encryption</B> is not a practical solution or in tandem with <B>Encryption</B>.
As in wired <B>Network</B>s, a protocol describes the rules of data communication that the sender and receiver follow.
CSMA/CA acts to prevent collisions before they happen.
Carrier Sense: prior to transmitting, a node first listens to the shared medium (such as listening for wireless signals in a wireless <B>Network</B>) to determine whether another node is transmitting or not. 
Collision Avoidance: if another node was heard, the transmitter waits for a random period of time for the node to stop transmitting before listening again for a free communications channel.
Request to Send/Clear to Send (RTS/CTS) is used at this point to mediate access to the shared medium. In a wireless <B>Network</B>, the Access Point only issues a Clear to Send to one node at a time. 
Think of Request to Send/Clear to Send (RTS/CTS) like a "talking stick" - only the node with the "talking stick" can "talk" (transmit)
Transmission: if the medium was identified as being clear or the node received a CTS to explicitly indicate it can send, it sends the frame in its entirety. 
The node awaits receipt of an acknowledgement packet from the Access Point to indicate the packet was received and checksummed correctly. 
If such acknowledgement does not arrive in a timely manner, it assumes the packet collided with some other transmission, causing the node to enter a period of backoff prior to attempting to re-transmit.
Disadvantage: the overhead of RTS, CTS and transmission is great for small data transfers.
Handshaking is an automated process of negotiation that dynamically sets parameters of a communications channel established between two entities before normal communication over the channel begins
RTS / CTS is an example of a handshake protocol
 CSMA/CD with RTS/CTS is an example of a handshaking protocol. Explain one purpose of a handshaking protocol.
With NAT we have discussed the translation <B>Table</B> which allows an Internet bound packet to create a translation of a private IP address to a public IP address. This translation is used by the returning packet to ensure it heads back to the original source.
What would happen if a IP packet came to from the Internet to the <B>Router</B> and there was no outbound <B>Record</B>ed translation ? The answer is it would be blocked ! The NAT process has inadvertantly created a <B>Firewall</B>. Outbound requests create a 'temporary' hole through which replies are allowed to pass. However inbound traffic, initiated from the Internet, will not be allowed in.
For the majority of SOHO users this is not a problem. All internet traffic is initiated from inside the <B>Network</B> on a users device. When we 'surf' the web, send or check our email or watch TV, we initiate the conversation. Some applications which appear to allow inbound requests actually poll the servers frequently, so again are initiating the conversations.
However there are increasingly situations where it may be required to permit an IP exchange to be initiated from the Internet.
For such situations we must be able to allow external connections in to a range of devices, but using the same one public IP address.
In the TCP or UDP header we have addresses which are used to indicate the application we wish to access. These 'addresses' are called ports. Each well know protocol has its well known port or range of ports. HTTP is on port 80. We can use this port number to get round the problem of only having one public IP address but wishing to offer a access to a range of internal devices.
We simply specify a different port number for each internal device and the create a static translation on the <B>Router</B> to map that port to a specific internal IP addresses, and a given port. This static translation is called 'Port Forwarding' . It is configured directly on the <B>Router</B> and thus is always there. When a IP packet comes in it is compared to the translation, and if it matches, it is translated and allowed in.
This imagine the senario where we have a NAS device on 192.168.1.10 and an IP camera on 192.168.1.20. Both have a web interface and can be accessed internally on port 80. Our external public IP addresses is 88.11.232.41
We now agree the following :-
Thus externally on the Internet if we send a web request to 88.11.232.41 on port 16000, it will be translated to 192.168.1.10 port 80 and hit the NAS's web server.
Similarly if we send a web request to 88.11.232.41 on port 16001, it will be translated to 192.168.1.20 port 80 and hit the IP camera's web server.
(On larger <B>Network</B>s we don't need port forwarding).
In the same way SOHO <B>Network</B>s require Internet access to some devices, the call for this in larger companies is even greater. Large companies may require access to <B>Bus</B>iness servers for remote employees of associated companies. They may run their own web and mail servers which need to be accessed by the public. Whilst NAT overload can be used, it is more common in such senarios to dedicate some of the NAT pool for externally accessible devices. ( Remember larger companies may have a <B>Class</B> C address or a sub division of it. Thus they have a pool of addresses to use for Internet access.)
Imagine a <B>Bus</B>iness has a <B>Class</B> C public address 194.60.11.0 and has 4 internal servers that it wishes to be publically accessible. It is using 172.17.0.0 as an internal private <B>Class</B> B address
Rather than give the whole range 194.60.11.1 - 194.60.11.254 to the dynamic NAT pool, we reserve the first 9 addresses for internal devices and start the pool at 194.60.11.10.
We then configure the following static NAT mappings. Hence this is called Static NAT.
Thus anyone wanting the web server will send a request to 194.60.11.1. This will be translated to 172.17.230.2 and hit the internal web server.
The problem arising from the lack of IP version 4 addresses was predicted long before it became a issue. To this end a number of solutions have been devised along the way. One such solution is the idea of public and private IP addresses.
If we wish to build our own enclosed <B>Network</B> and not connect it to the internet, we are of course at liberty to use any IP addresses we want. However should our <B>Network</B> ever get connected to the Internet we do not want to have potential conflict with an Internet addresses. To this end, a range of IP addresses have been specified to be private and only used on Internal <B>Network</B>s. These <B>Network</B>s are not to be connected 'directly' to the Internet. These are then Private IP addresses. The remaining addresses are then Public IP addresses and devices with these addresses can be directly connected to the Internet.
In addition it may be that we have a <B>Network</B> of over 1000 devices but have only been allocated a <B>Class</B> C address. This has insufficient host addresses for our needs. Hence we use a private address range for our internal communications and borrow addresses from the <B>Class</B> C range whenever we go out to the Internet. (More of this later in NAT)
The private IP addressed are further explained in RFC 1918
Hence if you look at your home or college <B>Network</B>, it is most likley that you will be using a private address for your device.
Should an IP packet get out to the Internet with a private IP address as the source address, internet <B>Router</B>s should delete it. However if it gets to its destination and a reply is returned, the original sources address, will now be the destination address on the returning packet. Internet <B>Router</B>s will not deliver the packet and will just delete them. Thus we call them non-rou<B>Table</B> addresses. This is technically not correct as we would route them in our internal <B>Network</B>. It is just out on the public Internet they are unrou<B>Table</B>.
Be familiar with the following protocols:
Be familiar with FTP client software and an FTP server, with regard to transferring files using anonymous and non-anonymous access.
Be familiar with how SSH is used for remote management.
Know how an SSH client is used to make a TCP connection to a remote port for the purpose of sending commands to this port using application level protocols such as GET for HTTP, SMTP commands for sending email and POP3 for retrieving email.
Be familiar with using SSH to log in securely to a remote computer and execute commands.
Explain the role of an email server in retrieving and sending email.
Explain the role of a web server in serving up web pages in text form.
Understand the role of a web browser in retrieving web pages and web page resources and rendering these accordingly.
The structure of IPv4 address was devised using <B>Class</B>es to indicate the division between the <B>Network</B> address and the host address.
With increasing pressure on <B>Network</B>s to maximise the utilisation of addresses, administrators have subdivided their <B>Network</B>s into smaller sub<B>Network</B>s (subnets). Thus the boundary on the 8, 16 or 24 bit point may not be where the division occurs.
In a similar way, several sequential <B>Network</B>s can be aggregrated to look like a super<B>Network</B> (supernet), again the boundary between <B>Network</B> and host <B>Field</B>s may not be where the <B>Class</B> indicates.
Thus we need a different <B>Method</B> to indicate where the split is in the IP address. We cannot alter the current structure, so we need an additional parameter.
A subnet mask is a 32 bit binary number where a binary 1 indicates a <B>Network</B> bit and a binary 0 represents a host bit in the corresponding IP address. 
Thus subnet masks are always a series of 1s followed by a series of 0s. These masks are used on <B>Router</B>s and end devices to indicate where the split is, so the <B>Network</B> portion of the corresponding IP address can be identified.
<B>Router</B>s will learn, or be configured with, which subnet masks to use for the <B>Network</B>s they are connected to. End devices will learn their subnetmask through DHCP or be configured with the appropriate value.
We can write subnet masks in binary or dotted decimal (just like IP addresses).
Thus we can write the default subnet mask for a <B>Class</B> A, B and C <B>Network</B>s
When an IP packet arrives on a <B>Router</B>, the <B>Router</B> examines the destination address to decide what to do. The <B>Router</B> has an internal <B>Table</B> (the routing <B>Table</B>) which stores all the <B>Network</B>s it knows about and the associated interface which leads to that <B>Network</B>. The <B>Router</B> thus needs to know the destination <B>Network</B> of the packet so it can use this as a lookup in the routing <B>Table</B>.
When a packet originates on an end device, the end device will need to know if the destination is on the same local <B>Network</B> or off on a different <B>Network</B>. It does this by examining its own local address to see which <B>Network</B> it is on, and then compares this to the destination <B>Network</B> of the packet. If the two match, the destination is on its own <B>Local Area <B>Network</B> (LAN)</B>. If not it is on a different <B>Network</B> and the packet should be forwarded to the default <B>Router</B> (sometimes called the gateway).
In the two scenarios above we have a IP address and a subnet mask and have to work out the <B>Network</B> address.
The process is to 'bitwise AND' the corresponding bits in the subnet mask and the IP address. The mask acts like a filter, allowing <B>Network</B> bits through (where there are 1s in the mask) and blocking host bits (where there are 0s in the mask).
Bitwise AND
Thus given a device with the IP address 192.168.1.1 and the subnet mask 255.255.255.0, calculate the IP <B>Network</B> address of the device
Thus, an IP packet arriving with a destination address of 192.168.1.1 on an interface is bitwise ANDed with the associated mask of 255.255.255.0. This tells us the destination is on the 192.168.1.0 <B>Network</B> and the device can look up where the <B>Network</B> is.
The <B>Network</B>s above have all used subnet masks where the division falls on the 8 bit boundary. This is not always the case. Take an organisation that owns the 200.41.11.0 <B>Class</B> C <B>Network</B>. It internally divides this into two seperate sub<B>Network</B>s by borrowing one bit from the host <B>Field</B>. Thus the subnet mask which was 255.255.255.0 for the whole <B>Class</B> C <B>Network</B> is now 255.255.255.128 for each of the two sub<B>Network</B>s. Work out the <B>Network</B> addresses for the two sub<B>Network</B>s. What will be the range of IP addresses availabel on each subnet?
An ISP has four customers with the following <B>Class</B> B IP <B>Network</B>s. 
The ISP wishes to aggregate the 4 <B>Network</B>s into a single <B>Network</B> to advertise upstream towards the core. What address and mask could be advertised to represent all four of these <B>Network</B>s?
Describe the role of the four layers of the <B>TCP/IP Stack</B> (application, transport, <B>Network</B>, link).
Application
The <B>Application Layer</B> makes sure that the data is sent in a format that will be understandable by the recipient. This will mean formatting data to be sent in a standard way applicable to that application, for example HTTP, FTP etc. In this case we are going to wrap each piece of data in XML tags.
Describe the role of sockets in the <B>TCP/IP Stack</B>.
Be familiar with the role of MAC (Media Access Control) addresses.
Explain what the well-known ports and client ports are used for and the differences between them.
In <B>Network</B>ing you generally have clients that connect and share data. In some cases, there are servers which act as a central <B>Hub</B> and serve these clients. In this context, we'll be talking about <B>Network</B>s that have central servers.
These central servers tend to have all of the data that the clients connected to it need, such as user accounts, documents and sometimes SaaS (software as a service). Clients connecting to this server can be categorized into two categories: thin and thick clients.
Thin clients are computers that tend to have no hard drive (or other form of permanent storage), very low powered CPU's and not much memory. This is because the central server tends to be extremely powerful and handles the processing for all for it's clients. When the client requests data the server process it and sends the output to the client. This is extremely useful as it saves costs for large <B>Network</B>s and also saves power.
An advantage is security, updates, software cost. disadvantage is the huge congestion of bandwidth and reliance on <B>Network</B>
Thick clients are computers that handle all of the processing and storage like a desktop computer. All the server does is act as an external storage device.
An advantage of this is it can be useful as if the server goes down the users can still work. A disadvantage of thick clients is each client must have a computer that can handle the storage and processing of most tasks.
A lot of <B>Bus</B>inesses use a mixed client where files are stored on the local server but programs are installed on the computers individually. This allows for work to continue if the server goes down unexpectedly.
When using thin clients, you can get a server license for a piece of software that is cheaper than individual licenses for every client.
The processor is a device that carries out computation on data by following instructions. It handles all of the instructions that it receives from the user and from the hardware and software. It plugs into the motherboard
Physically, the processor is made up of a thin slice of silicon approximately 2 cm square. Using microscopic manufacturing techniques, the silicon is implanted with millions of transistors together.
The transistors are used to control the flow of electrical pulses that are timed via the computer's clock. The pulses of electricity represent different parts of the instruction that the processor is carrying out. Each of these pulses is routed around the circuitry of these transistors at very high speeds. In theory a 3Ghz processor could process 3,000 million instructions per second.
Memory is used to store data and instructions. It is connected to the processor which will fetch the data and instructions it needs from memory, decode the instructions and then execute them. This is commonly known as the fetch-execute cycle and is a key principle in modern computing.
Any new data created will be stored back into memory. Put simply, memory is a medium of storage. There are two main types: RAM and ROM
RAM is temporary storage space that can be accessed very quickly. This means that applications such as word processors and spreadsheets will run at high speed. Physically, RAM is a chip or series of chips on which the data is stored electronically.
It is made up of millions of cells, each of which has its own unique address. Each cell can contain either an instruction or some data.
The cells can be accessed as they are needed by the processor, by referencing the address. That is, they can be accessed randomly, hence the name. Because they are electronic they are able to be accessed quickly. However, RAM is volatile, which means that when you turn your computer off, all of the contents of RAM are lost.
ROM is also a <B>Method</B> of storing data and instructions. However, it is not volatile which means that the contents of ROM are not lost when you <B>Switch</B> off. Unlike RAM, the user cannot alter the contents of ROM as it is read-only. It is important to note that it is possible to have programmable ROM, which is used in memory sticks and other devices. The definition here is of traditional ROM used within a PC.
In this case, ROM is used to store a limited number of instructions relating to the set-up of the computer. These settings are stored in the BIOS which stands for Basic Input/Output System.
When you <B>Switch</B> on your computer it carries out a number of instructions. For example, it checks the hardware devices are plugged in and it loads parts of the operating system. All of these instructions are stored in ROM. The instructions are programmed into ROM by the manufacturer of the PC.
Memory is made up of millions of addressable cells and the various instructions and data that make up a program will be stored across a number of these cells. Each address can be uniquely identified. It is the job of the processor to retrieve each instruction and data item and to carry out instructions in a sequential manner.
Memory is organised in a systematic way. Using the addresses, different programs can be stored in different parts of memory. In this way the processor is able to find the data and instructions it needs much more quickly than if the programs were stored completely randomly. A memory map can be produced which shows which programs are stored at which address. You will see that memory addresses are normally shown in hexadecimal format rather than binary as the hex version is shorter.
<B>Bus</B>es are groups of parallel microscopic wires that connect the processor to the various input and output controllers being used by the computer. They are also used to connect the internal components of a microprocessor, known as registers, and to connect the microprocessor to memory. There are three types of <B>Bus</B>: data, address and control.
The instructions and data that comprise a computer program pass back and forth between the processor and memory as the program is run. The data <B>Bus</B> carries the data both to and from memory and to and from the I/O controllers, that is, the <B>Bus</B> is bidirectional or two-way. The instructions and data held in memory will vary in size. Each memory cell will have a width measured in bits. For example it may have a width of 32 or 64 bits.
The data <B>Bus</B> connects the register to each other and to memory. The amount of data that can be passed along the <B>Bus</B> depends on how many wires are in the <B>Bus</B>. An 8-bit data <B>Bus</B> has eight wires. There are only two things that can pass down each wire, that is a 0 or a 1. Therefore, by using eight wires on the data <B>Bus</B>, we can transmit any item of data that can be represented using 2 combinations which is 256.
The greater the width of the data <B>Bus</B>, in terms of wires, the more data can be transmitted in one pulse of the clock. Consequently, the size of data <B>Bus</B> is a key factor in determining the overall speed of the computer. 32-bit and 64-bit <B>Bus</B>es are the norm at the time of writing. The data <B>Bus</B> width is usually the same as the word length of the processor and the same as the memory word length.
The <B>Address <B>Bus</B></B> only goes in one direction, it is unidirectional - from the processor into memory. All the instructions and data that a processor needs to carry out a task are stored in memory. Every memory location has an address. The processor carries out the instructions one after the other. The <B>Address <B>Bus</B></B> is used by the processor and carries the memory address of the next instruction or data item. The <B>Address <B>Bus</B></B> therefore is used to access anything that is stored in memory, not just instructions.
The size of the <B>Address <B>Bus</B></B> is also measured in bits and represents the amount of memory that is addressable. An 8-bit <B>Bus</B> would only give 256 directly addressable memory cells. 24 lines on the <B>Address <B>Bus</B></B> would give 2 combinations, which means it can access 16 MB of memory. A 32-bit <B>Address <B>Bus</B></B>, which is common for most PCs, would provide 4 GB of addressable memory. A 64-bit <B>Address <B>Bus</B></B> would provide, in theory, addressable memory of 16.8 million terabytes.
The control <B>Bus</B> is bidirectional <B>Bus</B> which sends control signals to the registers, the data and <B>Address <B>Bus</B></B>es. There is a lot of data flowing around the processor, between the processor and memory, and between the processor and the input and output controllers. Data <B>Bus</B>es are sending data to and from memory while <B>Address <B>Bus</B></B>es send only to memory.
The job of the control <B>Bus</B> therefore is to ensure that the correct data is travelling to the right place at the right time. This involves the synchronisation of signals and the control of access to the data and <B>Address <B>Bus</B></B>es which are being shared by a number of devices.
In addition to the direct link between the processor and main memory, the processor will also receive and send instructions and data to the various <B>Input and Output Devices</B> connected to the computer. Basic I/O devices would be the keyboard, monitor, mouse and printer, though modern computer systems would typically include several other devices.
Inside the computer, the data <B>Bus</B>es carry the signals to and from the processor.In order to do this the processor works in the same way as if it were sending data to or from memory. The difference, however, is that the processor does not communicate directly with the I/O devices. Instead, there is an interface called an I/O controller.
Controllers consist of their own circuitry that handles data lowing between the processor and the device. Every device will have its own controller which allows new devices to be connected to the processor at any time. A key feature of an I/O controller is that it will translate signals from the device into the format required by the processor. There are many different devices and many different types of processor and it is the I/O controller that provides the flexibility to add new devices without having to re<B>Design</B> the processor.
Another important feature is that the I/O devices themselves respond relatively slowly compared to the speed at which a processor can work. Therefore the I/O controller is used to buffer data being sent between the processor and the device, so that the processor does not have to wait for the individual device to respond.
The word 'architecture' is widely used in computing and usually refers to the way that something is built. For example, a microprocessor has an architecture that refers to the way that the chip is built. The von Neumann <B>Method</B> of building computers therefore is often referred to as the <B>Von Neumann Architecture</B>.
An alternative <B>Method</B> of building chips is the <B>Harvard Architecture</B>. The key difference between this and von Neumann is that separate <B>Bus</B>es are used for data and instructions both of which address different parts of memory. So rather than storing data and instructions in the same memory and then passing them through the same <B>Bus</B>, there are two separate <B>Bus</B>es addressing two different memories.
A program running on <B>Harvard Architecture</B> can be executed faster and more efficiently, due to the fact it has two separate <B>Bus</B>es. <B>Harvard Architecture</B> is widely used on embedded computer systems such as mobile phones, burglar alarms etc. where there is a specific use, rather than being used within general purpose PCs.
A <nowiki>=</nowiki> Visual display unit
B <nowiki>=</nowiki> Processor
C <nowiki>=</nowiki> Main memory
D <nowiki>=</nowiki> Keyboard
<B>Address <B>Bus</B></B> - used to specify a physical address in memory so that the data <B>Bus</B> can access it.
Data <B>Bus</B> - transfers data between the processor and main memory.
Main memory - stores data and instructions that will be used by the processor.
'<B>Assembly Language</B>' is an example of a low level programming language. Chip makers such as Intel and ARM provide programmers with an <B>Assembly Language</B> with which to code their particular CPU.
Some features of Low Level languages include
Pros.
Cons.
The computer loads data and instructions directly into the registers in pure binary, like this 10110000 00110010
A slightly more person-friendly way of coding this would be to code the same instruction in hexadecimal. Like this: B0 32
This is 'machine code' and it is very difficult to program at this level and yet retain an understanding of what the software is doing.
So the CPU chip makers supply a set of Mnemonics for the programmer to use with their processors.
Mnemonics are a set of readily memorised programming instructions that are later translated into pure machine code by a piece of software called an '<B>Assembler</B>'.
For example the machine code above in mnemonic form looks like MOV AL, 32h
the command is instructing the CPU to load 32 hex immediately into a register called A
When we talk about the stored program concept, we need to think with regard to the internal layout and architecture of a computer.
Early computers such as the IBM had no form of internal storage - all instructions and data were held on punch cards, which could be fed into the IBM to process data. In the 1960s, when the IBM was used, calculations were performed to get astronauts into orbit, and back, with the processing power of a modern day toaster! Nowadays, computers typically use Von-Neumann Architecture, which reflects the idea of the stored program concept.
The Von-Neumann Architecture, and stored-program concept, works where "machine code" "instructions and data are stored, and loaded from memory" "into the processor to be executed in sequential order". Von-Neumann Architecture is used for general purpose machines, where instructions and data are held in the same memory location - this is our main memory, or RAM.
On the other hand, <B>Harvard Architecture</B> follows the stored-program concept, however it takes into account the use of the memory unit. With both instructions and data being held in the same address, the processor is unable to work at optimum speed as the two are competing over the same data <B>Bus</B>. In addition, one data <B>Bus</B> may have an insufficient <B>Bus</B> width for program instructions i.e. increased traffic due to program instructions having a greater word length. <B>Harvard Architecture</B> is often used for specialist embedded computer systems, where optimum speed is the priority of the system.
Based on the fundamental logic operations: AND, OR and NOT
Basic operations:
Computer hardware is the physical components of the computer. It is important to distinguish between the internal components, which are the processing and storage devices, and external components, normally referred to as peripherals.
Software is the general term used to describe all of the programs that we run on our computers. These programs contain instructions that the processor will carry out in order to complete various tasks. This covers an enormous range of possibilities from standard applications, such as word processors, spreadsheets and <B>Database</B>s, to more specific applications, such as web-authoring software and games. It also includes programs that the computer needs in order to manage all of its resources, such as file management and virus-checking software.
Application software refers to all of the programs that the user uses in order to complete a particular task. In effect, it is what users use their computers for.
System software covers a range of programs that are concerned with the more technical aspects of setting up and running the computer. There are four main types:
<B>Utility Program</B>s covers software that is written to carry out certain housekeeping tasks on your computer. <B>Utility Program</B>s are often made available free downloads and are <B>Design</B>ed to enhance the use of your computer and programs though your computer will still work without them. A common example of a <B>Utility Program</B> is compression software.
<B>Library</B> programs are similar to <B>Utility Program</B> in that they are written to carry out common tasks. The word <B>Library</B> indicates that there will be a number of software tools available to the users of the system.
Whereas some <B>Utility Program</B>s are non-essential, <B>Library</B> programs tend to be critical for the applications for which they were built, for example Dynamically Linked <B>Library</B> (DLL) files, which contain code, data and resources.
<B>Translator</B>s are software used by programmers to convert program from one language to another. There are three types: <B>Compiler</B>s, <B>Assembler</B>s and <B>Interpreter</B>s.
In order to write software, programmers use programming languages which allow them to write code in a way that is user-friendly for the programmer. However, the processor will not understand the programmers' code, so it has to be translated into machine code, that is, 0s and 1s. <B>Compiler</B>s, <B>Assembler</B>s and <B>Interpreter</B>s are used to carry out this translation process.
Benefits of an <B>Interpreter</B>
Drawbacks of an <B>Interpreter</B>
Benefits of a <B>Compiler</B>
Drawbacks of a <B>Compiler</B>
Bytecode is an intermediate code (i.e. it is between <B>Source Code</B> and <B>Object</B> code). <B>Source Code</B> is translated in to bytecode, which can be run on a <B>Virtual Machine</B> (such as the Java <B>Virtual Machine</B>). A <B>Virtual Machine</B> translates bytecode into the appropriate instruction code.
An operating system is a collection of software <B>Design</B>ed to act as an interface between the user and the computer manages the overall operation of the computer. It links together the hardware, the applications and the user, but hides the true complexity of the computer from the user and other software - a so - called <B>Virtual Machine</B>.
Common tasks carried out by the operating system include:
In a computer with only one processor, only one program can be running at any one moment in time. In order to allow more than one program to appear to run simultaneously, the operating system has to allocate access to the processor and other resources such as peripherals and memory.
One of the main tasks that an operating system has to do is to make sure that all these allocations make the best possible use of available resources. Usually the most heavily used resource in a computer is the processor. The process of allocating access to the processor and other resources is called <B>Scheduling</B>.
The simplest way that an operating system can schedule access to the processor is to allocate each task a time slice. This means that each task is given an equal amount of processor time. This process of passing access to the processor from one tasks to the next is also known as 'round-robin' <B>Scheduling</B>.
Accessing some devices is a relatively slow process compared to the speed at which the processor can handle requests. Rather than wait for each process to end before it can continue, the OS can effectively create a queue of commands that are waiting for the device and then handle each request in sequence or based on priority.
The OS stores details of all the unallocated locations in a section of memory known as the heap. When an application needs some memory, this is allocated from the heap, and once an application has finished with a memory location or perhaps an application is closed, the now unneeded memory locations are returned to the heap. The OS controls the use of main memory by creating a memory map which shows which blocks of memory have been allocated to each task. In this way an operating system can control more than one task in the RAM at any one time.
If applications need more memory than a computer has, then the OS will sometimes use a section of secondary storage to mimic RAM. This is called <B>Virtual Memory</B>.
The OS is responsible for managing the files stored, and the folders that they are stored in. This provides the user an easy understandable way to manage their files, which hides the complexity of how files are stored on the hard drive.
The OS is responsible for dealing with devices for input (keyboards, mourse) as well as output (allocating print jobs, screen output).
Hardware - the electrical/ physical components/parts (electronic circuits) of the computer.
Software - programs (sequences of instructions) which run on the hardware/computer.
One of the following:
"Operating system:"
"<B>Library</B> programs:"
<B>Assembler</B>
Introduction here
ASCII normally uses 8 bits (1 byte) to store each <B>Character</B>. However, the 8th bit is used as a check digit, meaning that only 7 bits are available to store each <B>Character</B>. This gives ASCII the ability to store a total of
ASCII values can take many forms:
Take a look at your keyboard and see how many different keys you have. The number should be 104 for a windows keyboard, or 101 for traditional keyboard. With the shift function valus (a, A; b, B etc.) and recognising that some keys have repeated functionality (two shift keys, the num pad). We roughly have 128 functions that a keyboard can perform.
If you look carefully at the ASCII representation of each <B>Character</B> you might notice some patterns. For example:
As you can see, a = 97, b = 98, c = 99. This means that if we are told what value a <B>Character</B> is we can easily work out the value of subsequent or prior <B>Character</B>s.
Without looking at the ASCII <B>Table</B> above! If we are told that the ASCII value for the <B>Character</B> '5' is 011 0101, what is the ASCII value for '8'.
We know that '8' is three <B>Character</B>s after '5', as 5,6,7,8. This means that the ASCII value of '8' will be three bigger than that for '5':
Checking above this is the correct value.
If you are worried about making mistakes with binary addition, you can deal with the decimal numbers instead. Take the example where you are given the ASCII value of 'g', 110 0111, what is 'e'?
We know that 'e' is two <B>Character</B>s before 'g', as e, f, g. This means that the ASCII value of 'e' will be two smaller than that for 'g'.
88 - as it is 2 <B>Character</B>s down in the alphabet
How many ASCII '<B>Character</B>s' does the following piece of text use:
27 or 26. If you said 23 you'd be wrong because you must include the non-printing <B>Character</B>s at the end of each line. Each end of line needs a EOL command, and a new line needs a carriage return (CR), making the text like so:
For the Latin alphabet ASCII is generally fine, but what if you wanted to write something in Mandarin, or Hindi? We need another coding scheme!
You might have to use ASCII codes when reading from text files. To see what each ASCII code means we can use the folliwing function codice_1 which returns the ASCII code with denary value x. Try out the following code to see the first 128 <B>Character</B>s. What is special about <B>Character</B> 10?
For x = 0 To 127
Next
Console.ReadLine()
The problem with ASCII is that it only allows you to represent a small number of <B>Character</B>s (~128 or 256 for Extended ASCII). This might be OK if you are living in an English speaking country, but what happens if you live in a country that uses a different <B>Character</B> set? For example:
You can see that we quickly run into trouble as ASCII can't possibly store these hundreds of thousands of extra <B>Character</B>s in just 7 bits. What we use instead is unicode. There are several versions of unicode, each with using a different number of bits to store data:
With over a million possible <B>Character</B>s we should be able to store every <B>Character</B> from every language on the planet, take a look at these examples:
You can find out more about unicode encoding on Wikipedia
100 0111 - as it is 3 <B>Character</B>s further on in the alphabet
110 1101 - as it is 6 <B>Character</B>s down in the alphabet
So far we have only looked at whole numbers (<B>Integer</B>s), we need to understand how computers represent fractions.
Know how numbers with a fractional part can be
represented in:
Be able to convert for each representation from:
You should have learned at Primary School how a decimal fraction works:
As you can see, the column headings have been extended to formula_1 and formula_2. We can do the same thing in binary with the column headings formula_3, formula_4, and so on. The number 12.75 in 8 bit binary with 4 bits after the binary point is therefore 8 + 4 + 0.5 + 0.25:
Notice that for the same number of bits after the point, the binary fraction provides less accuracy. It can only take 4 different values, whereas the decimal number can have 100 different values with two digits. You'll see in a moment how this can cause trouble.
We are going to convert the number 6.125 into a binary fraction by using the grid below
This seems simple enough as 6.125 = 4 + 2 + 0.125, but what about this more interesting number: 6.4
But this doesn't look right?! This number isn't correct as it only reaches 4 + 2 + 0.25 + 0.125 = 6.375, we need more bits for the binary fraction places. However, a computer might restrict you to the number of bits you can use, so we'll use the number closest to the one we were aiming for. You could feel a bit annoyed at this, but don't worry, you make this compromise every time you try to represent formula_5 with the decimal factions, 0.33333333.
</div>
So you might ask how a computer does complicated mathematics if it struggles so hard with fractions. The answers we have looked at so far have only used one byte, computers can use far more space than this. They can also manipulate the number of bits they have been given in two ways:
In practice they will also use clever techniques such as floating point numbers (see below).
In the previous chapter we looked at the common number systems and bases. We use different number bases, as humans tend to work with decimals and computers can only process data in binary. As Computer Science students, we need to know how binary works and how the computer carries out calculations in binary.
There is a quick way of finding out the maximum values for a given number of bits. Using the formula below, you can find out what is the maximum decimal value you can have while using 8 bit binary.
Maximum decimal value = formula_1, formula_2 referring to the number of bits.
For example, for 8 bits:
formula_3
And of course 0 would be the minimum decimal value in unsigned binary.
There is also a way to find out the maximum number of combinations, you simply use the following formula: formula_4, formula_2 referring to the number of bits.
For example, for 8 bits:
formula_6
Meaning that there are 256 possible combinations if you are using 8 bit binary. If you were using 2 bit binary, also known as a formula_7 nibble, you would do the following:
formula_8
These would be the 4 combinations:
codice_1
To add two numbers together in binary, first line up the numbers in the same way as you would do column addition in decimal:
Now add the columns starting from the right-hand side, remembering that you can only use 0s and 1s:
You can check your answer by converting all the numbers to decimal, carrying out the addition and then converting the answer back to binary.
In this case the answer, the first number is 50, the second number is 181, so the answer should be 231.
To multiply in binary, you multiply the first number by each of the digits of the second number in turn starting from the right-hand side (in the same way that you would do multiplication in decimal).This means you are either multiplying each digit by 0 or 1, which will give you either a 0 or 1 as the answer. You then do the same for the next digit, shifting your answers to the left as you would in decimal multiplication.
You then carry out a binary addition to find the final answer. For example, to multiply 11011 by 11:
Note the zero on the LSB (least significant bit) as the numbers have been shifted to the left.
Again you can work this out by converting the binary to decimal to check your answer. In this case the first number is 27 (twenty-seven), the second number is 3 (three), so the answer is 81 (eighty-one).
Rules of binary multiplication are the same as the ones for decimals:
Two's complement is a <B>Method</B> used to represent signed <B>Integer</B>s in binary form. This means that it can be used to represent positive and negative <B>Integer</B>s. This section shows how two's complement can represent negative <B>Integer</B>s.
Assume we want to convert the binary code 10011100 into decimal using two's complement:
Write out the decimal (or denary, if you prefer) equivalent as show:
Fixed point is a <B>Method</B> used to represent a fractional number in binary form. This means that it can be used to represent number such as 2 & 1/2 or 6 & 15/16. This section shows how fixed point can represent fractional numbers.
Assume we want to convert the binary code 11000110 into decimal using fixed point:
Write out the decimal (or denary, if you prefer) equivalent as show:
Add the numbers together so in this case: 8+4+1/4+1/8 = 12 & 3/8
The language that a computer understands is very simple, so simple that it only has 2 different numbers: 1 and 0. This number system is called Binary. This is because 1 represents high voltage and 0 to represent low voltage. 
A 1 or 0 is called a Bit which is short for BInary DigiT. This is the "fundamental unit of information."
Everything you see on a computer, images, sounds, games, text, videos, spreadsheets, websites "etc." Whatever it is, it will be stored as a <B>String</B> of ones and zeroes.
How many different patterns can be made from 4 bits?
Know that in unsigned binary the minimum and maximum values for a given number of bits, n, are 0 and 2 -1 respectively.
A common question that you'll need to know the answer to, and one that many people get wrong, is a question about the minimum and maximum denary value you can store in a set number of binary digits. 
If I were to have 3 binary digits, the minimum value I could store would be 000 = 0. Whereas, the maximum value that I could store would be 111, this equates to 4 + 2 + 1 = 7. So for 3 binary digits the range of numbers I can store is 0 (minimum) to 7 (maximum).
Know that the 2 different values can be represented with n bits.
A similar, but different question, is how many different binary patterns (and therefore values) can you represent with a set number of binary digits. If I were to be asked how many binary patterns can be represented from 3 binary digits, then we have 8 options:
We could count these all out and write down: "There are 8 different values 3 binary digits can take". But this isn't very clever, what is you wanted to find out the range and maximum values for 34 bits, you can't be expected to write them all out. 
We are looking for a rule to save us the job and stop us making mistakes. Can you work out a rule in terms of formula_1 for:
Maximum denary value of formula_1 binary digits:
Number of different values/binary patterns for formula_1 binary digits:
2 bits can be configured in 2 = 4 different ways.
3 bits can be configured in 2 = 8 different ways.
Give both the maximum value and number of different values for the following n binary digits:
4
Maximum : formula_4
Range : formula_5
Maximum : formula_6
Range : formula_7
Maximum : formula_8
Range : formula_9
Maximum : formula_10
Range : formula_11
highest address : formula_12
Different number of addresses : formula_13
This is a very popular exam question!
Binary patterns are used to represent more than just numbers. They can be for <B>Character</B>s, text, sounds and images.
All the <B>Character</B>s on the keyboard can be given a <B>Character</B> code which can be represented as a binary pattern inside the computer. They can be:
You will find out about two different <B>Character</B> code systems (ASCII and Unicode) on the next page.
Differentiate between the <B>Character</B> code representation of a decimal digit and its pure binary representation.
It is important that you can tell the difference between the binary representation of a decimal number and the different binary pattern for that number when it is stored as a <B>Character</B>.
Using ASCII the <B>Character</B> digits 0 to 9 are assigned the decimal number codes 48 to 57.
The <B>String</B> or <B>Character</B> digits 46 are represented in ASCII as 00110100 00110110.
This is worked out as the ASCII for the <B>Character</B> 4 is the denary code 52 which is 00110100; and the ASCII for the <B>Character</B> 6 is 54 which is 00110110.
Whereas the decimal number 46 if stored in a 16-bit word is 00000000 00101110.
This is worked out as with all binary to decimal conversions as 32 + 8 + 4 + 2 = 46
What is the decimal number 42 as a 16 bit binary pattern?
The number 42 = 32 + 8 + 2, so in binary 00000000 00101010.
If in ASCII the <B>Character</B> digit 4 is given the number code 52, what is the <B>String</B> 42 in binary?
The <B>String</B> 42 is made up of the <B>Character</B>s 4 and 2. If 4 is the ASCII code 52 then 2 should be 50, so calculate binary pattern for 52 and then 50.
52 = 32 + 16 + 4, so 00110100
50 = 32 + 16 + 2, so 00110010, therefore the answer is 00110100 00110010
Convert the number 27 into a 16 bit binary pattern.
The number 27 = 16 + 8 + 2 + 1, so in binary 00000000 00011011.
What is the <B>String</B> 27 as a binary pattern? Note: the ASCII code for the <B>Character</B> 0 is 48.
The <B>String</B> 27 is made up of the <B>Character</B>s 2 and 7. If 0 is the ASCII code 48 then 2 will be 50 and 7 will be 55. Therefore calculate binary pattern for 50 and then 55.
50 = 32 + 16 + 2, so 00110010,
55 = 32 + 16 + 4 + 2 + 1, so 00110111, therefore the answer is 00110010 00110111
Parity checking is only able to detect an odd number of errors and cannot correct the errors detected.
The number of 1s is counted and if the number of 1s is odd then the parity bit is set to 1.
The number of 1s is counted and if the number of 1s is even then the parity bit is set to 1.
Interference can occur which can cause 1's to be received as 0's and vice versa. Therefore, a system called majority voting is used.
Majority voting is where each bit is represented by three bits to try and curb damage from interference.
-Found from AQA Computer Science AS Level Textbook
Check digits are digits added to identification numbers (e.g. bank numbers and product codes (e.g. UPC)) where the number will sometimes be entered manually. They are similar to parity bits but are intended to detect human entry error.
When using floating point numbers you have to balance the range and the precision of numbers. That is whether you want to have a very large range of values or you want a number that is very precise down to a large number of decimal places. This means that you are going to always weigh up how many digits should be used for the mantissa and how many should be used for the exponent. In summary:
When we try to represent some numbers sometimes we can't within the space we have been given, for example trying to write down 1/3 = 0.33333333; you see what I mean? With floating point numbers you can't always get perfect precision and sometimes we suffer errors.
Feed this equation into Google:
The browser will perform a floating point calculation and give you the answer of 0!
So recognising that we can have rounding errors with floating point numbers we'll take a look at the different errors that might be caused. The following number wants to be represented in binary 23.27, the closest we get is 23.25.
This is the actual number difference between the desired value and the rounded value.
3.333 - 3.25 = 0.083
12.67 - 12.625 = 0.045
1000.1101 = 8.8125, the closest we can get
8.8 - 8.8125 = -0.0125
This is the percentage difference between the desired value and the rounded value.
Adding a very small number to a very large number makes no difference to the large number, equations involving very large or small numbers will give you incorrect results. The web search engine example above is a good demonstration of this:
You might also see something like this:
When a number or the result of an equation is too small, you might not have enough digits in your mantissa and exponent to show it. In the following example the number would register as 0.
When the result of a sum is too large to be represented by your number system, you might run out of space to represent it and end up storing a much smaller number.
When storing numbers we need to use the space we are given in the most efficient way. For instance if we take a denary floating point number such as
If we were to rewrite it as:
Then you can see the representation takes up an extra 2 <B>Character</B>s, the two extra 0's, even though it represents exactly the same number. This may be accep<B>Table</B> when you are not worried about how many <B>Character</B>s a number makes up, but in binary and with limited computer memories, the space that numbers take up is very important. We need the most efficient representation we can. With a fixed number of bits, a normalised representation of a number will display the number to the greatest accuracy possible. In summary normalised numbers:
As a rule of thumb: when dealing with Floating point numbers in binary you must make sure that the first two bits are different. That is:
And most definitely NOT
Let's look at an example. Taking a binary floating point number:
We can see that the number starts with formula_8. We need to change this to formula_3 for it be normalised. To do this we need to move the decimal place one position to the right, and to retain the same number represented by the unnormalised number we need to change the exponent accordingly. With a movement one place right to normalise the number we need to change the exponent to move the decimal point one place left to compensate. Thus subtracting one from the current exponent:
To make sure you have normalised it correctly, check that
Lets try a more complicated example:
To get the mantissa normalised we need to move the decimal point two places to the right. To maintain the same value as the original floating point number we need to adjust the exponent to be two smaller.
Now check that the new normalised value has the same value as the original.
 00.10000000 111110 = 0.100000000 111110
 000.1101000 000100 = 0.110100000 000100
 111111.010 111101 = 1.01000000 111101
If you study other subjects such as Physics or Chemistry, you may come across Floating Point numbers like this
The first bit defines the non-zero part of the number and is called the Mantissa, the second part defines how many positions we want to move the decimal point, this is known as the Exponent and can be positive when moving the decimal point to the right and negative when moving to the left.
formula_2
If you wanted to write out that number in full you would have to move the decimal point in the exponent 34 places to the left, resulting in:
Which would take a lot of time to write and is very hard for the human eye to see how many zeros there are. Therefore, when we can accept a certain level of accuracy (6.63 = 3 significant figures), we can store a many digit number like Planck's constant in a small number of digits. You are always weighing up the scope (or range) of the number against its accuracy (number of significant bits).
The same is true with binary numbers and is even more important. When you are dealing with numbers and their computational representation you must always be aware of how much space the numbers will take up in memory. As we saw with the above example, the non floating point representation of a number can take up an unfeasible number of digits, imagine how many digits you would need to store
formula_3 in binary‽
A binary floating point number may consist of 2, 3 or 4 bytes, however the only ones you need to worry about are the 2 byte (16 bit) variety. The first 10 bits are the Mantissa, the last 6 bits are the exponent.
formula_5
Just like the denary floating point representation, a binary floating point number will have a mantissa and an exponent, though as you are dealing with binary (base 2) you must remember that that instead of having formula_6 you will have to use formula_7.
Fixed point binary allows a computer to hold fractions but due to its nature is very limited in its scope. Even using 4 bytes to hold each number, with 8 bits for the fractional part after the point, the largest number that can be held is just over 8 million. Another format is needed for holding very large numbers. 
In decimal, very large numbers can be shown with a mantissa and an exponent. i.e. 0.12*10² Here the 0.12 is the mantissa and the 10² is the exponent. the mantissa holds the main digits and the exponents defines where the decimal point should be placed.
The same technique can be used for binary numbers. For example two bytes could be split so that 10 bits are used for the mantissa and the remaining 6 for the exponent. This allows a much greater scope of numbers to be used.
There are several stages to take when working out a floating point number in binary. In fact it is much like a disco dance routine - known on this page as the Noorgat Dance, Kemp variation (you wont be tested on name but it should help you to remember)
Lets try it out. We are given the following 16 bit floating point number, with 10 bits for the mantissa, and 6 bits for the exponent. Remember the decimal point is between the first and second most significant bits
The first action we need to perform is the sign, find out the sign of the mantissa
The second step in the Noorgat dance is the slide, we need to find the value of the exponent, that is the last 6 bits of the number
The third step in the Noorgat dance is the bounce that is moving the decimal point of the Mantissa the number of positions specified by the slide, which was one position to the right. Like so:
The fourth step is the optional flip. Check back to the sign stage and see if the Mantissa is negative. It isn't? Oh well you can skip past this stage then as we only flip the number if the mantissa is negative.
The fifth and final step is the swim. Taking the mantissa on its own we can now work out the value of the floating point number. Start at the centre and label each number to the left formula_15 and so on. The each number on the right formula_16 and so on.
1. Sign: the mantissa starts with a zero, therefore it is a positive number.
2. Slide: work out the value of the exponent
3. Bounce: we need to move the decimal point in the mantissa. In this case the exponent was positive so we need to move the decimal point 6 places to the right
4. Flip: as the number isn't negative we don't need to do this
5. Swim: work out the value on the left hand side and right hand side of the decimal point
1. Sign: the mantissa starts with a zero, therefore it is a positive number.
2. Slide: work out the value of the exponent
3. Bounce: we need to move the decimal point in the mantissa. In this case the exponent was negative so we need to move the decimal point 1 place to the left
4. Flip: as the mantissa number isn't negative we don't need to do this
5. Swim: work out the value on the left hand side and right hand side of the decimal point
1. Sign: the mantissa starts with a one, therefore it is a negative number.
2. Slide: work out the value of the exponent
3. Bounce: we need to move the decimal point in the mantissa. In this case the exponent was positive so we need to move the decimal point 5 places to the right
4. Flip: the mantissa is negative as noted in step one so we need to convert this number
5. Swim: work out the value on the left hand side and right hand side of the decimal point
1. Sign: the mantissa starts with a one, therefore it is a negative number.
2. Slide: work out the value of the exponent
3. Bounce: we need to move the decimal point in the mantissa. In this case the exponent was negative so we need to move the decimal point 3 places to the left. Watch carefully!
4. Flip: the mantissa is negative as noted in step one so we need to convert this number
5. Swim: work out the value on the left hand side and right hand side of the decimal point
1. Sign: the mantissa starts with a one, therefore it is a negative number.
2. Slide: work out the value of the exponent
3. Bounce: we need to move the decimal point in the mantissa. In this case the exponent was positive so we need to move the decimal point 3 places to the right.
4. Flip: the mantissa is negative as noted in step one so we need to convert this number
5. Swim: work out the value on the left hand side and right hand side of the decimal point
You might also be asked to convert a denary number into its binary floating point equivalent.
If we are asked to convert the denary number 39.75 into binary floating point we first need to find out the binary equivalent:
How far do we need to move the binary point to the left so that the number is normlised?
So to get our decimal point back to where it started, we need to move 6 places to the right. 6 now becomes your exponent.
If you want to check your answer, convert the number above into decimal. You get 39.75!
How far do we need to move the binary point to the left so that the number is normlised?
To get the front to be normalised we must move the decimal point 7 places. (moving it 6 places would have made the number negative!)
How far do we need to move the binary point to the left so that the number is normlised?
To get the front to be normalised we must move the decimal point 5 places. (moving it 4 places would have made the number negative!)
How far do we need to move the binary point to the left so that the number is normlised?
To get the front to be normalised we must move the decimal point 7 places.
But this is using 11 bits for the mantissa, we have to drop one, losing accuracy!
How far do we need to move the binary point to the left so that the number is normlised?
To get the front to be normalised we must move the decimal point 8 places. (moving it 7 plaaces would have made it negative!)
Notice that we have had to drop the .25, as this would not have fitted into 10 bits for the mantissa.
Convert this into its negative form using the flipping rule:
How far do we need to move the binary point to the left so that the number is normlised?
To get the front to be normalised we must move the decimal point 10 places. 
Notice that we have had to drop the last one as this would not have fitted into 10 bits for the mantissa. This means that the number shown is only: 
converting this into denary:
You'll look at errors using floating point numbers very soon
For when you have a 16bit number where the mantissa is 10bits and the exponent is 6 bits:
the largest positive number will be:
the smallest positive number will be:
the largest negative number will be:
the smallest negative number will be:
A standard <B>Method</B> for the representation of all the keyboard <B>Character</B>s, including the numbers, and other commonly used functions in ASCII or the American Standard Code for Information Interchange. The most recent version is an 8-bit code allowing for 256 <B>Character</B>s.
The limitations of ASCII:
As a result, a new standard called Unicode has emerged which follows the same basic principles as ASCII in that in one of its forms it has a unique 8-bit code for every keyboard <B>Character</B> on a standard English keyboard. 
ASCII codes have been subsumed within Unicode meaning that the ASCII code for capital letter A is 65 and so is the Unicode code for the same <B>Character</B>. Unicode also includes international <B>Character</B>s or over 29 countries and even includes conversions of <B>Class</B>ical and ancient <B>Character</B>s.
To represent these extra <B>Character</B>s it is obviously necessary to use more than 8 bits per <B>Character</B> and there are two common encodings of Unicode in use today (UTF-8 and UTF-16). As the name suggests the latter is a 16-bit code.
A parity bit is a <B>Method</B> of detecting errors in data during transmission. When you send data, it is being sent as a series of 0s and 1s.
In the figure above, a Unicode <B>Character</B> is transmitted as the binary code 0111000110101011. It is quite possible that this code could get corrupted as it passed around either inside the computer or across a <B>Network</B>.
In the top example the parity bit is set to 0 to maintain an even number of ones. One <B>Method</B> for detecting errors is to count the number of ones in each byte before the data is sent to see whether there is an even or odd number. At the receiving end, the code can be checked to see whether the number is still odd or even.
Majority voting is another <B>Method</B> of identifying errors in transmitted data. In this case each bit is sent three times. So the binary code 1001 would be sent as:
111000000111.
When data is checked, you would expect to see patterns of three bits. In this case, it is 111 for the first bit, then 000 and so on. Where there is a discrepancy, you can use majority voting to see which bit occurs the most frequently. For example, if the same code 1001 was recieved as:
101010000111.
You can assume that the first bit should be 1 as two out of three of the three bits are 1. You can assume that the second bit is 0 as two of the three bits are 0. The last two bits are 0 and 1 as there appears to be no errors in this part of the code.
Like a parity bit, a check digit is a value that is added to the end of a number to try and ensure that the number is not corrupted in any way. The check digit is created by taking the digits that make up the number itself and processing them in some way to create a single digit. The simplest but most error-prone <B>Method</B> is to add the digits of the number together, and keep on adding the digits until you have only a single digit remaining.
So the digits of 123456 add up to 21 and 2 and 1 in turn add up to 3, so the number with its check digit becomes 1234563. When the data is being processed the check digit is recalculated and compared with the digit that has been transmitted. Where the check digit is the same then it is assumed that the data is corrected. Where there is a discrepancy, an error message is generated.
A <B>Character</B> code uses a unique number/code to represent each different <B>Character</B>
b = 1100010
e = 1100101
1000011
ASCII uses 7 or 8 bits per <B>Character</B> and represents only Latin <B>Character</B>s and extended
symbols. 
Unicode uses 16 bits per <B>Character</B> and can represent any <B>Character</B> and language.
Unicode contains ASCII as a subset so every ASCII <B>Character</B> can also be stored in Unicode.
ASCII <B>Character</B>s have the same <B>Character</B> codes as they do in Unicode.
Parity checks are quick and relatively cheap in terms of data transmission, but only detect single errors and cannot repair data; check digits require a lot of processing but detect any number of errors, they cannot repair data; majority vote can catch a lot of errors and requires little processing; it can repair errors but takes three times the amount of data for transmission.
The <B>Character</B> has been received correctly as there are an odd amounts of 1s.
0 0 1 1 1 0 0 1.
A parity bit is a <B>Method</B> of detecting errors in data during transmission. When you send data, it is being sent as a series of 0s and 1s.
In the figure above, a Unicode <B>Character</B> is transmitted as the binary code 0111000110101011. It is quite possible that this code could get corrupted as it passed around either inside the computer or across a <B>Network</B>.
In the top example the parity bit is set to 0 to maintain an even number of ones. One <B>Method</B> for detecting errors is to count the number of ones in each byte before the data is sent to see whether there is an even or odd number. At the receiving end, the code can be checked to see whether the number is still odd or even.
Majority voting is another <B>Method</B> of identifying errors in transmitted data. In this case each bit is sent three times. So the binary code 1001 would be sent as:
111000000111.
When data is checked, you would expect to see patterns of three bits. In this case, it is 111 for the first bit, then 000 and so on. Where there is a discrepancy, you can use majority voting to see which bit occurs the most frequently. For example, if the same code 10001 was recieved as:
101010000111.
You can assume that the first bit should be 1 as two out of three of the three bits are 1. You can assume that the second bit is 0 as two of the three bits are 0. The last two bits are 0 and 1 as there appears to be no errors in this part of the code.
Like a parity bit, a check digit is a value that is added to the end of a number to try and ensure that the number is not corrupted in any way. The check digit is created by taking the digits that make up the number itself and processing them in some way to create a single digit. The simplest but most error-prone <B>Method</B> is to add the digits of the number together, and keep on adding the digits until you have only a single digit remaining.
So the digits of 123456 add up to 21 and 2 and 1 in turn add up to 3, so the number with its check digit becomes 1234563. When the data is being processed the check digit is recalculated and compared with the digit that has been transmitted. Where the check digit is the same then it is assumed that the data is corrected. Where there is a discrepancy, an error message is generated.
Be familiar with the concept of a number base, in particular:
Convert between decimal, binary and hexadecimal number bases.
Before we jump into the world of number systems we'll need a point of reference, I recommend that you copy the following <B>Table</B> that you can refer to throughout this chapter to check your answers.
Denary is the number system that you have most probably grown up with. It is also another way of saying base 10. 
This means that there are 10 different numbers that you can use for each digit, namely:
Notice that if we wish to say 'ten', we use two of the numbers from the above digits, 1 and 0.
Using the above <B>Table</B> we can see that each column has a different value assigned to it. And if we know the column values we can know the number, this will be very useful when we start looking at other base systems. Obviously, the number above is: five-thousands, nine-hundreds, seven-tens and three-units.
You should know denary pretty well by your age, but there are different base systems out there, and the most important one for computing is the binary base system. Binary is a base-2 number system, this means that there are two numbers that you can write for each digit:
With these two numbers we should be able to write (or make an approximation of) all the numbers that we could write in denary.
Using the above <B>Table</B> we can see that each column has a value assigned to it that is the power of two (the base number!), and if we take those values and the corresponding digits we can work out the value of the number: 1*64 + 1*32 + 1*8 + 1*2 = 106.
If you are asked to work out the value of a binary number, the best place to start is by labelling each column with its corresponding value and adding together all the columns that hold a 1. Let's take a look at another example:
So now all we need to do is to add the columns containing 1s together: 1*16 + 1*8 + 1*4 + 1*2 + 1*1 = 31
Yes, take the first 0's column value and minus one
Be familiar with, and able to use, hexadecimal as a shorthand for binary and to understand why it is used in this way.
You may notice from the <B>Table</B> that one hexadecimal digit can represent exactly 4 binary bits. Hexadecimal is useful to us as a shorthand way of writing binary, and makes it easier to work with long binary numbers.
Counting is a fundamental concept using symbols to represent groups of <B>Object</B>s. We are used to counting using 10 such symbols, 0-9. When we run out of symbols we start a new column of numbers to represent a bigger collection of values. There are other ways of counting that use a different number of symbols, however, the counting process operates in the same manner. 
Hexadecimal is a base-16 number system which means we will have 16 different numbers to represent our digits. The only problem being that we run out of numbers after 9, and knowing that 10 is counted as two digits we need to use letters instead:
We can do exactly the same thing as we did for denary and binary, and write out our <B>Table</B>.
So now all we need to do is to add the columns containing values together, but remember that A = 10, B = 11, C = 12, D = 13, E = 14, F = 15.
You might be wondering why we would want to use hexadecimal when we have binary and denary, and when computers store and calculate everything in binary. The answer is that it is entirely for human ease. Consider the following example:
All the numbers are the same and the easiest version to remember/understand for humans is the base-16. Hexadecimal is used in computers for representing numbers for human consumption, having uses for things such as memory addresses, error or colour codes. "NOTE: Hexadecimal is used as it is shorthand for binary and easier for people to remember. It DOES NOT take up less space in computer memory, only on paper or in your head!" Computers still have to store everything as binary even if it appears as hexadecimal on the screen.
The sum that you saw previously to convert from hex to denary seemed a little cumbersome and in the exam you wouldn't want to make any errors, we therefore have to find an easier way to make the conversion.
Since 4 binary bits are represented by one hexadecimal digit, it is simple to convert between the two. You can group binary bits into groups of 4, starting from the right, and adding extra 0's to the left if required, and then convert each group to their hexadecimal equivalent. For example, the binary number 0110110011110101 can be written like this:
and then by using the <B>Table</B> above, you can convert each group of 4 bits into hexadecimal:
So the binary number 0110110011110101 is 6CF5 in hexadecimal. We can check this by converting both to denary. First we'll convert the binary number, since you already know how to do this:
By multiplying the columns and then adding the results, the answer is 27893.
Notice that the column headings are all 2 raised to a power, formula_1, formula_2, formula_3, formula_4, and so on. To convert from hexadecimal to denary, we must use column headings that are powers with the base 16, like this:
formula_5
formula_6 (You should memorize the values A-F)
formula_7
formula_8
Totalling them all up gives us 27893, showing that 0110110011110101 is equal to 6CF5.
To convert from denary to hexadecimal, it is recommended to just convert the number to binary first, and then use the simple <B>Method</B> above to convert from binary to hexadecimal.
In summary, to convert from one number to another we can use the following rule: Hexadecimal <-> Binary <-> Denary
Mathematics is fundamental to the study of computer science. It is important that the maths used is clearly defined and unambiguous. This begins with the definitions of the numbers that are used as a part of the mathematics. 
These definitions are described using sets whereby separate <B>Object</B>s, in this case the numbers themselves, are collected together to form a new descriptive <B>Object</B>. The set of odd numbers from 0 to 10 could be described as:
O is the name of the set and the numbers are the <B>Object</B>s that form that set.
Maths is based on counting <B>Object</B>s. Children learn from an early age that different numbers of <B>Object</B>s can be described using different names, for example five oranges or ten bananas. The set of Natural numbers ℕ can be described as:
Note that there are an infinite amount of numbers so it is impossible to define the set entirely. It is perfectly accep<B>Table</B> to define the first few values in this case.
To extend this we can include negative values. <B>Integer</B>s are whole numbers that can be either positive or negative:
By extension, they include the Natural numbers defined earlier.
Numbers can also be expressed as fractions. This includes <B>Integer</B>s and numbers that have fractional parts. For example, the <B>Integer</B> 5 can also be expressed as the fraction 5/1 (which is a rational number) in the same way as the value 1.5 would be expressed as the fraction 3/2. We can describe a limited part of the set of Rational numbers as follows:
As per the previous sets there are an infinite number of Rational values.
Some numbers cannot be expressed as a fraction. When Rational numbers are expressed as decimal values they will have a definite number of values after the decimal place. 1/4 is a Rational number and this would be expressed as the decimal value 0.25. Numbers with a recurring decimal part are also rational. 1/3 would be expressed as the decimal 0.3 ̇. 
These numbers are not described as a set as they are special cases. Common Irrational numbers used regularly are described using separate symbols:
All the sets of numbers described above are considered as the set of Real numbers ℝ. On a number line a Real value would be any value that is on that line.
Within a set of ordered values, Ordinal numbers indicate the positions of the values. So in the set S = {"alpha", "beta", "gamma"} the <B>Object</B> "alpha" is the 1st, "beta" the 2nd and so on.
The applications of these sets of numbers can be seen in the real-world. Natural numbers are used for counting <B>Object</B>s that can be seen, for example, the number of apples on a <B>Table</B>:
Similarly Real numbers are used as measurements due to the ability to quantify these values to contain fractional parts.
Maths in a processor is normally performed using set numbers of bits. For example where you add 8 bits to 8 bits. This will often cause no problems at all:
But what happens if we add the following numbers together:
This may appear to have gone ok, but we have a problem. If we are dealing with twos complement numbers the answer from adding two positive numbers together is negative!
Let's take a look at another problem example, the problem of overflow
As you can see in the sum above, we have added two negative numbers together and the result is a positive number.
To deal with the situations mentioned above we use the status register
For the sum that we met earlier we will take a look at how the status register can be used to stop the incorrect answer arising:
Status register: Z = False | C = False | N = True | O = True | P = Even
Using these flags you can see that the result is negative, if the original sum used only positive values, then we know we have an error.
Looking at the other equation:
Status register: Z = False | C = True | N = False | O = True | P = Odd
Using these flags you can see that the result is positive when the original used two negative numbers. We can also see that overflow occurred.
What is the problem with the result of the following 4 bit sum:
The result would create overflow, giving an incorrect answer:
Show the Status register for the following sum:
Status register: Z = False | C = True | N = False | O = True | P = Odd
Know and be able to explain why both fixed point and floating point representation of decimal numbers may be inaccurate.
For a real number to be represented exactly by the binary number system, it must be capable of being represented by a binary fraction in the given number of bits. Some values cannot ever be represented exactly, for example 0.1.
Maths in a processor is normally performed using set numbers of bits. For example where you add 8 bits to 8 bits. This will often cause no problems at all:
But what happens if we add the following numbers together:
This may appear to have gone ok, but we have a problem. If we are dealing with twos complement numbers the answer from adding two positive numbers together is negative!
Let's take a look at another problem example, the problem of overflow
As you can see in the sum above, we have added two negative numbers together and the result is a positive number.
To deal with the situations mentioned above we use the status register
For the sum that we met earlier we will take a look at how the status register can be used to stop the incorrect answer arising:
Status register: Z = False | C = False | N = True | O = True | P = Even
Using these flags you can see that the result is negative, if the original sum used only positive values, then we know we have an error.
Looking at the other equation:
Status register: Z = False | C = True | N = False | O = True | P = Odd
Using these flags you can see that the result is positive when the original used two negative numbers. We can also see that overflow occurred.
What is the problem with the result of the following 4 bit sum:
The result would create overflow, giving an incorrect answer:
Show the Status register for the following sum:
Status register: Z = False | C = True | N = False | O = True | P = Odd
Nearly all computers work purely in binary. That means that they only use ones and zeros, and there's no - or + symbol that the computer can use. The computer must represent negative numbers in a different way.
We can represent a negative number in binary by making the most significant bit (MSB) a sign bit, which will tell us whether the number is positive or negative. The column headings for an 8 bit number will look like this:
Here, the most significant bit is negative, and the other bits are positive. You start with -128, and add the other bits as normal. The example above is -67 in denary because: (-128 + 32 + 16 + 8 + 4 + 1 = -67)
-1 in binary is 11111111.
Note that you only use the most significant bit as a sign bit if the number is specified as signed. If the number is unsigned, then the msb is positive regardless of whether it is a one or not.
If the MSB is 0 then the number is positive, if 1 then the number is negative. 
Let's say you want to convert -35 into Binary Twos Complement. First, find the binary equivalent of 35 (the positive version)
Now add an extra bit before the MSB, make it a zero, which gives you:
Now 'flip' all the bits: if it's a 0, make it a 1; if it's a 1, make it a 0:
This new bit represents -64 (minus 64). Now add 1:
If we perform a quick binary -> denary conversion, we have: -64 + 16 + 8 + 4 + 1 = -64 + 29 = -35
To find out the value of a twos complement number we must first make note of its sign bit (the most significant, left most bit), if the bit is a zero we work out the number as usual, if it's a one we are dealing with a negative number and need to find out its value.
To find the value of the negative number we must find and keep the right most 1 and all bits to its right, and then flip everything to its left. Here is an example:
We can now work out the value of this new number which is:
To find the value of the negative number we must take the MSB and apply a negative value to it. Then we can add all the heading values together
How about a more complex example?
To find the value of the negative number we must take the MSB and apply a negative value to it. Then we can add all the heading values together
So we know how to work out the value of a negative number that has been given to us. How do we go about working out the negative version of a positive number? Like this, that's how...
Take the binary version of the positive number
So now we can see the difference between a positive and a negative number
Take the binary version of the positive number
starting with -128, we know the MSB is worth -128. We need to work back from this:
(positive number) 27
(negative number) 0000 0001 = -1
(positive number) 125
(negative number) 0110 0111 = -103
(negative number) 0100 1000 = -72
(using 4 bits for each HEX char) 1000 0001
(negative number) -> 0111 1111 = -127
(using 4 bits for each HEX char) 1010 1000
(negative number) -> 0101 1000 = -88
1111 1111
1010 0000
1000 0001
0000 1100 = +12 -> 1111 0100 = -12
0100 0011 = +67 -> 1011 1101 = -67
0010 0010 = +34 -> 1101 1110 = -34
(using 4 bits for each HEX char) 0011 0100 = +52 -> 1100 1100 = -54
(using 4 bits for each HEX char) 0111 1110 = +126 -> 1000 0010 = -126
If the msb is being used to provide negative values it follows that the maximum possible value will be limited. The number of possible values remains the same and the range of these numbers will include negative values as well as the positive values.
Range of formula_1 binary digits using two's complement representation:
When it comes to subtracting one number from another in binary things can get very messy.
An easier way to subtract Y from X is to "add" the negative value of Y to the value of X
To do this we first need to find the negative value of Y (78 denary)
Now try the sum again
Which comes out as:
Find the answers to the following sums in binary, show your working
Convert the 0000 0111 into a negative number
1111 1001 = -7
Add both numbers together:
Convert the 0001 0011 into a negative number
1110 1101 = -19
Add both numbers together:
Convert the 0101 1011 into a negative number
1010 0101 = -91
Add both numbers together:
Convert the HEX values to binary 
0010 0011 = 23 HEX or 35 denary
0001 1111 = 1F HEX or 31 denary
Now let's find the negative value of 1F
1110 0001 = -31
Add both numbers together:
They have tried to trick you. What is a negative number minus a negative number? X - (-Y) = X + Y
Let's start by finding the value of the bottom number: 1110 0001 -> 0001 1111 = 31
And by working this out we have the positive value (0001 1111)
Add both numbers together:
When a number or the result of an equation is too small, you might not have enough digits in your mantissa and exponent to show it. In the following example the number would register as 0
When the result of a sum is too large to be represented by your number system you might run out of space to represent it and end up storing a much smaller number
Computers process data in digital form. Essentially this means that they use microprocessors, also referred to as chips or silicon chips, to control them. A chip is a small piece of silicon implanted with millions of electronic circuits. The chip receives pulses of electricity that are passed around these microscopic circuits in a way that allows computers to represent text, numbers, sounds and graphics.
A bit is a binary digit. The processor can only handle electricity in a relativity simple way - either electricity is flowing or it is not. This is often referred to as two states. The processor can recognise whether it is receiving an off signal or an on signal. This is handled as a zero (0) for off and a one (1) for on. Each binary digit therefore is either a 0 (no signal) or a 1 (a signal).
The processor now needs to convert these 0s and 1s into something useful for the user. Everything you can use your computers for its represented internally by a series of 0s and 1s. Computers <B>String</B> zeros and ones together to represent text, numbers, sound, video and everything else we use our computers for.
The <B>Clock Speed</B> of your computers indicates the speed at which the signals are sent around the processor. In simple terms, a <B>Clock Speed</B> of 2 GHz means that it will receive 2 billion of these on/off pulses per second.
A single byte is a <B>String</B> eight bits. Eight is a useful number of bits as it creates enough permutations (or combinations) of zeros and ones to represent every <B>Character</B> on your keyboard:
The basic point here is that the more bits you use, the greater the range of numbers, <B>Character</B>s, sounds or colours that can be created. Taking numbers as an example, as we have seen, 8 bits would be enough to represent 256 different numbers (0-255). As the number of bits increases, the range of numbers increases rapidly. For example 2 would give 65,536 permutations, 2 would give approximately 1.6 million and 2 would give over 4 billion permutations.
Larger combinations of bytes are used to measure the capacity of memory and storage devices. The size of the units can be referred to either using binary or decimal prefixes. For example, in decimal, the term kilo is commonly used to indicate a unit that is 1,000 times larger than a single unit. So the correct term would be kilobyte (KB). In binary, the correct term is actually kibibyte (Ki) with 1024 bytes being the nearest binary equivalent to 1,000.
The <B>Table</B>s below show both binary and decimal prefixes.
Binary
Decimal
Gi
Any of the following:
intro here
Bytes can be combined into larger units used to measure the capcacity of memory or storage devices.
Historically the terms kilobyte, megabyte, "etc." have often been used when kibibyte, mebibyte, "etc." are meant.
Know that quantities of bytes can be described using binary prefixes representing powers of 2 or using decimal prefixes representing powers of 10,
"eg." one kibibyte is written as 1KiB = 2 B and one
kilobyte is written as 1kB = 10 B.
Know the names, symbols and corresponding
powers of 2 for the binary prefixes:
Note that all the symbols end in an 'i', "eg." Ki, Mi, Gi, Ti, and they are all binary and are base 2.
1 kibibyte or 1KiB = 2 bytes = 1024 bytes.
1 mebibyte or 1MiB = 2 bytes = 1024KiB = 1,048,576 bytes
Know the names, symbols and corresponding
powers of 10 for the decimal prefixes:
Note that all these k, M, G, T are all decimal and are base 10.
1 kilobyte or 1kB = 10 bits = 1000 bytes.
1 megabyte or 1MB = 10 bits = 1000kB = 1,000,000 bytes
How many bytes are in a kilobyte?
There are 10 = 1000 bytes in a kilobyte
How many bytes are in a kibibyte?
There are 2 = 1024 bytes in a kibibyte
A hard disk drive has a capacity of 8TB. How many bytes of data can it store?
8TB = 8 x 10 bytes = 8,000,000,000,000 or 8 million million (a UK billion!).
How many bits in a kibibyte?
1024 bytes in 1Ki and there are 8 bits in a byte, so 1024 x 8 = 8192 bits
You should be comfor<B>Table</B> with adding, subtracting and multiplying in decimal. Computers need to do the same in binary, and you need to know it for the exam!
Let's look at an example of adding in decimal:
This is pretty simple, we just add up each column, but what happens if we have can't fit the result in one column. We'll have to use a carry bit:
Hopefully you're good with that. Now let's take a look at how it's done in binary with a very quick example, with a check in denary:
This seems pretty straight forward, but what happens when we have a carry bit? Well pretty much the same as in denary:
You should hopefully have learnt how to multiply numbers together in decimal when you were at primary school. Let's recap:
And with a more complicated example:
The same principle applies with binary. Let's take a look at an example:
Let's try a more complicated example:
4 (as 2^4 = 16)
This is a short cut for multiplication in computers, and it uses machine code shift instructions to do this. Don't worry you don't need to know them for this sylla<B>Bus</B>
If you look at the binary representations of the following numbers you may notice something peculiar:
Each time we shift the number one space to the left, the value of the number doubles. This doesn't only work for one bit, take a look at this more complicated example.
Again, one shift to the left and the number has doubled. On the other hand, one shift to the right halves the value.
Computers are notoriously bad at doing multiplication and division, it takes lots of CPU time and can really slow your code down. To try and get past this problem computers can shift the values in registers and as long as multiplication or division is by powers of 2, then the CPU time is reduced as the action takes only one line of Machine Code. There are several types of shifts that processors can perform:
Shifting either left or right, you add a 0 on the empty end.
You maintain the sign bit of the number being shifted.
Please note the Logical shift example is also an example of an arithmetic shift as the sign remains the same. You'll find out about sign bits when learning about two's complement
The bit that is pushed off one end appears on the other
Up to this point you have only been working with whole positive numbers represented as unsigned binary patterns. You can also represent negative values as signed binary and real numbers with fractional parts or decimal places. Before you start real numbers check you understand unsigned binary by recapping 1 and 2 below.
Big data is a generic term given to datasets that are so large or complicated that they are difficult to store, manipulate and analyse. The three main features of big data are:
Big data is used for different purposes. In some cases, it is used to <B>Record</B> factual data such as banking transactions. However, it is increasingly being used to analyse trends and try to make predictions based on relationships and correlations within the data. Big data is being created all the time in many different areas of life. Examples include:
Latency is critical here and could be described as the time delay of the amount of time it takes to turn the raw data into meaningful information. With big data there may be a large degree of latency due to the amount of time taken to access and manipulate the sheer number of <B>Record</B>s.
Most <B>Database</B>s work on the model that the data will fall into columns and rows, otherwise referred to as <B>Field</B>s and <B>Record</B>s. This makes data easy to organise and store as they can be entered into the appropriate <B>Field</B>s. When data are analysed, it is relatively easy to carry out searches and sorts to query the data. Some data doesn't fit into this model. Data can be defined as either structured or unstructured.
1st Normal Form - Achieved by ensuring that the <B>Table</B> does not contain any repeated <B>Attribute</B>s or groups and that the data is atomic (lowest level of detail)
2nd Normal Form - Achieved by first ensuring that the <B>Database</B> is in 1NF (1st normal form) and that there are no <B>Attribute</B>s which depend on only part of the <B>Primary Key</B>, but not all of it. This is done by creating additional <B>Table</B>s.
3rd Normal Form - Achieved by ensuring that the <B>Database</B> is in 2NF and that all non key <B>Attribute</B>s which depend upon other non key <B>Attribute</B>s are removed. This is done by creating additional <B>Table</B>s.
<B>Database</B>s are normalised to ensure they are structured efficiently.
A relational <B>Database</B> is a <B>Method</B> of storing data, where we divide the data to fit into specific structures which have relationships between them. 
Imagine a relational <B>Database</B> is being used by a vet. The data would be divided up into <B>Table</B>s, each representing an entity or 'thing':
All details about animals the vet cares for would be stored inside the animal <B>Table</B>, details about the different medicines the vet uses would be stored in the medicine <B>Table</B> and so on.
The <B>Database</B> also models the relationships between the entities. In the vet example, we have <B>Table</B>s for "Customer" and "Animal". Each customer may own one (or more) animals, and each animal belongs to one customer, so there is a relationship between the <B>Record</B>s in these two <B>Table</B>s.
<B>Table</B>s consist of columns and rows which can be imagined in the same format as we may imagine a spreadsheet. 
Each column represents an <B>Attribute</B> which is a labelled element of data we want to store about the entity represented by this particular <B>Table</B>. Here are some examples of entities and possible <B>Attribute</B>s those entities might have:
When the <B>Table</B> is created, the data type for each <B>Attribute</B> is specified. This allows the <B>Database</B> software to allocate sufficient memory to be able to store any potential data that is input, as well as making it able to enforce a type check on the data. For example in our <B>Table</B> for "Animal" we may have the following <B>Attribute</B>s:
Each row in a <B>Table</B> represents a single instance of an entity and is called a <B>Record</B>. For example within the <B>Table</B> "Animal" we may have rows for Chewbacca the dog, Tabitha the cat and Percy the fish, each being an instance of an "Animal".
Every <B>Record</B> in a relational <B>Database</B> must have its own unique <B>Primary Key</B> (PK) <B>Attribute</B>, which provides a way of identifying that specific <B>Record</B> out of all of the <B>Record</B>s in the entire <B>Table</B>. 
The key <B>Attribute</B> must be chosen carefully so that it is truly unique. For example we could not choose the <B>Attribute</B> "Name" as the <B>Primary Key</B> for our "Animal" <B>Table</B> because it is extremely likely that two animals brought to the vet will have the same name. 
A common <B>Method</B> of ensuring a unique <B>Primary Key</B> <B>Field</B> is to allow the <B>Database</B> software to automatically generate the next <B>Integer</B> in sequence when a new <B>Record</B> is added. The <B>Primary Key</B> <B>Attribute</B> is often named "<<B>Table</B>Name>ID" (in this example "Animal_ID"), although this is not compulsory. 
When writing <B>Table</B> <B>Design</B>s in shorthand, the <B>Primary Key</B> <B>Field</B> is usually written first and underlined:
Alternatively, in an Entity Relationship Diagram, the <B>Primary Key</B> may be denoted by a *
Sometimes a combination of <B>Attribute</B>s are used together as a key instead of one single <B>Attribute</B>. The uniqueness is only guaranteed when the <B>Attribute</B>s are combined together. For example, in a <B>Table</B> concerning hotel bookings, a composite key could be created by combining the "RoomNumber" <B>Attribute</B> and the <B>Attribute</B> for the "StartDate" of the stay. It is not possible to have two different bookings for the same room starting on the same date, so this composite key uniquely identifies each <B>Record</B>. 
"RoomNumber" on its own is insufficient as a unique identifier as lots of bookings are made for the same room.
"StartDate" on its own is insufficient as a unique identifier as lots of bookings are made which start on the same date.
<B>Foreign Key</B>s are used to link <B>Table</B>s together and cross reference between <B>Table</B>s. For example here is the "Animal" <B>Table</B> from our vet example with an added <B>Foreign Key</B> of "Owner_ID":
"Owner_ID" is a <B>Foreign Key</B> in the <B>Table</B> "Animal" because it is the <B>Primary Key</B> of the "Owner" <B>Table</B>. 
The <B>Foreign Key</B> can be used to look up any of the other <B>Attribute</B>s of the owner, because it corresponds to an "Owner_ID" in the "Owner" <B>Table</B>, which is the <B>Primary Key</B> and thus is guaranteed to refer to exactly one of the <B>Record</B>s.
<B>Structured Query Language (SQL)</B> is a specialised programming language that is used for managing relational <B>Database</B>s. Its functions allow users to define <B>Table</B>s, insert, update and delete data and to carry out queries on data to produce and output subsets of the main data. In common with other programming languages, SQL works by typing lines of code.
To create a <B>Table</B> the user needs to define the name of the <B>Table</B> and each of the <B>Attribute</B>s including the data type and length. If you have used MS Access or any other proprietary <B>Database</B> package, you will notice that this is a very similar process, but is achieved through typing code in the correct syntax rather than using a graphical user interface.
codice_1
Examples of supported data types:
To enter data into a <B>Table</B>, you need to specify the name of the <B>Table</B> and the column where you want to enter it:
codice_2
To update data, you need to specify the <B>Table</B> and column and identify the item of data that needs updating. For example, to update John Smith's address:
codice_3
Deleting data is a similar process to updating data as you have to define the <B>Table</B> and then use a selection statement to identify the data that you want to delete. To delete John Smith from the <B>Database</B>:
codice_4
You can use wildcards within a selection statement. For example, to delete all <B>Record</B>s: codice_5
A programming paradigm is a <B>Method</B> of programming. The <B>Functional Programming</B> paradigm is an example of a <B>Declarative Programming</B> language where all <B>Algorithm</B>s call functions. This means that the lines of code look and behave like mathematical functions, requiring an input and producing an output. A value is produced for each function call. The idea is that there is one main function, which in turn calls further functions in order to achieve a specific task. Each function may call another function, or call itself recursively in order to generate a result.
The concept is that where a function is being used, it will always return the same value if it is given the same input so there can be no unforeseen side effects. One of these problems with <B>Procedural Programming</B> languages is that the value of a variable can change throughout the program and that changes made to the value in one subroutine may have an impact within another subroutine.
The motives behind the using <B>Functional Programming</B> paradigm include:
As functional programs use mathematical expressions they lead themselves to writing applications that require lots of calculations. There are some languages that specifically use the <B>Functional Programming</B> paradigm such as:
Other languages provide support for <B>Functional Programming</B> including:
A function type refers to the way in which the expression is created. All functions are of the type A → B where it is defined with an argument type (A) and a result type (B). For example, A is the set that contains {1, 2, 3, 4, 5} and B is the set that contains {1, 4, 9, 16, 25}.
A is also called the domain and contains <B>Object</B>s within a particular data type, in this case <B>Integer</B>s. B is called the co-domain and is the set from which the output values are chosen.
In <B>Functional Programming</B>, a value that is passed to a function is known as an argument. For example, in the expression "a" = f(x) and "b" = f(2, 4), "x", 2 and 4 are arguments.
Within a <B>Functional Programming</B> environment, a function is a first-<B>Class</B> <B>Object</B>. A broad definition of a first-<B>Class</B> <B>Object</B> is any <B>Object</B> that can be passed as an argument to or can be returned by a function. In <B>Functional Programming</B>, this means that a function can be passed as an argument to another function or can be returned from a function as the result. Other <B>Object</B>s, such as <B>Integer</B> values which can be passed as arguments to a function, are also first-<B>Class</B> <B>Object</B>s.
A function which can accept another function as an argument is known as a higher order function, the three most common of which are map, fold and filter. As an example of a first-<B>Class</B> <B>Object</B>, in Haskell you might write the function:
codice_1
map is a function, which takes another function and applies it to every element in a list. *2 (multiply by two) is the function that map is taking in. [1, 2, 3, 4, 5, 6] is the list on which the function is applied.
The result of this higher order function would be [2, 4, 6, 8, 10]
In this example, map is a higher order function and *2, 1, 2, 3, 4 and 5 are all first-<B>Class</B> <B>Object</B>s.
The process of providing the function with its inputs is known as function application. With our earlier example we had the function codice_2 and the two sets - the domain and co-domain. Set A (the domain) contained the inputs, which were all <B>Integer</B>s and set B (the co-domain) contained the outputs, also <B>Integer</B>s.
We input a single value from A, which can be described as the function taking its argument, or the argument being passed to the function. The function is then applied to the argument, which in this case means it squares it, to produced an output B.
It is possible to pass any number of arguments into a function. Where this is the case partial function application can be used to fix the number of arguments that will be passed. The idea of this is that when you have one function that takes lots of arguments, by partially applying the function you effectively create a new function that performs just part of the calculation. The partial application of a function can produce results that are useful in their own rights in addition to the full application of the function.
For example, consider the two notations for a function that adds two <B>Integer</B>s together by taking two arguments:
codice_3
Function composition is the process of creating a new function by combining two existing functions together. This is one of the key principles of <B>Functional Programming</B> as the concept is to have complex functions that in turn are made up of simpler functions. As each component function produces its result, this is passed as an argument result to the calling function. This process continues for each of the component functions until a result is produced for the complex function as a whole.
A <B>Functional Programming</B> language is one which has each line of code made up of calls to a function which may be made up of other functions or result in a value.
A first <B>Class</B> <B>Object</B> is an <B>Object</B> which can be passed as an argument or returned by a function. A higher order function can accept another function as an argument.
The map function applies a given function to every element within a list and returns a corresponding list of results. It is called a map function because it maps one element of the input list (e.g. List1) to the corresponding element in the output list (List2). The function it performs could be anything.
The filter function processes a list and then creates a new list that contains elements that match certain criteria. The operation is very similar to a search.
In order to create a filtered list, some kind of selection criteria needs to be applied to the list. This is sometimes called a predicate function and returns a <B>Boolean</B> value of either TRUE or FALSE. For example, a list could be filtered to include all values over 50, or all odd numbers. The way in which the statement is actually written depends on the programming language being used. Typical examples would be If, select, Remove_if, list.filter and where statements.
For example, we might use the function odd to filter odd numbers in a list (List1) into a new list (List2).
The reduce or fold function takes a list of values and reduces it to a single value. This is a recursive process as the function keeps processing until the list is empty. For example, if you took a simple example where you wanted to add the items of a list together, you could reduce the list until you ended up with just one item in it. Let's assume the numbers are from 1 to 5 are in the list.
A list is a set of data items of the same type stored using a single identifier. It is made up of any number of elements and can contain any type of numeric or text <B>String</B>s. The only rule is that you cannot mix data types within a list. You can carry out operations on lists of data, which is more is much more efficient than trying to carry out operations on individual data items.
The tail if the list is not just the last item, but all of the items apart from the head. A list can be empty. This may be when it is set up and no data has been entered or it may be after a list has been processed and there is no data left to process. The empty list is often represented as brackets with nothing between them, e.g.codice_1.
codice_2
codice_3
Pascal is a structured language specially <B>Design</B>ed by Niklaus Wirth for learning programming and computer science.
Pascal is accessible to beginners, its use of English-like syntax and avoidance of curly brackets and other arcane symbols being similar to Python and VB. Modern versions such as Delphi and Lazarus are very flexible and powerful, enabling creation of console programs for AS as well as very easy and rapid development of Graphical User Interfaces for A2 projects. They also provide full support for <B>Object</B>-Oriented Programming as required for A2. Pascal is the only language on the AQA list which enables practical experience of pointer programming.
The open-source Free Pascal/Lazarus project provides a free, high quality <B>Compiler</B> and development environments for Windows, Linux and Mac OSX.
The AQA textbook and exam papers use Pascal or Pascal-like pseudocode to describe alogorithms.
The use of Pascal as a teaching language in universities peaked in the 1980's and is now probably extinct in the UK and US.
Pascal was never intended as a language for commercial development though Delphi is used by some software companies especially in Eastern Europe.
Lazarus/Free Pascal is open-source, multi-platform and free!
Delphi runs only on Windows and costs money (£23 per concurrent licence for educational use). However the Development Environment is more polished, the <B>Compiler</B> is much faster and <B>Database</B> connectivity is easier and more powerful.
Download Lazarus from http://sourceforge.net/projects/lazarus/files/
Pascal fits the AQA specification very closely:
Pascal enforces strong typing and explicit variable declaration which encourages students to think about data types before they code
Modern Pascal <B>Compiler</B>s provide full support for <B>Object</B>-Oriented programming with a structure and syntax similar to that used in textbook and exam questions.
The ability to use pointers explicitly, although indicative of Pascal's 1970's origins, does make it easy to teach some of the more difficult data structure topics: linked lists, trees, use of the heap.
Delphi and Lazarus excel at the rapid development of graphical user interfaces, allowing the student to spend much more time on the underlying <B>Algorithm</B>s in their project. Only Microsoft Visual Studio competes with this.
Pascal's long history in universities and industry mean that it is thoroughly documented. Useful printed books are as follows:
__NOEDITSECTION__
A-level Computing is an A-level course run for students in the UK
"Note: current version of this book can be found at http://en.wikibooks.org/wiki/A-level_Computing/AQA"
= Authors =
= Book Overview =
= Unit 1 - Summary =
= Problem solving =
= Fundamentals of programming =
= Fundamentals of data representation =
= System development life cycle =
= Skeleton code =
__NOEDITSECTION__
A-level Computing is an A-level course run for students in the UK
"Note: current version of this book can be found at http://en.wikibooks.org/wiki/A-level_Computing/AQA"
= Authors =
= Book Overview =
= Unit 2 - Summary =
= Fundamentals of Computer Systems =
= Fundamental Hardware Elements of Computers =
= Hardware and software =
= Hardware Devices =
= Structure of the Internet =
= Webpage <B>Design</B> =
= Legal and ethical issues =
This exam is worth 60% of your AS grade (30% of the full A-Level). It is examined in June only.
Unit 1 definition list
Pure Binary Representation of Denary <B>Integer</B>
Binary Arithmetic
Representation of signed <B>Integer</B>s by Two’s Complement
The Concept of Number Bases: Denary, Binary and Hexadecimal
<B>Integer</B>s and Numbers with a Fractional Part
Describe standard coding systems for coding <B>Character</B> data.
Differentiate between the <B>Character</B> code representation of a denary digit and its pure binary representation.
Error checking and correction
Gray coding
Images
Sound files
For a computer to store sound files we need to get the continuous analogue sound waves into discrete binary values:
What is the difference between analogue and digital data?
Analogue data is continuous, allowing for an infinite number of possible values. Digital data is discrete, allowing for a finite set of values
Name the device used by computers to convert sound files into sound coming out of the speaker
Digital to Analogue converter
Name a peripheral that could be used to feed sound into a ADC
A microphone
This is a diagram of a system set up for <B>Record</B>ing, storing and saving sound. Fill in the numbers from the following options
Why is it difficult to save analogue sound waves in a digital format?
Analogue is continuous data, converting continuous data to discrete values may lose some of the accuracy
Before we jump into the world of number systems we'll need a point of reference, I recommend that you copy the following <B>Table</B> that you can refer to throughout this chapter to check your answers.
Denary is the number system that you have most probably grown up with. It is also another way of saying base 10. 
This means that there are 10 different numbers that you can use for each digit, namely:
Notice that if we wish to say 'ten', we use two of the numbers from the above digits, 1 and 0.
Using the above <B>Table</B> we can see that each column has a different value assigned to it. And if we know the column values we can know the number, this will be very useful when we start looking at other base systems. Obviously, the number above is: five-thousands, nine-hundreds, seven-tens and three-units.
You should know denary pretty well by your age, but there are different base systems out there, and the most important one for computing is the binary base system. Binary is a base-2 number system, this means that there are two numbers that you can write for each digit:
With these two numbers we should be able to write (or make an approximation) of all the numbers that we could write in denary.
Using the above <B>Table</B> we can see that each column has a value assigned to it that is the power of two (the base number!), and if we take those values and the corresponding digits we can work out the value of the number: 1*64 + 1*32 + 1*8 + 1*2 = 106.
If you are asked to work out the value of a binary number, the best place to start is by labelling each column with its corresponding value and adding together all the columns that hold a 1. Let's take a look at another example:
So now all we need to do is to add the columns containing 1s together: 1*16 + 1*8 + 1*4 + 1*2 + 1*1 = 31
Yes, take the first 0's column value and minus one
A common question that you'll need to know the answer to, and one that many people get wrong, is a question about the maximum denary value you can store in a set number of binary digits, or alternatively, the range of values that you can store in a set number of binary digits. Read carefully, these are not the same thing.
Consider the following example:
If I were to have 3 binary digits, the maximum value that I could store would be 111, this equates to 4 + 2 + 1 = 7.
If I were to be asked, the range of numbers then we have 8 options:
We could count these all out and write down: "There are 8 different values 3 binary digits can take". But this isn't very clever, what is you wanted to find out the range and maximum values for 34 bits, you can't be expected to write them all out. We are looking for a rule to save us the job and stop us making mistakes. Can you work out a rule in terms of formula_1 for:
Maximum denary value of formula_1 binary digits:
Number of different values for formula_1 binary digits:
Give both the maximum value and number of different values for the following n binary digits:
4
Maximum : formula_4
Range : formula_5
Maximum : formula_6
Range : formula_7
Maximum : formula_8
Range : formula_9
Maximum : formula_10
Range : formula_11
highest address : formula_12
Different number of addresses : formula_13
This is a very popular exam question!
You may notice from the <B>Table</B> that one hexadecimal digit can represent exactly 4 binary bits. Hexadecimal is useful to us as a shorthand way of writing binary, and makes it easier to work with long binary numbers.
Hexadecimal is a base-16 number system which means we will have 16 different numbers to represent our digits. The only problem being that we run out of numbers after 9, and knowing that 10 is counted as two digits we need to use letters instead:
We can do exactly the same thing as we did for denary and binary, and write out our <B>Table</B>.
So now all we need to do is to add the columns containing values together, but remember that A = 10, B = 11, C = 12, D = 13, E = 14, F = 15.
You might be wondering why we would want to use hexadecimal when we have binary and denary, and when computer store and calculate everything in binary. The answer is that it is entirely for human ease. Consider the following example:
All the numbers are the same and the easiest version to remember/understand for humans is the base-16. Hexadecimal is used in computers for representing numbers for human consumption, having uses for things such as memory addresses and error codes. "NOTE: Hexadecimal is used as it is shorthand for binary and easier for people to remember. It DOES NOT take up less space in computer memory, only on paper or in your head!" Computers still have to store everything as binary whatever it appears as on the screen.
The sum that you saw previously to convert from hex to denary seemed a little cumbersome and in the exam you wouldn't want to make any errors, we therefore have to find an easier way to make the conversion.
Since 4 binary bits are represented by one hexadecimal digit, it is simple to convert between the two. You can group binary bits into groups of 4, starting from the right, and adding extra 0's to the left if required, and then convert each group to their hexadecimal equivalent. For example, the binary number 0110110011110101 can be written like this:
and then by using the <B>Table</B> above, you can convert each group of 4 bits into hexadecimal:
So the binary number 0110110011110101 is 6CF5 in hexadecimal. We can check this by converting both to denary. First we'll convert the binary number, since you already know how to do this:
By multiplying the columns and then adding the results, the answer is 27893.
Notice that the column headings are all 2 raised to a power, formula_14, formula_15, formula_16, formula_17, and so on. To convert from hexadecimal to denary, we must use column headings that are powers with the base 16, like this:
formula_18
formula_19 (You should memorize the values A-F)
formula_20
formula_21
Totalling them all up gives us 27893, showing that 0110110011110101 is equal to 6CF5.
To convert from denary to hexadecimal, it is recommended to just convert the number to binary first, and then use the simple <B>Method</B> above to convert from binary to hexadecimal.
In summary, to convert from one number to another we can use the following rule: Hexadecimal <-> Binary <-> Denary
When you send data across the internet or even from your USB to a computer you are sending millions upon millions of ones and zeros. What would happen if one of them got corrupted? Think of this situation: You are buying a new game from an online retailer and put £40 into the payment box. You click on send and the number 40 is sent to your bank stored in a byte: 00101000. Now imagine if the second most significant bit got corrupted on its way to the bank, and the bank received the following: 01101000. You'd be paying £104 for that game! Error Checking and Correction stops things like this happening. There are many ways to detect and correct corrupted data, we are going to learn two.
Changing binary numbers from one value to another can involve changing several bits at once. For example changing from 7 to 8, 0111 to 1000 involves 4 digits changing, but why is this an issue?
As you know, computers are very fast and sometimes multiple things happen at once, especially if you are dealing with realtime systems. If program 'A' wanted to read a number stored by program 'B', and read the number mid way through that number changing, program 'A' might read a midstate, an incorrect number.
Taking the simple example above, imagine if we were dealing with money where program B was working out the interest on your account, increasing your money from £7 to £8. Program A might be a cash machine telling you how much money you had in your account. If you look at the program above you see that the cash machine would tell you that you had £13, so you take out £13 and then become immediately overdrawn. (Bank <B>Database</B>s actually use locking to solve this, but the example is a good one).
This could be particularly catastrophic if this error occurred in the military. Can you imagine an anti-air battery (Program A) deciding where to fire its missiles, and due to reading the direction of enemy planes stored on a remote radar system (Program B), shooting the missile in the wrong direction and shooting down an allied plane!
What is needed is Gray Code, a number system that changes one bit at a time to avoid midstates. Take a look at the examples below and see how only one bit changes for subsequent number:
Usually in the exam you wouldn't be asked to convert anything more that 3 or 4 bits. But in case you do here is an easy <B>Method</B> for converting binary to gray code.
Complete the following sequence of Gray Code states:
Building on what you have learnt about parity bits we are now going to see a system that not only allows you to detect if the data you have been sent is incorrect, but it will allow you to correct the error. The way hamming code does this is to use multiple check digits in the same piece of sent data.
Let's take a look a an example of data sent with odd parity
Note that for the check 8 skip 8 we ran out of digits, not to worry, take it as far as the bits given allow. As we can see each line is odd parity, and the sent data was supposed to be odd parity, this number is correct.
All are even parity, the data should be even parity, therefore it has been sent and received correctly
All are odd parity, the data should be odd parity, therefore it has been sent and received correctly
We have a mixture of odd and even parity, this means that there has been a mistake in sending this data. But where is the error? It has something to do with the lines that have odd parity!
Let's take a look a an example of data sent with even parity
Note that two of the lines, 2^1 and 2^2, show that an error has been detected. This means that somewhere that these lines cross over a bit has been corrupted, namely bit 6 or bit 7. If we know which one it is we can then <B>Switch</B> it and correct the error.
Look at the other checks that are in play, do any of them take part in this crossover? Looking at it, the 2^0 line also checks column 7 and it found it fine. So we are left with column 6 being the problematic one. As Hamming code is corrective, let's flip that column and we should have a correct piece of data.
Another way of finding errors is to add the check digit values together, the error occurs where the check digit equals 4 and 2. Add 4 +2 = 6, the error is with the 6th digit!
The number is now even parity and correct: 10010110111
The error is in the lines crossing over, that is on lines 2^0 and 2^1, but which bit is it?
You'll notice that the 2^2 and 2^3 lines are correct so we can discount any bits that are covered in those lines. This leaves us with the third column. Flipping this value gives us the corrected value of: 01101001111
The error is in the lines crossing over, that is on lines 2^1 and 2^3, but which bit is it? We can look at the place they cross over, bit ten, alternatively we can add the parity bit numbers together the row of parity bit 2 plus the row of parity bit: 2 + 8 = bit 10.
Flipping this value gives us the corrected value of: 10111101000
There is only one line with an error, the line of parity bit 4. This means that the error is in bit 4,5,6 or 7. Parity bit lines 1 and 2 imply that bits 5,6,7 are all fine, leaving us with the error in bit 4. Alternatively, as the error only occurs on parity bit line 4, then we know the error is with bit 4!
Flipping this value gives us the corrected value of: 00111001101
We are going to take a look at sending the ASCII letter e: 1100101 with odd parity. This data would then be ready to send
We have now worked out the odd parity Hammed number ready for sending: 11010100111
We have now worked out the even parity Hammed number ready for sending: 
10010101001
ASCII 'G' = 1000111
We have now worked out the even parity Hammed number ready for sending: 
10010110111
9 = 0001001
We have now worked out the even parity Hammed number ready for sending: 
00011000111
So far we have seen the different ways that binary can be used to store numbers. As we already know, most computers can only understand binary and we often need to store alpha-numeric text (numbers, letters and other <B>Character</B>s). To do this a computer will use a coding scheme. The most popular coding schemes are ASCII and Unicode. You'll need to know how each works and the benefits and drawbacks of using them.
We have seen the various ways that you can reduce the size of files, we have also seen that humans have a limit to the frequencies that they can perceive, so what sampling rate would be needed to only store the samples that humans can perceive. The full range of human hearing is between 20 Hz and 20 kHz.
People are able to hear different frequencies, up to what level can you hear?
For x = 0 To 25
Next
You lose your hearing with age, so the older you are the less likely you are to be able to hear the full spectrum.
So why not just use 20 kHz as our sampling rate <B>Record</B> 20k cycles per second and be done with it? There is a small problem:
What we need to properly represent a sound wave is to sample it at least two times per cycle:
Therefore the minimum sampling rate that satisfies the sampling for the human ear is 40 kHz (2*20 kHz). The 44.1 kHz sampling rate used for Compact Disc was chosen for this and other technical reasons.
Shannon's version of the theorem states:
If a function "x"("t") contains no frequencies higher than "B" Hz, it is completely determined by giving its ordinates at a series of points spaced 1/(2"B") seconds apart.
We can relate Frequency and period together using this equation. This equation will be very useful for working out the sample rate of a given wave.
What happens when you have a graph of time against displacement?
We know that Nyquist's Theorem is that the sample rate should be double than the highest frequency. So to calculate the sample rate, 
 formula_2
Describe Nyquist's-theorem
You should set the sample rate at a frequency which is at least twice the value of the highest frequency in the sampled signal
For a sound sample of maximum frequency 16 kHz what should the sample rate be?
32 kHz
How many cycles per second in the following sample?
For the sample what should the sample rate be according to Nyquist's-theorem?
the sample has a frequency of 4 cycles per second. using Nyquist's theorem you would have to sample this at at least 8 Hz
Sometime when you see ASCII code it only appears to have 7 bits. Surely they should be using a byte to represent a <B>Character</B>, after all that would mean they could represent more <B>Character</B>s than the measily 128 they can currently store (Note there is extended ASCII that uses the 8th bit as well but we don't need to cover that here). The eigth bit is used as a parity bit to detect that the data you have been sent is correct. It will not be able to tell you which digit is wrong, so it isn't corrective.
There are two types of parity odd and even. If you think back to primary school you would have learnt about odd and even numbers, hold that thought, we are going to need it.
When we send binary data we need to count the number of 1s that are present in it. For example sending the ASCII <B>Character</B> 'B' 1000010. This has two occurrences of 1. We can then apply another bit to the front of it and send it across the internet.
Now when the data gets to the other end and we were using even parity
However, if we receive 10010110, knowing that the number had odd parity, where is the error? The best we can do is ask for the data to be resent and hope it's correct next time. Parity bits only provide detective error. We need something that detects and corrects..
So we should know by now that sound waves are continuous and computers can only store discrete data. How exactly does an Analogue to Digital Converter convert a continuous sound wave into discrete digital data? To do this we need to look at how computers sample sound.
To create digital music that sounds close to the real thing you need to look at the analogue sound waves and try to represent them digitally. This requires you to try to replicate the analogue (and continuous) waves as discrete values. The first step in doing this is deciding how often you should sample the sound wave, if you do it too little, the sample stored on a computer will sound very distant from the one being <B>Record</B>ed. Sample too often and sound stored will resemble that being <B>Record</B>ed but having to store each of the samples means you'll get very large file sizes. To decide how often you are going to sample the analogue signal is called the sampling rate. Take a look at the following example:
To create digital sound as close to the real thing as possible you need to take as many samples per second as you can. When <B>Record</B>ing MP3s you'll normally use a sampling rate between 32,000, 44,100 and 48,000 Hz (samples per second). That means that for a sampling rate of 44,100, sound waves will have been sampled 44,100 times per second! <B>Record</B>ing the human voice requires a lower sampling rate, around 8,000 Hz. If you speak to someone on the phone it may sound perfectly accep<B>Table</B>, but try playing music down a telephone wire and see how bad it sounds.
As you saw earlier, different sounds can have different volumes. The sampling resolution allows you to set the range of volumes storable for each sample. If you have a low sampling resolution then the range of volumes will be very limited, if you have a high sampling resolution then the file size may become unfeasible. The sampling resolution for a CD is 16 bits used per sample.
To work out the size of a sound sample requires the following equation:
This is the same as saying:
Let's look at an example:
If you wanted to <B>Record</B> a 30 second voice message on your mobile phone you would use the following:
Therefore the total file size would be:
If you are interested in sound editing you can start editing your own music using a program called Audacity. Using Audacity you can create your own sound samples with different sample rates and sample resolutions, listening to the difference between them and noting the different file sizes. Check out the following sound files <B>Record</B>ed at different sampling rates:
Why might a digital representation of a sound struggle to be a perfect representation?
A sound wave is continuous data, whilst digital data is discrete and the representation is an approximation of the original
Why might you choose to have a lower sampling rate than a higher one for storing a song on your computer?
The higher the sampling rate the more data is needed to be stored, meaning the larger the file size.
What is the sampling resolution?
the number of bits assigned to each sample, affecting the range of volumes that can be stored in a sample
What is the equation to work out the bit rate of a song
Sampling Rate * Sampling Resolution
For the following sound sample work out its size:
16,000 * 8 * 10 = 1 280 000 Bits
Work out the sample rate of the following sound file:
100,000 / (10 * 5) = 2,000 Hz
Why might a song <B>Record</B>ed with the following settings:
have a file size of 7,040,000 bits?
The file might be <B>Record</B>ed in stereo, meaning twice the amount of data would have to be stored
Using the grid below, plot the following sample points for a sample resolution of 3 bits per sample: 000001100101100011100110111101
Sample the sound wave below and convert it into binary form:
As you can see we have some serious issues with the size of sound files. Take a look at the size of a 3 minute pop song <B>Record</B>ed at a sample rate of 44 kHz and a sample resolution of 16 bits.
As you are probably aware an mp3 of the same length would be roughly 3Mb, a fifth of the size. So what gives? It is easy to see that the raw file sizes for sounds are just too big to store and transmit easily, what is needed it a way to compress them.
WAV files don't involve any compression at all and will be the size of files that you have calculated already. There are lossless compressed file formats out there such as FLAC which compress the WAV file into data generally 50% the original size. To do this it uses <B>Run Length Encoding</B>, which looks for repeated patterns in the sound file, and instead of <B>Record</B>ing each pattern separately, it stores information on how many times the pattern occurs in a row. Let us take a hypothetical set of sample points:
As you can see the silent area takes up a large part of the file, instead of <B>Record</B>ing these individually we can set data to state how many silent samples there are in a row, massively reducing the file size:
Another technique used by FLAC files is Linear prediction.
FLAC files are still very large, what is needed is a format that allows you to create much smaller file sizes that can be easily stored on your computer and por<B>Table</B> music device, and easily transmitted across the internet.
As we have already seen, to make smaller audio files we can decrease the sampling rate and the sampling resolution, but we have also seen the dreadful effect this can have on the final sound. There are other clever <B>Method</B>s of compressing sounds, these <B>Method</B>s won't let us get the exact audio back that we started with, but will be close. This is <B>Lossy Compression</B>.
There are many lossy compressed audio formats out there including: MP3, AAC and OGG (which is <B>Open Source</B>). The compression works by reducing accuracy of certain parts of sound that are considered to be beyond the auditory resolution ability of most people. This <B>Method</B> is commonly referred to as perceptual coding. It uses psychoacoustic models to discard or reduce precision of components less audible to human hearing, and then <B>Record</B>s the remaining information in an efficient manner. Because the accuracy of certain frequencies are lost you can often tell the difference between the original and the lossy versions, being able to hear the loss of high and low pitch tones.
Why is it necessary to compress sound files?
So that they take up less space and can be sent quickly across the internet or stored on por<B>Table</B> music players
Name the two categories of compression available and give a file format for each
Lossy (mp3/AAC/ogg) and lossless(FLAC)
perform <B>Run Length Encoding</B> on the following sound file
012344444444444432222222222222211111111111111000000000000
0123(12-4)3(14-2)(14-1)(12-0)
Describe a technique used to compress mp3 files
perceptual coding reduces the quality of frequencies stored in a sound file that are beyond the auditory resolution of most people
When would it be best to use FLAC instead of ogg and vice-versa?
Sound Synthesisers are also used to create electronic sounds, unknown in the traditional music scene. In 1951 the University of Manchester created the earliest example of computer generated music using the Ferranti Mark 1 computer. Since then computers have had a massive impact on the music industry and this section will look into sound synthesis.
Sound Synthesis generally creates smaller file sizes compared to <B>Record</B>ings taken from live <B>Record</B>ings such as MP3 and AAC as it <B>Record</B>s notation which the computer performs using a selection of programmed or digital instruments, rather than <B>Record</B>ing the wave forms of each second of sound. However, the <B>Record</B>ings often don't sound as real as the live <B>Record</B>ings. Listen to the music on the left to see what I mean.
A common means to produce sound synthesised music is by using MIDI. MIDI does not <B>Record</B> analogue sound, but send digital signals <B>Record</B>ing musical notation, pitch and intensity, control signals for parameters such as volume, vibrato and panning, cues, and clock signals to set the tempo. The computer then interprets these commands and outputs sound corresponding to them. MIDI is a popular way to <B>Record</B> music from devices such as electronic keyboards.
As we know each <B>Character</B> on our keyboard has an ASCII code attached to it. We are going to take this code and turn our computer keyboard into a musical keyboard!
console.beep(frequency,duration)
Where codice_1 is the number of oscillations per second and codice_2 is the length that the beep will last in milliseconds.
AscW(key)
Where codice_3 is the ASCII number of key pressed. Giving us:
To extend this try to add the following:
Why might you prefer to use sound synthesis over <B>Record</B>ing an orchestra
Why might you not want to use sound synthesis
Sound is an oscillation of pressure transmitted through a solid, liquid, or gas (there is no sound in outer space as space is a vacuum and there is no solid, liquid or gas to transmit sound through!). A speaker works by moving its centre cone in and out, this causes the air particles to bunch together forming waves. These waves spread out from the speaker travelling at 340 m / s. If your ear is in the way, then the waves of sound particles will collide with your ear drum, vibrating it and sending a message to your brain. This is how you hear: 
When you hear different volumes and pitches of sound all that is happening is that each sound wave varies in energy for the volume (larger energy waves, the louder the sound), or distance between sound waves which adjusts the pitch, (smaller distances between waves leads to higher pitched sound).
Sound is often <B>Record</B>ed for two channels, stereo, feeding a left and right speaker whose outputs may differ massively. Where one channel is used, this is called mono. 5.1 surround sound used in cinemas and home media set ups use 6 channels.
This section of the book will cover how we <B>Record</B>, store and transmit sound using computers. Sound waves in nature are continuous, this means they have an almost infinite amount of detail that you could store for even the shortest sound. This makes them very difficult to <B>Record</B> perfectly, as computers can only store discrete data, data that has a limited number of data points.
Gone are the days when you had to buy music on a wax cylinder, LP, tape, CD or MiniDisc. Nowadays if you want to get some music you can download it using a program such as iTunes or stream it using a website such as MySpace, YouTube, BBC iPlayer or Spotify.
The big difference between downloading audio and streaming it is that when you download something you generally have to acquire the whole file before you can play it, with streaming audio you play the file whilst you are downloading it. There are two types of streaming technology that you need to know, multi-cast and uni-cast.
Nearly all computers work purely in binary. That means that they only use ones and zeros, and there's no - or + symbol that the computer can use. The computer must represent negative numbers in a different way.
We can represent a negative number in binary by making the most significant bit (MSB) a sign bit, which will tell us whether the number is positive or negative. The column headings for an 8 bit number will look like this:
Here, the most significant bit is negative, and the other bits are positive. You start with -128, and add the other bits as normal. The example above is -67 in denary because: (-128 + 32 + 16 + 8 + 4 + 1 = -67)
-1 in binary is 11111111.
Note that you only use the most significant bit as a sign bit if the number is specified as signed. If the number is unsigned, then the msb is positive regardless of whether it is a one or not.
If the MSB is 0 then the number is positive, if 1 then the number is negative. 
Let's say you want to convert -35 into Binary Twos Complement. First, find the binary equivalent of 35 (the positive version)
Now add an extra bit before the MSB, make it a zero, which gives you:
Now 'flip' all the bits: if it's a 0, make it a 1; if it's a 1, make it a 0:
This new bit represents -64 (minus 64). Now add 1:
If we perform a quick binary -> denary conversion, we have: -64 + 16 + 8 + 4 + 1 = -64 + 29 = -35
To find out the value of a twos complement number we must first make note of its sign bit (the most significant, left most bit), if the bit is a zero we work out the number as usual, if it's a one we are dealing with a negative number and need to find out its value.
To find the value of the negative number we must find and keep the right most 1 and all bits to its right, and then flip everything to its left. Here is an example:
We can now work out the value of this new number which is:
To find the value of the negative number we must take the MSB and apply a negative value to it. Then we can add all the heading values together
How about a more complex example?
To find the value of the negative number we must take the MSB and apply a negative value to it. Then we can add all the heading values together
So we know how to work out the value of a negative number that has been given to us. How do we go about working out the negative version of a positive number? Like this, that's how...
Take the binary version of the positive number
So now we can see the difference between a positive and a negative number
Take the binary version of the positive number
starting with -128, we know the MSB is worth -128. We need to work back from this:
(positive number) 27
(negative number) 0000 0001 = -1
(positive number) 125
(negative number) 0110 0111 = -103
(negative number) 0100 1000 = -72
(using 4 bits for each HEX char) 1000 0001
(negative number) -> 0111 1111 = -127
(using 4 bits for each HEX char) 1010 1000
(negative number) -> 0101 1000 = -88
1111 1111
1010 0000
1000 0001
0000 1100 = +12 -> 1111 0100 = -12
0100 0011 = +67 -> 1011 1101 = -67
0010 0010 = +34 -> 1101 1110 = -34
(using 4 bits for each HEX char) 0011 0100 = +52 -> 1100 1100 = -54
(using 4 bits for each HEX char) 0111 1110 = +126 -> 1000 0010 = -126
When it comes to subtracting one number from another in binary things can get very messy.
An easier way to subtract Y from X is to "add" the negative value of Y to the value of X
To do this we first need to find the negative value of Y (78 denary)
Now try the sum again
Which comes out as:
Find the answers to the following sums in binary, show your working
Convert the 0000 0111 into a negative number
1111 1001 = -7
Add both numbers together:
Convert the 0001 0011 into a negative number
1110 1101 = -19
Add both numbers together:
Convert the 0101 1011 into a negative number
1010 0101 = -91
Add both numbers together:
Convert the HEX values to binary 
0010 0011 = 23 HEX or 35 denary
0001 1111 = 1F HEX or 31 denary
Now let's find the negative value of 1F
1110 0001 = -31
Add both numbers together:
They have tried to trick you. What is a negative number minus a negative number? X - (-Y) = X + Y
Let's start by finding the value of the bottom number: 1110 0001 -> 0001 1111 = 31
And by working this out we have the positive value (0001 1111)
Add both numbers together:
The problem with ASCII is that it only allows you to represent a small number of <B>Character</B>s (~128 or 256 for Extended ASCII). This might be OK if you are living in an English speaking country, but what happens if you live in a country that uses a different <B>Character</B> set? For example:
You can see that we quickly run into trouble as ASCII can't possibly store these hundreds of thousands of extra <B>Character</B>s in just 7 bits. What we use instead is unicode.
Each Unicode <B>Character</B> can be encoded on a computer using three different standards, that differ on the minimum number of bits used:
With over a million possible <B>Character</B>s we should be able to store every <B>Character</B> from every language on the planet, take a look at these examples:
You can find out more about unicode encoding on Wikipedia
100 0111 - as it is 3 <B>Character</B>s further on in the alphabet
110 1101 - as it is 6 <B>Character</B>s down in the alphabet
Features of Imperative High Level Languages 
Use the following appropriately.
Arithmetic operators including modulo arithmetic +, –, /, x, DIV, MOD
Relational operators =, <, >, <>, <=, >=
<B>Boolean</B> operators NOT, AND, OR
Logical bitwise operators NOT, AND, OR, XOR
Set operators Union, difference, intersection, membership
Built-in functions
Recognise the different roles a variable can take:
Understand the structured approach to program <B>Design</B> and construction.
Arrays
/questions/
When you first load Visual Studio and select to run a codice_1, you will be presented with some <B>Source Code</B>:
module module1
end module
These lines of code will tell the computer what to do, currently they do very little and we need to get started:
Tradition has it that the first program a programmer should write is "Hello World!". Write the following "sourcecode" into a command line VB.NET programming environment:
module module1
end module
If you are using Visual Studio then you can make the program run by pressing codice_2 or hitting the "Run" button that looks a little like this:
You should get the following output:
There it is, you're on your way to becoming a programmer! There is a lot more to learn and over the course of the next few sections you'll get a crash course in programming.
First of all let's look at another program and find out what it's doing:
module module1
end module
We'll take a look at each line:
This should output the following:
Hello there, my name is Peter and my age is 29
6 * 6 = 36
But wait a second, this program isn't much use! Your name probably isn't Peter and you're even less likely to be 29. Time for you to write some code yourself:
Create a short program to write the following to the screen, replacing the name Dave with your own name (unless it also happens to be Dave):
Dear Teacher,
My name is Dave and this homework is too easy.
2+2 = 4
Yours Sincerely,
Dave
module module1
end module
You can show your friends and family. But wait! It's a rubbish program if you want to share it amongst your friends! Each one of them will have to go and change the <B>Source Code</B>, then hit run. Rubbish unless you live in a country where everyone has the same name, let's call that country 'Davia', I'm pretty sure you don't live there. We better look at making a program that is a little more interactive, where people can change parts of the program without having to keep re-writing it. For that we'll need something called a variable.
Data in computer is all stored as bit patterns, i.e. in binary. In programming, we need to specify the data type so the computer treats each bit pattern correctly. For example not allowing a user to put a name in a date of birth, or the colour of someone's scarf into someone's age. They also serves the useful purpose, if used correctly, of producing the smallest program files possible. If you use them incorrectly, you might have issues with your code! There are two types of data type that you need to know
Over the next few chapters you will, no doubt, find several issues with code that you are trying to run. In some cases it won't do exactly what you want it to, in other cases it may break half way through and in many cases when you first start programming it will completely refuse to run! To fix code that doesn't work in the way you want it to is called 'debugging'. If you are used to getting everything right all the time and never making mistakes, you might want to pick another subject. If you get really angry when things don't work as you expect them to, CALM DOWN, or get a bullet proof monitor. Programming is about making lots of mistakes and learning from them, there is nothing to be ashamed of things not working first time. 
When you first start programming the most common problem you'll meet is with code not running at all
You should already have seen how you can use structure <B>Table</B>s, structure charts, hierarchy charts and procedures/functions in breaking down a complex task. This section will look at how to write the best formed and most readable code we can.
If you want to be a good programmer (and get good marks in the exam) then you have to make sure that your code is easily read by other people. There are several things you should try and do when coding:
Each procedure / Function does a single thing, such as calculate the current health of a player in a game. This means you can then use them as building blocks to build bigger solutions. If you make your procedures / functions do too many things at once, then they are very hard to re-use in different projects and harder to test.
Make sure that the datatype you use are sensible. You will get marked down for using the wrong datatypes in your <B>Database</B> <B>Table</B>s and variables.
For example:
If you are <B>Record</B>ing the total number of chocolate bars in a shop you don't need to use a Long or Float, you can only have whole numbers of chocolate bars and it is unlikely you'll have over a few million items. Use an <B>Integer</B>!
When you are declaring parts of your program and you return to the code some time later, you want to be able to understand what each variable, procedure and function does without having to trace out the code. The easiest way to start doing this is to name them correctly:
If you are using variables to store things they must have a name that makes sense so you know what it does when you read its name in your code. 
For example:
If you are <B>Record</B>ing the total number of chocolate bars in a shop you don't want to use a name like variable1. What does variable1 mean? Use a sensible name such as NumChoc.
If you are creating subroutines to process things in your code make sure you give them a sensible name so that people know what they are doing when they see them in the code.
For example:
If you have written a piece of code to calculate the average price of a chocolate bar then don't call it FunctionA(), what does FunctionA() mean?! Call it ChocAverage().
If you are using lots of variable names and function names, stick to a single style for naming them. If you use lots of different conventions things are going to look ugly. Wikipedia guidance
For example:
Long variables can be very hard to read and much easier for you to make mistakes when writing them, try to shorten things where possible.
For example:
A lot of programming environments help to indent your code automatically and you should be able to find one for the language you are using. Indenting helps people to read and understand your code quickly as it clearly shows the structure of functions, procedures, selection and iteration statements.
For example the following is very hard to read:
int main(int argc, char *argv[])
while (x == y) {
something();
somethingelse();
if (some_error)
do_correct();
else
continue_as_usual();
finalthing();
If you indent it is becomes much easier to read:
int main(int argc, char *argv[])
Some of the best written code doesn't need comments because if you have structured it correctly and used all the proper naming conventions it should be pretty easy to read. However for the code you are writing you should put some comments to explain what each section does.
'this function takes an array of prices and outputs the average
function calculateAverage(num1(20) as <B>Integer</B>)
sub calcEverything(byref a as <B>Integer</B>, byref b as <B>Integer</B>, byref c as <B>Integer</B>)
end sub
What might be considered wrong about the use of the subroutine above? How could it be fixed?
The sub routine is performing multiple function: it calculates the total AND the average. Functions/procedures should only perform one task at a time. You could replace the above with two subroutines:
List three reasons for using functions and procedures to structure your code
dim ppdpdp as <B>String</B>
dim cheesy as <B>Integer</B>
console.write("hello, please insert your name: ")
ppdpdp = console.readline()
console.write("hello, please insert your age: ")
cheesy = console.readline
if ppdpdp = "Dave" then
if cheesy = 23
console.write("daisy, daisy...")
else
console.write("I'm sorry dave")
end if
else
console.write("Get off my spaceship")
end if
Give three structured programming techniques that could be used to improve the code above:
As you have probably discovered already, converting a positive binary number into a negative binary number involves changing bits. As does converting a capital ASCII letter into a lower case ASCII letter. How exactly does a computer perform this action? The answer lies with bitwise operators:
So how can we use these for useful tasks in a computer? If we look closer at the examples above we can see that setting Input 2 bits to 1s or 0s has a direct inpact on the Output. We'll call Input 2 a mask, and we apply this mask to change the values in Input 1 in certain ways. Consider these questions about Masks:
In summary:
So know we know how each Bitwise Operator works we can use them with masks to calculate things:
Input data 11011011, I want an output with bits 4 and 5 set to 0 and I don't care about the others. (???00???)
By using an AND I can set bits to 0 and keep other bits. The mask I need is :11100111
Input data 11011011, I want an output with bits 1 and 8 set to 1 and I don't care about the others. (1??????1)
By using an OR I can set bits to 1 and keep other bits. The mask I need is :10000001
Input data 11011011, I want an output with bits 3,4,5,6 set to 1, bits 1 and 8 set to 0 and I don't care about the others. (0?1111?0)
AND: 01111110 followed by
OR: 00111100
Alternatively:
XOR: 10100101
This might all sound a little academic, what are the actual practical uses of this? Take a look at the following:
We are going to convert the number 37 into -37
1. Flip the number by XORing it
2. Add 1
We are going to find out the how to convert any Upper case ASCII value into its lower case equivalent. First lets find out the difference between two letters, we'll look at 'P' and 'p', and 'A' and 'a':
You can probably work out the difference by looking at them, but let's use a XOR to make sure:
We can clearly see that it is the 6th bit that defines whether a number is upper case (not set) or lower case (set). Now let's apply this rule to see if it works:
For the example above we can also do this by using a XOR, can you find out how?
What about converting an upper-case letter into a lower-case letter, try with X (01011000), you can't use AND what can you use?
You can program logical bitwise operators to change the case of letters and even encrypt messages. Unfortunately it isn't always possible to play around with binary digits and you may have to work with decimals instead. Let's take a look an an example using an AND:
Let's check:
Console.Writeline(3 AND 5)
1
You can also use codice_1 and any combination of them. Let's look at a slightly more interesting example:
We are going to write a short program to swap the case of a sentence that you input, for example, if you typed:
The Cat sat on the Matt
converting...
tHE cAT SAT ON THE mATT
Dim sentence As <B>String</B>
Dim converted As <B>String</B> = ""
sentence = Console.ReadLine()
Console.WriteLine("converting...")
For x = 0 To sentence.Length - 1
Next
Console.WriteLine(converted)
Program a bitwise mask that will flip the 2nd and 5th binary bits of each letter of an entered sentence to convert it into a secret code:
Dim sentence, converted As <B>String</B>
sentence = Console.Readline()
Console.Writeline("converting...")
For x = 0 to sentence.Length - 1
Next
Console.Writeline(converted)
Write code that uses bitwise operators to display whether an input number is a Odd or Even. For example if the user inputs 9, the program should output 1. If they input 64 it should output 0
Dim input As <B>Integer</B>
input = Console.Readline()
Console.Writeline("converting...")
Console.Writeline(input AND 00000001)
Modular arithmetic is all about finding the remainder from long division (MOD), and the total number of times that a number goes into a division (DIV). Let's take a look at a quick example of 10 divided by 7 (you might want to remind yourself about long division):
Hopefully that wasn't too hard. We now need to introduce some terminology, MOD and DIV:
Try these examples, working out the MOD and DIV of each:
7 / 2
MOD = 1
DIV = 3
17 / 5
MOD = 2
DIV = 3
8 / 2
MOD = 0
DIV = 4
6 / 9
MOD = 6
DIV = 0 (9 does not divide into 6 at all!)
Now try these explicit calculations:
11 MOD 8
= 3
8 MOD 4
= 0
6 DIV 5
= 1
600 DIV 20
= 30
Hopefully you are now pretty good with MOD and DIV, but what exactly is the point of all this? A very common example in past exam paper has been using the MOD and DIV to work out a binary equivalent of a denary number.
sub convertDtoB(byVal base10 as <B>Integer</B>)
end sub
Try the code out and see if it works. Try to write a trace <B>Table</B> and see how it works for the number 67 (again another popular question in exams):
Output:
Another common use is in finding out whether a number is odd or even using the MOD function. We know that MOD returns the remainder from a division sum. So for example 4 MOD 2 = 0, 5 MOD 2 = 1, 6 MOD 2 = 0 and so on. By modding something with 2 we can work out whether it is odd or not due to the return value.
Dim testNum as <B>Integer</B>
Dim temp as <B>Integer</B>
console.writeline("please insert a number to test:")
testNum = console.readline()
If testNum MOD 2 = 0 Then
Else
End If
Dim friends(0 To 2) As <B>String</B>
friends(0) = "Barry"
friends(1) = "Aubrey"
friends(2) = "Gertrude"
You can also declare arrays by placing the values directly into them, this code does exactly the same as the above:
You can pick out individual items by using their index
Console.WriteLine(friends(2))
Console.WriteLine(friends(0))
Would output:
Gertrude
Barry
You can treat indexed array items as variables and change their values:
friends(0) = console.readline()
Declare an array listing 5 animals in a zoo (aardvark, bear, cuckoo, deer, elephant) in alphabetical order:
Write code to output the first and last animal
console.writeline(zooanimals(0))
console.writeline(zooanimals(4))
Someone has accidentally eaten the cuckoo, let the user add a new third animal and print them all out:
Insert new third animal: Crocodile
1: Aardvark 
2: Bear 
3: Crocodile
4: Deer 
5: Elephant
console.write("Insert new third animal:")
zooanimals(2) = console.readline()
console.writeline("1: " & zooanimals(0))
console.writeline("2: " & zooanimals(1))
console.writeline("3: " & zooanimals(2))
console.writeline("4: " & zooanimals(3))
console.writeline("5: " & zooanimals(4))
"Alternatively an A-grade student might write:
for x = 0 to 4
next
To print out the entire array it is best to use some form of iteration:
For x As <B>Integer</B> = 0 To 2
Next
Would print out:
Barry
Aubrey
Gertrude
To overwrite something, you treat it like a variable:
friends(1)="Peter"
For x As <B>Integer</B> = 0 To 2
Next
Would output:
Barry
Peter
Gertrude
What is the output of the following code:
dim count = 8
While count >= 0
end while
23,19,17,13,11,7,5,3,2
Declare an array that will hold the names of your 5 best friends, call is codice_1
dim befr(5) as <B>String</B> 'befr(4) would also be accepted
Write a loop so that you can input each of your five best friends and it will output them in the order you input them. For example:
Insert best friends:
1: Nell
2: Al
3: Sean
4: Paley
5: Jon
You listed: Nell,Al,Sean,Paley,Jon
dim befr(5) as <B>String</B>
console.writeline("Insert best friends:")
for x = 1 to 5
next
console.writeline("You listed:")
for x = 1 to 5
next
Adjust the code above so that it outputs the list in reverse order:
dim befr(5) as <B>String</B>
console.writeline("Insert best friends:")
for x = 1 to 5
next
console.writeline("You listed:")
for x = 5 to 1 step -1
next
Sometimes you might not know the length of an array that you area dealing with yet you will still want to cycle through all the elements. If you don't know what numbers to put into the codice_2 code then how will you cycle through everything? Visual Basic and most languages offer a codice_3 routine that allows you to look at each element until you find the last one. This makes for far more ro<B>Bus</B>t code where you don't have to keep changing the variables of loops each time you change the size of arrays:
For Each n In someNumbers
Next
The above code would output:
1, 2, 3, 4, 5, 6, 7, 23, 77,
Arrays are very useful for solving all manner of problems, ranging from sorting lists to storing the results to calculations.
Take the Fibonacci sequence of numbers where: the first two numbers in the Fibonacci sequence are 0 and 1, and each subsequent number is the sum of the previous two.
For example:
This could take some time to calculate by hand but and we can use an array to calculate and store this sequence:
dim fib(30) as <B>Integer</B>
'initiate the first two values
fib(0) = 0 
fib(1) = 1
for x = 0 to 28
next
console.writeline("The first 31 fibonacci numbers are:")
for y = 0 to 30
next
Update the above code to allow the user to input a number, then the program to store and display that many fibonacci numbers. Test it for 10 and 1000
dim size as <B>Integer</B>
size = console.readline()
'<B>Integer</B> is too small to hold this value so we change to single
dim fib(size) as single 
'initiate the first two values
fib(0) = 0 
fib(1) = 1
for x = 0 to size - 2
next
console.writeline("The first " & size & " fibonacci numbers are:")
for y = 0 to size
next
Arrays are also very important when we are searching and sorting data. You will learn a lot more about this in A2, but for the moment take a look at this <B>Linear Search</B> routine:
dim search as <B>String</B>
console.writeline("Who are you searching for:")
search = console.readline()
for x = 0 to attendance.length - 1 'why do we need -1 here?
next
If we were to try and find Olamide we should see the following:
Who are you searching for:
Olamide
Olamide found at position : 2
Why do we have attendance.length - 1 in the above code?
As the array starts at location 0, the length of the array will be 1 more than the largest index number.
Adjust the code above to tell you when it hasn't found a person:
'there are multiple ways of doing this:
dim search as <B>String</B>
dim found as <B>Boolean</B> = false
console.writeline("Who are you searching for:")
search = console.readline()
for x = 0 to attendance.length - 1 'why do we need -1 here?
next
if found = false then
end if
As we have seen variables can play a very important role in creating programs and especially when executing loops. The roles of these variables can be categorised into several types:
dim fixedvalue as <B>Integer</B> = 10
for stepper = 1 to fixedvalue
next
in the above code it is easy to see the use of a fixed value and a stepper. Let's look at a more complicated example:
dim totalnum as <B>Integer</B> = 10
dim t as <B>Integer</B> = 0
dim input as <B>Integer</B>
console.writeline("The following loop will collect 10 values and gather them together:")
for x = 1 to totalnum
next
In the above code you can see the various roles of variables in collecting together 10 inputs and adding them all together (gathering):
dim mostwantedholder as <B>Integer</B> = 0
for c = 0 to 7
next
console.writeline("the highest score is: " & mostwantedholder)
In the code above you can see the use of the most wanted holder to store the maximum value from an array of numbers. As you cycle through each item in the array (using the stepper c), you update the codice_1 to store the maximum value that you come across. Let's take a look at a more complex example
dim temp, prev as <B>Integer</B>
dim arLen as <B>Integer</B> = 7
dim mostwantedholder as <B>Integer</B> = 0
for c = 1 to arLen
next
The code above describes a single pass of <B>Bubble Sort</B>. Using the temporary variable, codice_2, we bubble the largest array value to the top of the array, by comparing the current array value (codice_3) and the follower codice_4. In summary:
Finally let's look at an example of a transformation, we have used lots of loops so far, but variables certainly aren't only used in loops:
Const pi as single = 3.14
dim r as single
dim a, c as single
console.write("insert the radius: ")
r = console.readline()
a = pi * r * r
console.writeline("area = " & a)
c = 2 * pi * r
console.writeline("circumference = " & c)
In the code above there are two transform variables codice_5 and codice_6.
dim numCats as <B>Integer</B> = 9
for x = 1 to numCats
next
For the above code name the role of each of the following variables:
dim total, highest, avg, current as <B>Integer</B> = 0
dim max as <B>Integer</B> = 10
console.writeline("insert " & max & " numbers:")
for count = 1 to max
next
For the above code name the variables that act as a:
The roles you see here are included in the sylla<B>Bus</B> and it is very likely that they will be examined. There are several other roles out there which aren't covered here, these include:
You can find out more about them here
You have already learnt how to use one dimensional arrays in your computer programs. You should be familiar with code such as:
Dim friends(6) As <B>String</B>
friends(0) = "Barry" 
friends(1) = "Monica"
friends(2) = "Xiao"
This is great for storing lists of things, but what about if we want to simulate something more complex such as a game board or a map? Wouldn't it be great if we could use a two-dimensional array?
Most major programming languages allow you to use two-dimensional arrays. They work in much the same way as a one-dimensional array but allow you to specify a column index "and" a row index.
We can create the two-dimensional array shown above and assign values by doing the following:
Dim grid(4,4) As <B>String</B>
grid(0,3) = "A"
grid(3,2) = "B"
grid(1,4) = "C"
Console.Writeline("The content of 3,2 is:" & grid(3,2))
Two-dimensional arrays are very useful and a good place to get started is to create your own version of the game Battleships with a 4 cell by 4 cell grid. See if you can win, or even break it!
We are modelling the following board using the two dimensional board variable:
Dim x, y As <B>Integer</B>
Dim board(3, 3) As Char
board(0, 0) = "x"
board(0, 1) = "o"
board(0, 2) = "o"
board(1, 0) = "o"
board(1, 1) = "o"
board(1, 2) = "x"
board(2, 0) = "o"
board(2, 1) = "o"
board(2, 2) = "o"
board(2, 0) = "o"
board(2, 1) = "o"
board(2, 2) = "o"
For z = 1 To 3
Next
Declare an array to make a small checkers board of type char, 3 squares by 3 squares
dim checkBoard(3,3) as char 'also checkBoard(2,2)
create a chequered pattern using codice_1 for black and codice_2 for white
A much smarter way is to use a loop, this will allow for you to quickly create an board of any size you wish. There is a question coming up that will want you to build this!
Write a sub routine to codice_3 this board (HINT: you need loops), that takes checkBoard as a parameter
sub display(checkBoard())
for x = 1 to 3
Next
Declare a chessBoard (8*8 squares), programmatically colour it in with codice_1 for black and codice_2. You might want to look for a pattern in the colour assignments for the checker board above and make friends with the MOD function
You might also go a little loopy trying to answer this question
dim chessBoard(8,8) as char 'also chessBoard(7,7)
for x = 1 to 8
next
display(chessBoard()) ' using a slightly updated version of the subroutine display()
If you've done this you might want to get the program to print some massive boards, whatever floats your boat.
Using the following two-dimensional array, grid(4,4):
Console.Writeline(grid(3,0) & grid(3,1) & grid(3,2) & grid(3,3) & grid(3,4))
grid(2,0) = "M"
grid(2,1) = "A"
grid(2,2) = "R"
grid(2,3) = "Y"
grid(1,0) = "S"
grid(1,1) = "A" ' you could skip this
grid(1,2) = "M"
grid(1,3) = ""
grid(1,4) = ""
Another game you might play on a 2D grid is the popular game of noughts and crosses:
To do this we need to build a 3 by 3 grid:
Sub main()
end sub
Next we need a subroutine to display the grid, passing the board as a parameter
Sub display(ByVal b(,) As Char)
End Sub
We need the ability to check whether the game has been won and who has won it. We'll do this by building a win check that returns codice_10 if the specified player has won, or codice_11 otherwise. We need to pass it some values to check, namely the board - codice_12 and the player you are checking for - codice_13. Both are passed codice_14 as we don't need to change them:
Function win(ByVal b(,) As Char, ByVal p As Char)
End Function
It's a bit of a rubbish game so far, so we better let someone move:need the ability for players to play a move:
Sub move(ByRef b(,) As Char, ByVal p As Char)
End Sub
We need to end the game in a draw if all the spaces have been taken
Function drawn(ByVal b(,) As Char)
End Function
Finally we'll bring everything together
Sub Main()
End Sub
Sub game(ByVal b(,) As Char)
End Sub
Fix the program above so that an incorrect move allows the user to try again:
xxo
o--
x - make your move in the format: x,y
1,2
x - make your move in the format: x,y
1,2
x - make your move in the format: x,y
sub move(byRef b() As Char, byVal p As Char)
end sub
Fix the program above so that is checks rows, columns and diagonals for a winning position. Try to keep your answer below 19 lines and 550 <B>Character</B>s.
function win(ByVal b(,) As Char, byVal p As Char)
end function
You have met one and two dimensional arrays so far, but this isn't the limit to the number of dimensions that you can use. For example you might want to model a three dimensional world by using a 3D array
Dim space(2, 2, 2) As <B>Integer</B> ' 3 dimensional array
You have already met a variety of built-in datatypes with <B>Integer</B>s, <B>String</B>s, chars and more. But often these limited datatypes aren't enough and a programmer wants to build their own datatypes. Just as an <B>Integer</B> is restricted to "a whole number from -2,147,483,648 through 2,147,483,647", user-defined datatypes have limits placed on their use by the programmer.
Enumerated, subrange, sets
If you are using lots of constants in your program that are all related to each other it is a good idea to keep them together using a structure called an codice_1. For example you might want to store the names of each set of cards in a deck, instead of writing:
Const heart as <B>Integer</B> = 1
Const club as <B>Integer</B> = 2
Const spade as <B>Integer</B> = 3
Const diamond as <B>Integer</B> = 4
dim cardset as <B>String</B>
cardset = spade
We can bring them together in a nice neat structure called an enum:
Enum suits
End Enum
dim cardset as suits
cardset = suits.HEARTS
This allows you to set meaningful names to the enum and its members, meaning it it easier to remember and makes your code more readable.
We might also create separate constants to store the points of football results
Const Win as <B>Integer</B> = 3
Const Draw as <B>Integer</B> = 1
Const Lose as <B>Integer</B> = 0
With enums we can create a datatype called Result and store the points within it, under easy to remember name:
Enum Result
End Enum
dim ManUvChelsea as Result
ManUvChelsea = Result.Win
Console.Writeline("ManU scored " & ManUvChelsea & " points" )
Declare an enum called codice_2 that holds the months along with how many days in each for a non-leap year
Enum months
End Enum
What would the following code do:
Enum DayOfWeek
End Enum
<B>Record</B>s are collections of data items (<B>Field</B>s) stored about something. They allow you to combine several data items (or <B>Field</B>s) into one variable. An example at your college they will have a <B>Database</B> storing a <B>Record</B> for each student. This student <B>Record</B> would contain <B>Field</B>s such as ID, Name and Date of Birth. The following example that DOESN'T USE <B>Record</B>S might be simple enough for one student:
Sub Main()
End Sub
For the following input:
insert the id: 12
insert the name: Nigel
insert the Date of Birth: 12/12/1994
new <B>Record</B> created: 12 Nigel 12/12/1994
But what if your college has more than one student, we'd have to write:
It would take an awfully long time to declare them all, let alone saving writing data to them. So how do we solve this? Well we need to combine two things we have learnt about so far, the <B>Record</B> and the array. We are going to make an array of student <B>Record</B>s:
This seems to solve our problem, you might want to try it out yourself but decrease the number of students slightly!
Declare an <B>Record</B> called codice_3 to store the following Role Playing Game <B>Attribute</B>s: health, name, <B>Character</B><B>Class</B> (barbarian, wizard, elf), gold, gender
Enum type
End Enum
Structure player 'remember Visual Basic uses structure instead of <B>Record</B>
End player
Creates 2 <B>Character</B>s, Gandolf and Conan using the player <B>Record</B>
'you can of course give them different <B>Attribute</B>s
Dim Gandolf As player
Gandolf.name = "Gandolf"
Gandolf.health = 70
Gandolf.gold = 50
Gandolf.gender = "m"
Gandolf.<B>Character</B><B>Class</B> = type.WIZARD
Dim Conan As player
Conan.name = "Conan"
Conan.health = 100
Conan.gold = 30
Conan.gender = "m"
Conan.<B>Character</B><B>Class</B> = type.BARBARIAN
However, what use is a program that only saves all the students for as long as it is running? We need to know how to write to files, and read the data back, we'll look at that in the next chapter.
It's pretty cool creating your own datatypes where you can set up collections of <B>Attribute</B>s (<B>Field</B>s), but it would be even cooler if you could store custom procedures and functions as well. This is where <B>Object</B> Orientation comes in. It's a very common way of writing code with many of the world's most popular languages (Java, C++, C#, Python) making use of it. You'll learn a lot more about it in A2 but there is nothing to stop you getting started now.
Using the <B>Source Code</B> below, answer the following questions:
Using the following code answer the questions below:
3 Validation
3.1 Constant Declarations
3.2 Selection
3.2.1 IF Statement
3.2.1.1 Nested Ifs
3.2.2 Case Statement
3.3 Iteration
3.4 Procedures and Functions
3.4.1 Declarations
3.4.2 Calls
3.4.3 Parameters
3.4.3.1 ByRef
3.4.3.2 ByVal
../answers/
4 Fundamentals of Structured Programming
4.1 structure <B>Table</B>s
4.2 structure charts
4.3 hierarchy charts
4.4 Good Coding Practice
4.4.1 Use procedures that execute a single task
4.4.2 Use procedures/functions with interfaces
4.4.3 Use sensible variable datatypes
4.4.4 Meaningful identifier names
4.4.4.1 Use sensible variable names
4.4.4.2 Use sensible Function/Procedure names
4.4.5 Try to stick to one naming convention
4.4.6 Don't make your names too long
4.4.7 Indent your work
4.4.8 Use comments where necessary
4.5 The advantages of the structured approach
2.1 One-Dimensional Arrays
2.2 Two-Dimensional Arrays
2.3 <B>Field</B>s
2.4 <B>Record</B>s
2.5 Files
3 Validation
4 Fundamentals of Structured Programming
4.1 Constant Declarations
4.2 Selection
4.2.1 IF Statement
4.2.1.1 Nested Ifs
4.2.2 Case Statement
4.3 Iteration
4.4 Procedures and Functions
4.4.1 Declarations
4.4.2 Calls
4.4.3 Parameters
4.4.3.1 ByRef
4.4.3.2 ByVal
5 Good Coding Practice
5.1 Use sensible variable datatypes
5.2 Use sensible variable names
5.3 Use sensible Function/Procedure names
5.4 Try to stick to one naming convention
5.5 Don't make your names too long
5.6 Indent your work
5.7 Use comments where necessary
Focus on studying the processes of computation and understanding why and where they are important in Computing.
Consider sub-problems and the use of modules.
Determine logical conditions and consequential actions
Finite state machines with outputs - Mealy machine
Finite state machines without outputs - Finite State Automation
Understand the term "<B>Algorithm</B>".
Express the solution to a simple problem as an <B>Algorithm</B> using flowcharts, pseudo-code or structured English and the standard constructs:
Hand trace simple <B>Algorithm</B>s.
Convert a simple <B>Algorithm</B> from
Understand the standard <B>Algorithm</B>s: <B>Bubble Sort</B>, <B>Linear Search</B>
Express the solution to a simple problem as an <B>Algorithm</B> using flowcharts, pseudo-code or structured English and the standard constructs:
performing or operating each step consecutively in the order they arise
Console.writeline("This is line 1")
Console.writeline("This is line 2")
Console.writeline("This is line 3")
Assigning a value to a variable
Dim x, y, sum as <B>Integer</B>
x = 5
y = 15
sum = x + y
Selection is choosing a step
If x > 0 then
End If
If x = 0 then
End If
If x < 0 then
End If
A sequence of steps that loop until a requirement is met
x = 0
y = 5
Do
Loop Until x = y
Decision <B>Table</B>s are compact and precise ways of modelling complicated logic, such as that which you might use in a computer program. They do this by mapping the different states of a program to an action that a program should perform. Decision <B>Table</B>s take on the following format:
The limited-entry decision <B>Table</B> is the simplest to describe. The condition alternatives are simple <B>Boolean</B> values, and the action entries are check-marks, representing which of the actions in a given column are to be performed.
A technical support company writes a decision <B>Table</B> to diagnose printer problems based upon symptoms described to them over the phone from their clients. They type the following data into the advice program:
The program then uses the decision <B>Table</B> to find the correct actions to perform, namely that of Check / Replace ink.
Let's take a look at a computer game example, for a football simulation the following rules are set up.
What happens when:
Answer: Keep Playing and give them some extra time
Create a decision <B>Table</B> for the following program in an office email system
This question is open to interpretation, but you should have something resembling this:
Describe the use of Decision <B>Table</B>s
Determine logical conditions and consequential actions.
Computing is a very different course from ICT and if you have studied ICT at secondary school you should see a big difference between the two. This course will introduce you to the theory, mathematics and logic that sit behind the computing revolution. Over the course of this book I also hope to take you through the steps needed to practice computational thinking, the art of using computers to solve problems. This doesn't mean getting you to think like a computer, but it does mean getting you to think in ways that you can use computers to solve problems. Computational thinking is made up of four parts:
Let's take a look at what each of these mean:
Part of being a computer scientist is breaking down a big problem into the smaller problems that make it up. If you can break down a big problem into smaller problems then you can give them to a computer to solve. For example if I gave you a cake and asked you to bake me another one you might struggle, but if you watched me making the cake and worked out the ingredients then you'd stand a much better chance of replicating it. If you can look at a problem and work out the main steps of that problem then you'll stand a much better chance of solving it.
Let's look at an example, the equation to work out the roots of a quadratic equation.
On first look it might appear a little scary, but if we decompose it we should stand a better chance of solving it:
By noting the steps down to solve a problem we can often recognise patterns, and by giving a list of steps we are one step closer to creating an <B>Algorithm</B>.
Often breaking down a problem into its components is a little harder than taking apart an <B>Algorithm</B>, we often get given a set of raw data then are asked to find the pattern behind it:
This is pretty easy with number sets, the above has the patternformula_11. But pattern recognition might also involve recognising shapes, sounds or images. If your camera highlights faces when you point it at some friends, then it is recognising the pattern of a face in a picture.
If your phone tells you the weather when you ask it "What is the weather like in Witham", then it has recognised the word "weather" and that "Witham" is a small town in Essex, linking them together. Pattern recognition is the computing behind why you get given tailored adverts when you log into your mail account or social <B>Network</B>, they have recognised the pattern of what someone like you wants to buy. Pattern recognition might predict the weather, but chaos theory means that it's not always perfect.
Once we have recognised a pattern we need to put it in its simplest terms so that it can be used whenever we need to use it. For example, if you were studying the patterns of how people speak, we might notice that all proper English sentences have a subject and predicate.
Once we have our patterns and abstractions we can start to write the steps that a computer can use to solve the problem. We do this by creating <B>Algorithm</B>s. <B>Algorithm</B>s aren't computer code, but are independent instructions that could be turned into computer code. We often write these independent instructions as pseudo code. Examples of <B>Algorithm</B>s could be to describe orbit of the moon, the steps involved in setting up a new online shopping account or the sequences of tasks involved for a robot to build a new car.
declare robot
robot.on;
robot.get(body);
robot.get(roof);
do
until (robot.weld == success)
robot.off;
What are the four main parts of computational thinking?
Can you spot a pattern in this set of numbers?
In mathematical terms, the sequence "F" of Fibonacci numbers is defined by:
with seed values
Can you come up with an <B>Algorithm</B> to make a cup of tea?
Nowadays computers are ubiquitous and some would argue that there are no problems out there that a computer, given enough time, couldn't solve. But is this true? Is every problem solvable by a machine and can we ever know if this is the case?
Do you think that every process in nature can be simulated by a computer?
The jury is still out of this one. There are people who say yes and others no, with people such as some existentialists arguing that you cannot get a computer to simulate consciousness. This line of thought soon turns into philosophy.
Very early on in modern computing, a British academic named Alan Turing devised the halting problem. This problem is to do with whether we can determine if a program will ever come to a halt or run for ever, for example:
console.writeline("hello")
Would write "hello" to the screen then stop. However, take a look at:
dim x as <B>Integer</B> = 9
while x > 8
end while
This would never finish, it would never come to a halt as x will always be larger than 8 and never get any smaller. This means the while loop will continue for ever, constantly printing out "hello". In the two cases shown it is easy to tell if a program will halt or not, but it isn't so easy. Imagine we get a more complex piece of code:
dim x as <B>Integer</B> = 9
dim total as <B>Integer</B> = 0
while total < 100
end while
This is harder but still solvable taking a little more thinking and a little time on the processor. We could get a piece of code that takes weeks, years or even thousands of years to finish. But how can we know that all programs will end or not? To determine whether the program halts we:
Surely we create a mathematical proof to determine whether code will end or not I hear you say. Well let's prove just the opposite:
Let us create a program K that will loop forever if the result of H is to halt, and halt if the result of H is to loop for ever:
function K(i):
We can therefore see that there are examples of programs such as K that we cannot determine whether they are ever going to halt.
Pseudocode uses a combination of programming terminology and plain English to describe <B>Algorithm</B>s in a form that is easier for people to understand than conventional programming language code. There are no standards for pseudocode and a program in pseudocode is not an execu<B>Table</B> program. Psuedocode is used in textbooks and scientific publications to describe various <B>Algorithm</B>s, and also in planning of computer program development, for sketching out the structure of the program before the actual coding takes place. It typically leaves out details that are not essential for human understanding of the <B>Algorithm</B>, such as variable declarations, system-specific code and some subroutines.
Below is an example of a pseudocode <B>Algorithm</B>
For i ← 1 to 100
Converting this into VB.NET, we get:
dim print_number as <B>Boolean</B>
For i = 1 to 100
Structured English is very similar to Pseudo code, but it tends not to use so many mathematical symbols. Often people start with Structured English, convert it to Pseudo Code and then write Execu<B>Table</B> Code. Examples of common keywords: codice_1
What are the rules when writing pseudocode?
There are no set rules, but the code should provide clear descriptions of the <B>Algorithm</B>s being outlined.
What is the difference between pseudocode and a programming language such as javascript?
Pseudocode cannot create execu<B>Table</B> code, whilst javascript can.
For the following pseudocode write a VB.NET equivalent:
for x from 1 to 7 inclusive
loop
print total 
dim total as <B>Integer</B> = 0
for x = 1 to 7
next
console.writeline(total)
Write pseudocode for the following problem:
There are many ways to answer this correctly as long as it is clear you got it right. Ask your friend to check it.
input 4 numbers
sum = add numbers together
avg = sum / 4
print avg
Solving problems is never easy, so you need to break them down into manageable chunks:
Before we should start solving a problem, we need to understand exactly what the problem is that we are dealing with. Only then can we start to think of solutions. By doing this we can avoid spending a lot of time on unsui<B>Table</B> solutions that we'd then have to throw away.
"Knowing the level of thinking required to solving the problem and having an idea of a solution which is relevant to the problem."
To fully understand a problem we need to think about the following:
For example:
After observing and researching the <B>Bus</B>iness I have found out the following:
Understanding the limits to coming up with a solution and knowing what can and cannot be done through lateral thinking. These boundaries may also be known as a type of constraint.
It is important to define what your system is not going to do - as important as considering what it should do. Most software projects fail because of specification creep - where the code in development moves away from the requirements because someone (often the developers themselves) feels that it would be good if the application also did <this> and <why not put it in while you can> thinking. You will end up with code that you do not know how to test or fix when it goes wrong - which is a sign of poor development that markers will not be able to ignore!
Once you have defined the problem, given, goal, ownership and resources you need to start thinking about how you will implement a solution. This might involve using tools such as flow charts, pseudo code, top down <B>Design</B>, finite state machines etc. These will allow you to get started with actually making the solution. We will meet all of these <B>Method</B>s shortly.
Once you have created a solution you need to check it against the original problem. If it solves the problem then you have a successful solution. If it doesn't then you have failed and will have to go back to the drawing board to try another solution that works.
Note that you can (and should) test your <B>Design</B> on paper against the specification (and your test plans) before you code it. This "walk through" approach is often done in team working - which encourages the consideration of abnormal data input, or using work flows that had not been thought of.
A Structure Chart in software engineering is a chart which shows the breakdown of a system to its lowest manageable parts. They are used in structured programming to arrange program modules into a tree. Each module is represented by a box, which contains the module's name. The tree structure visualizes the relationships between modules, showing data transfer between modules using arrows. Structured Charts are an example of a top-down <B>Design</B> where a problem (the program) is broken into its components. The tree shows the relationship between modules, showing data transfer between the models.
Let's take a look at a simple example of how this might be executed when representing the following code:
dim num1, num2 as <B>Integer</B>
sub calculateAverage()
end sub
function average(a,b)
end function
sub inputNums()
end sub
sub outputAvg(x)
end sub
Create structure charts for the following code:
sub main()
end sub
function average(a,b)
end function
sub sayHello()
end sub
A selection in a Structure Chart is determined by the diamond symbol. This means a condition will be checked and depending on the result, different modules will be executed.
sub main()
end sub
Using the semi circular arrow we can represent iteration in Structure Charts. The arrow encompasses a link to a module, implying that module is executed multiple times. Let's take a look at a coded example:
sub main()
end sub
Function countdown(a)
End Function
Create structure charts for the following code:
sub howManyThrees()
end sub
sub checkNumber(byRef c, byRef t, byVal n)
end sub
function divBy3(x)
end function
function add(n, t)
end function
function startMsg()
end function
sub endMsg(n)
end sub
A top-down approach (also known as stepwise <B>Design</B>) is essentially the breaking down of a system to gain insight into the sub-systems that make it up. In a top-down approach an overview of the system is formulated, specifying but not detailing any first-level subsystems. Each subsystem is then refined in yet greater detail, sometimes in many additional subsystem levels, until the entire specification is reduced to base elements. Once these base elements are recognised then we can build these as computer modules. Once they are built we can put them together, making the entire system from these individual components.
To show you an example of Top-Down <B>Design</B> we'll take the act of making pancakes. Starting from the top we have the task to:
But saying that by itself isn't enough to actually make any pancakes, we need to break the task down:
Each of these tasks can then be broken down further:
And each of these tasks can be broken down further, let us take a look at the Cook:
We can break down some of these tasks even further. So starting at a single point, the creation of a pancake, we have broken down the task into it individual parts
Draw a top-down <B>Design</B> tree to three level depth for making a modern First Person Shooter
Your answer probably won't be the same as this as the question is open to interpretation, but hopefully it'll be similar:
Hand tracing or 'dry running' allows you to use a trace <B>Table</B> to
Taking a program like the one below we need to keep track (trace) all the variables and outputs.
Dim y as <B>Integer</B> = 3
For x = 1 to 4
Loop
Console.writeline(y)
To do this we create a trace <B>Table</B>:
The exam will normally ask you to create a trace <B>Table</B> of some sort so you need to be very confident with them. The exam will usually give you the headings but just in case, there are several steps in making a trace <B>Table</B>, the first one is to note the <B>Table</B> headings, this involves the following:
It is very easy to jump right in when filling in trace <B>Table</B>s, but you must be careful. The exam will try and trick you, so trying to predict what a trace <B>Table</B> will do is not a good idea. In fact, the best idea is to <B>Switch</B> your brain off and tackle the problem line by line, exactly as a computer would. Take a look at the following example:
Dim sum as <B>Integer</B> = 0
Dim avg as decimal
For x = 0 to 5
Loop
avg = sum / (x + 1)
Console.writeline("average =" & avg)
So we should construct the following <B>Table</B>:
Now looking at the names of the variables you might be tempted to add all the values in the array together to find the sum, and then find the average number from this calculation formula_1. However, you'd be wrong, create a trace <B>Table</B> and see if you can find the correct answer:
So what went wrong? If you look at the trace <B>Table</B> you can see that we never added the number 2 from the num array to the sum, it stopped at element 5. To fix this we would adjust the following line:
For x = 0 to 6
Complete the trace <B>Table</B> for the following code, where the number input is 39
Dim input As <B>Integer</B> = 78
Dim r As <B>Integer</B>
Console.Write("Input a number:")
input = Console.ReadLine()
Dim op As <B>String</B> = ""
While (input > 0)
End While
Console.Write(op)
Console.ReadLine()
As always with programming there is a shorter way of performing this task, take a look at:
Dim num As <B>Integer</B> = 239938
Dim ss As <B>String</B> = Convert.To<B>String</B>(num, 2)
Console.WriteLine(ss)
Do you think you can work out how to output an hex, base 16 number? I bet you can.
What does the above code do?
It converts a base10 (denary/decimal) number into its binary equivalent
Complete the trace <B>Table</B> for the following code:
Dim n as <B>Integer</B> = 0
for i = 0 to 5
loop
What function does the above code perform?
It finds the highest value in an array of values
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
=2011 Exam=
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
Reading the specification it appears that you will have to learn the following:
The exam is split into 4 sections that must be completed on a computer.
<30 minutes>
Theory Questions based on the material you have covered for unit 1. For an overview of what this might include see the specification and this wikibook
<20 minutes>
Programming solutions to short problems, not based on the preliminary material or skeleton code
<20 minutes>
Theory questions about the preliminary material and skeleton code
<50 minutes>
Program solutions based around the preliminary code. The guidance below doesn't pretend to offer the actual questions that will be set in the exam, but by doing them you should hopefully get a better grasp of the code and be able to answer any questions thrown at you during the exam.
When we are making the cricket game we are allow the user to use their own die or a random number die built into the program. We are now going to look how the random number feature works:
To start using random numbers are need to set up the randomize function. This is a little like throwing a million dice in the air at once and storing all their results, we can then use these 'random' results in our program
The next thing we need to do is to allocate a number from one to six for the dice role. Remember we have two dice, one for the bowler and once for the batter:
To get a random number we use the Rnd() function (remember a function returns a value). Unfortunately the Rnd() function returns a value between 0.000000 and 0.9999999. So we need to convert this to a number between 1 and 6.
To do this, we can multiply the number by 6, this will give us values between 0.00000 and 5.99999. These are obviously not whole numbers so we need to round them off to be <B>Integer</B>s Using the Int() function. Giving us a number between 0 and 5. Still not perfect as we need something between 1 and 6. 
So we need to be a little smarter and add 1. This will now give us a number between 1and 6. 
=Section B Introduction=
This section will ask you questions that you will have to find programming solutions to. There will be more than one way of answering each question, so the answers below are only indicative of what we are looking for. As long as you get the same answers it doesn't matter how you do it. You may be given pseudeocode to help you program the problem.
Write a program to enter batting scores until the number 0 is input. And then output the total and average score.
Write code to keep asking for login, only accepting: username= PSN Password = easy. Otherwise it should say. “Not hacked yet”:
Write code to print out a Christmas tree of a user defined size: even rows = *, odd = #. For example for the number 4 it should output:
Visual Basic allows you to do many things with <B>String</B>s. This is particularly important if you are wantint to extract data from text, search text, or generally manipulate text. Some of the functions you might be interested in are:
For the exam you are dealing with a CSV file. This has comma separated values, so we might have to find the data that is hiding in the commas. Take a look at the example below.
Output:
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
The exam is split into 4 sections that must be completed on a computer:
<30 minutes>
Theory Questions based on the material you have covered for unit 1. For an overview of what this might include see the specification and this wikibook
<20 minutes>
Programming solutions to short problems, not based on the preliminary material or skeleton code
<20 minutes>
Theory questions about the preliminary material and skeleton code
<50 minutes>
Program solutions based around the preliminary code. The guidance below doesn't pretend to offer the actual questions that will be set in the exam, but by doing them you should hopefully get a better grasp of the code and be able to answer any questions thrown at you during the exam.
=Section B Introduction=
This section will ask you questions that you will have to find programming solutions to. There will be more than one way of answering each question, so the answers below are only indicative of what we are looking for. As long as you get the same answers it doesn't matter how you do it. You may be given pseudeocode to help you program the problem.
Write a program to enter batting scores until the number -1 is input. And then output the total and average score.
Mirayde's One
Write code to keep asking for login, only accepting: username= PSN Password = easy. Otherwise it should say. “Not hacked yet”:
Dim username As <B>String</B>
Dim password As <B>String</B>
Do
Loop Until username = "PSN" And password = "easy"
Console.ReadLine()
Write code to print out a Christmas tree of a user defined size: even rows = *, odd = #. For example for the number 4 it should output:
Dim number As <B>Integer</B>
Console.WriteLine("Please enter a number: ")
number = Console.ReadLine
For count = 1 To number
Next
Console.ReadLine()
Typical = 3
Extreme = 9,4 or 1
Erroneous = 7
Typical = N,S,E or W
Extreme = N,S,E or W
Erroneous = I 
NoOfTraps, NSDistance, WEDistance
Improves readability of code // Easier to update the programming 
code if the value changes ( A. by implication) // reduce the likelihood 
of errors;
NoOfTraps, NSDistance, WEDistance
Choice
Cavern, TrapPositions
GameData, CellReference
ResetCavern(ByRef Cavern(,) As Char);
Cavern(NSDistance, WEDistance);
Count; Count1; Count2;
Cavern(,), TrapPositions(), MonsterPosition, PlayerPosition, FlaskPosition, MonsterAwake, NewGame
Const NoOfTraps = 2
Choice = GetMainMenuChoice()
Dim MonsterAwake As <B>Boolean</B>
(Pascal) 
Choice : <B>Integer</B>;
FlaskPosition : TCellReference;
MonsterAwake : <B>Boolean</B>;
MonsterPosition : TCellReference;
PlayerPosition : TCellReference;
TrapPositions : TTrapPositions;
The answer may be a decimal
Count1, Count2, Count
NSDistance, WEDistance
Choice MAY be an answer here.
FlaskPosition may be a recent holder(?). See 'MoveFlask()' sub-routine. I think it is because the program holds the flask ("F") in the 'FlaskPosition' cell reference until the 'NewCellForFlask' variable can hold "F" (after which FlaskPosition changes to " "):
To check each element of the array by progressing firstly along the columns, then down to the next row and to continue until the end of the array is reached;
The loop end is known when the loop is created and therefore has a known number of steps; the loop does not depend upon an event where the occurrence of that event is unknown;
Function GetMainMenuChoice() As <B>Integer</B>
Choice = GetMainMenuChoice()
Sub DisplayMenu()
Cavern(,)
When a parameter is passed byRef, the variable inside the routine uses a reference to the same memory location as the variable passed as the parameter. When a parameter is passed byVal, the variable inside the routine copies the value of the calling code's variable to the routine's parameter.
Can't find the ResetTopScores sub routine!! If there was one, it would use byRef so that when the scores are reset in the sub-routine, the changes to the variable remain in the whole program and not within that particular sub-routine alone.
GetMainMenuChoice = Choice
ValidMove; Is set to TRUE initially and remains so if the move made is considered valid but is changed to FALSE if considered invalid. This flag is then parsed as the final value back to the calling routine;
When you first run your code you will probably find that everything appears to work. Don't be deceived, try and put incorrect menu choices in, try and move your <B>Character</B> outside the map. We have a lot to fix and any errors are very likely to come up as questions in the exam, where you have to fix them!
There are 3 steps of resuming in the game.
1. This is the code to be created:
You need to create this code[ABOVE CODE AS SHOWN] under the code BELOW:
2. Then change from this:
To this:
If gameinprogress(monsterposition) then console.writeline(“5. Resume game”)
3. After, create a case 5:
DisplayMenu()
This is what you put in case 5:
Case 5
First, you need to declare a <B>Boolean</B> variable to the code to allow it to have an enable function.
Const NoOfTraps = 2
We then need to allow the an input to take place so we add it to sub makemove.
Case "E"
We then need to allow the input to be valid.(Section is Sub CheckValidMove)
Finally, we need to make it when cheat = true, then it will display all the cavern items. This is added to the sub DisplayCavern.
There are limits to where the player can move, on the x axis, it is all spaces above and including 1, and all spaces below and including NoOfCellsEast:
on the y axis, it is all spaces above and including 1, and all spaces below and including NoOfCellsSouth
Using this knowledge we need to stop the codice_1 subroutine allowing the user to move outside these bounds.
Think about why codice_2 has been passed to codice_3 sub, and that it isn't currently being used. Could the check be done there? At the moment to check that it is a valid move it uses:
But this doesn't take into account the times when an attempted move is not valid, for example when the player chooses N (UP) when they are in the first row (row 1):
We need to update the IF STATEMENT above that sets ValidMove = False, to:
If Direction = "N" And PlayerPosition.NoOfCellsSouth = 1 Then
ElseIf Direction = "S" And PlayerPosition.NoOfCellsSouth = NSDistance Then
ElseIf Direction = "E" And PlayerPosition.NoOfCellsEast = WEDistance Then
ElseIf Direction = "W" And PlayerPosition.NoOfCellsEast = 1 Then
End If
Also we might want to add a little feedback to codice_4 sub, highlighting when moves are not valid. We need to add the following code above the line that says: codice_5
Loop Until ValidMove 'this line already exists!
For Pascal
Function CheckValidMove(PlayerPosition : TCellReference; Direction : Char) : <B>Boolean</B>;
Remove the 3 lines
from:
And replace them with:
Threading.Thread.Sleep(1000) 'wait for 1 second
If this question is going to be asked it is very unlikely that you'll be asked to remember the sleep command, and you'll probably be given it
Sub MakeMove(ByRef Cavern(,) As Char, ByVal Direction As Char, ByRef PlayerPosition As CellReference)
First you'll need to add the case for the new commands to be recognised in the MakeMove sub-routine:
But this doesn't work! Can you spot why?
It is because the variables MoveDirection, Move and the GetMove() Function have been declared as a Char (accepting only ONE <B>Character</B>) and each time 'Direction' has been passed, it has passed as a Char also.
They all need to be changed (inefficiently in terms of memory) to the <B>String</B> data type to allow the user to type more than one <B>Character</B> to move the position of the player (i.e. "NE", "SE", "SW", "NW").
Use 'Ctrl + F' (Find and Replace box should appear) to find and replace all of the Char datatypes to <B>String</B> for ONLY the following variables or Function:
Of course you must also update the move options here:
There are 3 sub-routines that need to be edited for this. First the sub-routine that writes out move options on the screen for the user:
Second, the MakeMove sub-routine which actually processes the movement of the player when a key is pressed:
Lastly, the CheckValidMove which simply checks if the key they have pressed is a valid choice:
First we need to create a subroutine to "teleport" the user. This will need access to the codice_6 so we can update it, and the codice_7 function so we can randomly assign a new position: But this won't let the player teleport to position[1,1]?!
Sub teleport(ByRef PlayerPosition As CellReference)
End Sub
Now we have declared the sub routine we must create an option in the codice_1 subroutine to to handle pressing "T":
End Select
We must add the "T" option to the codice_9 sub routine:
Console.WriteLine("Enter W to move WEST")
Console.WriteLine("Enter T to move Teleport")
Console.WriteLine("Enter M to return to the Main Menu")
And finally we must allow the "T" option to be a codice_3 sub routine:
If Not (Direction = "N" Or Direction = "S" Or Direction = "W" Or Direction = "E" Or Direction = "M" Or Direction = "T") Then
End If
With this code the player can teleport as many times as they like. An additional <B>Boolean</B> variable is needed if the player is only going to be allowed to teleport once. The <B>Record</B> structure will also need changing. Possibly too many changes for the exam?
Alternative way and to allow to ONLY teleport once:
We need to make a <B>Boolean</B> variable to see if we used teleport or if we didnt, true or false:
Module Module1
Then we need to add a menu option here:
Then we Have to add a code to allow to teleport to a new random position
Now we need to update the code that checks if its a valid move. IT has to be "T" and teleport has to be = "True"
Function CheckValidMove(ByVal PlayerPosition As CellReference, ByVal Direction As Char) As <B>Boolean</B>
Next we need to fix a small problem to allow user to go back to the main menu,
start a new game and BE ABLE to teleport once again since its a new game.
Sub PlayGame(ByRef Cavern(,) As Char, ByVal TrapPositions() '... ect
 Function CheckValidMove(ByVal PlayerPosition As CellReference, ByVal Direction As Char) As <B>Boolean</B>
In the codice_11 function change the line:
Move = Console.ReadLine
to:
Move = UCase(Console.ReadLine)
'Or
Move = Console.ReadLine.ToUpper
'Or in python 3
Move = input().upper()
'Or in Java
move = <B>Character</B>.toUpperCase(move);
This converts whatever the input is into an Upper Case letter
To stop the menu breaking on you typing in "g" or "one" we have to change the code in several places:
We then need to catch any errors when the program converts the input into an <B>Integer</B> by adjusting the codice_12 function:
This should work. But to make it even better we should probably give an error message to tell them when they have typed in an incorrect menu choice if the number is incorrect. Take a look at the codice_13 function again and at the case statement. We are going to add an else case that will handle any incorrect input:
End Select
Change the codice_14 function to:
For Pascal
Function GetMainMenuChoice : <B>Integer</B>;
Adding a TYPE Check validation (try/catch) to GetMenuChoice will stop runtime exceptions being thrown
Change the codice_14 function to:
We might want to add a little feedback to codice_4 sub, highlighting when moves are not valid
Loop Until ValidMove
A simple solution:
In playGame <B>Method</B>
//add to top
int moveCounter = 0;
add in if statement
if (moveDirection != 'M' && validMovement(moveDirection, playerPosition)==true)
add in the if Statement for flaskfound
if (flaskfound)
How to do for VB.net
Sub PlayGame(ByRef Cavern(,) As Char, ByVal TrapPositions() As CellReference, ByRef MonsterPosition As CellReference, ByRef PlayerPosition As CellReference, ByRef FlaskPosition As CellReference, ByRef MonsterAwake As <B>Boolean</B>)
Dim Count As <B>Integer</B>
Then we add the score to the win message
Sub DisplayWonGameMessage(ByVal moveCounter As <B>Integer</B>) '<--- ADD THIS
"You have completed the game in " & moveCounter & " turns") <----ADD COUNTER TO THE WIN MESSAGE
Another thought - what about if the game is saved. Wouldn't we also need to save the number of moves?? If so, this makes the problem considerably more difficult as it involves changing the <B>Record</B> structure.
Sub SaveGame(ByVal TrapPositions() As CellReference, ByVal MonsterPosition As CellReference, ByVal PlayerPosition As CellReference, ByVal FlaskPosition As CellReference, ByVal MonsterAwake As <B>Boolean</B>)
You must add the option to the main menu:
Sub DisplayMenu()
End Sub
We must create a sub routine to display the story:
Sub DisplayStory()
End Sub
We must add the option to display the story to the main menu system in the codice_17 subroutine:
End Select
Module Module1
'Also need to change the number of "----" to this
'Second Option
the number of traps is hard coded in:
codice_18
But later it is not used when cycling through the traps, this means that if you adjust the number of traps then the code will not include any more than two and break on any less than two. However the number of traps must remain a constant and not changed at runtime as it is used to create the codice_19 array.
REMOVE:
MonsterAwake = CheckIfSameCell(PlayerPosition, TrapPositions(1))
AND MAKE THE CHANGES IN HERE:
The final question of the exam is usually an extend and stretch question. It won't require you to code anything, but to discuss how you would code the solution to the problem if you had the time:
In order to make the game more playable, it has been decided to make the cavern have different levels. This means that the player will be able to move up or down in some parts on the cavern. This means that the player will be offered the choices
Describe the changes necessary to the following data structures in order to make this possible.
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
The exam is split into 4 sections that must be completed on a computer:
<35 minutes>
Theory Questions based on the material you have covered for Unit 1. For an overview of what this might include see the specification and this wikibook.
<25 minutes>
Programming solutions to short problems, not based on the preliminary material or skeleton code.
<10 minutes>
Theory questions about the preliminary material and skeleton code.
<50 minutes>
Program solutions based around the preliminary code. The guidance below doesn't pretend to offer the actual questions that will be set in the exam, but by doing them you should hopefully get a better grasp of the code and be able to answer any questions thrown at you during the exam.
=Section B Introduction=
This section will ask you questions that you will have to find programming solutions to. The past exam papers have always provided a strict program specification in the form of variable names and pseudocode. It is very likely that a problem will be set around the theme of cryptography but different to the skeleton code in some way. You should be able to interpret pseudocode, structured english, structure charts, stepwise refinement <B>Table</B>s and decision <B>Table</B>s. Any of these techniques could be used to communicate an <B>Algorithm</B> to be coded.
Obviously all the past papers from AQA have good section B questions that you should attempt. Here are some around this year's theme... 
(a) Write a program that encrypts a number sequence using the same principle as the Caesar Cipher. 
(b) Test your program using a key= 6 and the number sequence 0123456789
OUTPUT "enter a number to encode"
INPUT plainNum
OUTPUT "enter a key"
INPUT Key
For i = 0 to (length of plainNum -1)
Next
OUTPUT codedNum
Using the average frequency that <B>Character</B>s appear is one way to "crack" many simple ciphers. You can learn more about this here: http://en.wikipedia.org/wiki/Letter_frequency.
Write a program that counts the number of times each <B>Character</B> appears in some inputted text. It should output a list of <B>Character</B>s with the number of times each appears.
'solution to follow 
Another question...
'Another solution
Erroneous data – Anything other than “a, b, d, e, g, h, n” (in the original program, an example would be “z” or “2”).
Extreme data-
Typical data – Letters “a, b, d, e, g, h, n” (in the original program).
Improves readability of code // Easier to update the programming 
code if the value changes ( A. by implication) // reduce the likelihood 
of errors;
Any from;
Ciphertext, Plaintext, Choice, AmountToShift, StartPosition, EndPosition, SizeOfRailFence, N,MenuChoice, TextFromUser, <B>Character</B>FromFile, TextFromFile, Count, Key, TypeOf<B>Character</B>, ChangedText, ASCIICode, NoOfColumns, NoOfRows, NoOfCiphertext<B>Character</B>s, NoOfCiphertext<B>Character</B>sProcessed, i, j, PostitionOfNext<B>Character</B>, LastFullRowNo, AmountToReduceNoOfColumnsTimesjBy, BeginningOfNextRowIndex, HiddenMessage, CurrentPosition.
VB.net = Asc("a")
Count.
EveryNth<B>Character</B>Steganography(StartPosition, EndPosition, N)
Plaintext = ""
VB.net - Dim N As <B>Integer</B>
textFromUser
Count
ciphertext
Count
When a parameter is passed byRef, the variable inside the routine uses a reference to the same memory location as the variable passed as the parameter. When a parameter is passed byVal, the variable inside the routine copies the value of the calling code's variable to the routine's parameter.
ByRef is used because the procedure is then able to change the value that it was sent when it was called.
1. You could be asked to add an "r." function to reset the Plaintext and the Ciphertext variables.
This is the VB.net Solution
'Added to the end of the case select in sub 'Main':
'Added to Sub 'DisplayMenu':
This is the Python Solution
print "RESET"
print " r. reset the plaintext & ciphertext"
elif Choice == 'r':
2. There is unnecessary code in the EveryNth<B>Character</B>Steganography function and GetTextFromFile. There is no need to pass the CurrentPosition twice from the EveryNth<B>Character</B>Steganography function. In the GetTextFromFile function this means the second loop is not required as it means the start and end position are the same thing.
Of course it could mean that you will be asked to add a variable in which the user will set how many <B>Character</B>s should be grabbed 
from the file each time. The loop, although not needed right now would then be needed and current position, currentposition+numberof<B>Character</B>s would be passed through instead
This is the Pascal/Delphi solution:
Amend the call to GetTextFromFile from EveryNth<B>Character</B>Steganography function so that it only passes the current position once. Then amend GetTextFromFile to this:
Function GetTextFromFile(StartPosition: <B>Integer</B>) : <B>String</B>;
//get rid of the end position above
This is the Vb.Net solution:
Amend the call to GetTextFromFile from EveryNth<B>Character</B>Steganography function so that it only passes the current position once. Then amend GetTextFromFile to this:
3. Currently the menu option will not accept capital letters. Modify the code to allow this.
This is the Visual Basic solution:
Alternative answer
This is the Pascal/Delphi solution:
Alternate Solution
Case Choice Of
This is the Python solution:
4. You may be asked to validate the users choice to make sure it is valid.
This is the Visual Basic Solution:
Or, if you don't want to waste a load of time doing a pointless loop where the code needs to be changed every time if a new menu choice is added, look below:
To validate the user's choice:
However, the above choice is better because it constantly prompts the user to enter a new choice until a valid one is entered. 
Using the example below means you will have to close the program and start it up again if you enter an invalid choice which is 
stupid and will not get you any marks as it only tells the user their choice is invalid and does not prompt them to enter a valid one!
Actually, you are wrong. The menu loops until;
Loop Until Choice = "q"
Therefore it does actually work as the menu will just loop again. Actually try it!
To validate the user's choice:
This is the Pascal/Delphi solution:
Function ValidateText (usrtext:<B>String</B>):<B>Boolean</B>;
var
validate:<B>Boolean</B>;
Validinput:<B>String</B>;
count: <B>Integer</B>;
Begin
end;
Alternatively, using a set:
function ChoiceIsValid(Choice:<B>String</B>):<B>Boolean</B>;
var
5. The Caesar Cipher <B>Encryption</B> does not work for keys lower than -26. Fix this. Nor of course for keys over +26
This is the Visual Basic Solution:
This is the Pascal/Delphi Solution
Function ApplyShiftToASCIICodeFor<B>Character</B>(ASCIICode, AmountToShift : <B>Integer</B>) : <B>Integer</B>;
6. If a Zero or negative value of N is used the program will get stuck in an infinite loop - preventing this by requiring a positive value to be entered is easy and quite possible they will ask.
This is the Pascal/Delphi Solution
Function GetValueForN : <B>Integer</B>;
This is the Visual Basic Solution
7. There are several other examples where the range of an <B>Integer</B> input is not checked but ought to be: StartPosition should be positive, EndPosition should be greater than StartPosition, the Caesar key should be between 1 and 25. These could all be straightforward questions. Perhaps write a generic range-checking function?
This is the Pascal/Delphi solution. It is a general function that can be called anywhere you need to check a number. It returns 0 if the number is not valid. This means it returns 0 if it is not a number and 0 if it is the number 0. This is because 0 is invalid even it if is a number as all of the numbers required in the system should be greater than 0.
Function checkValidNumber(numberToCheck:<B>String</B>):<B>Integer</B>;
var
begin
end;
An alternate form uses the Val procedure to avoid creating an exception
Function checkValidNumber(numberToCheck:<B>String</B>):<B>Integer</B>;
var
begin
end;
You can then call this anywhere eg as part of GetSizeOfRailFence. GetSizeOfRailFence has also been amended here to ensure that either plaintext or ciphertext exist, depending on what option the user has selected from the menu. I deemed the rail fence size invalid if no ciperh/plaint text existed or if the size was less than or equal to 1 as could see no point in having a rail fence of 1 as would just give it as it was originally.
it is a valid number. If it is it then checks to make sure the rail fence size
is is greater than 1 and less than the length of the plain/cipher text depending
This is the VB.Net solution. It is a general function that can be called anywhere you need to check a number. It returns 0 if the number is not valid. This means it returns 0 if it is not a number and 0 if it is the number 0. This is because 0 is invalid even it if is a number as all of the numbers required in the system should be greater than 0.
Function checkValidNumber(ByVal numberToCheck As <B>String</B>) As <B>Integer</B>
End Function
An alternate form uses the TryParse procedure to avoid creating an exception
Function checkValidNumber(ByVal numberToCheck As <B>String</B>) As <B>Integer</B>
End Function
8. Cannot see this being something the students need to do but if anyone is interested here is the code to crack diary.txt.
Procedure crackSteg;
var
begin
9. The Caesar Cipher Key (N) could also be validated using a "Type check" (signed <B>Integer</B>), a "Range check"(-25 to +25), and a "Presence check"
This is the Pascal/Delphi solution. 
Function GetKeyForCaesarCipher : <B>Integer</B>;
10. The current menu has some missing letters/options (c, f, i, l and m). Maybe they could ask the following ...
11. Add a new PLAINTEXT option (c) to read the plaintext from a text file. The user should choose the filename.
End Function
'Add this to the DisplayMenu()
'Add this to the Sub(Main)
Case "c"
Pascal/Delphi answer::
function getPlaintextFromFile : <B>String</B>;
var
begin
end;
12. Add a new CIPHERTEXT option (f) to read the ciphertext from a text file. The user should choose the filename.
'Add this line into the appropriate part in DisplayMenu()
'Add this line into the appropriate part of Main()
Case "f"
13. Add a new ENCRYPT option (i) to write the ciphertext to a text file. The user should choose the filename.
'Add this to the appropriate part in DisplayMenu()
Console.WriteLine(" i. Save ciphertext as file")
'Add this to the appropriate part to the Main()
Case "i"
procedure SaveCiphertext(Ciphertext : <B>String</B>);
var
begin
end;
14. Add a new DECRYPT option (l) to write the plaintext to a text file. The user should choose the filename.
'Add this to the appropriate part in DisplayMenu()
'Add this to the appropriate part in Main()
Case "l"
15. Option (m). What could this be used for?
16. Possibly add a new cipher altogether; some of the letters may also have been omitted for the purpose of confusing students.(e.g. vignere – but this requires a lot of work to set up).
17. the steganography function can crash when you dont put sensible data in – so I guess we need to check file sizes and stuff.
18. Maybe the option to multiple encrypt for added security . I.e. encrypt the encrypted text or combining different <B>Algorithm</B>s?
'The following series of functions requires little modification and can be used to apply multiple levels of <B>Encryption</B> for
'the plaintext
'This is the equivalent decryption code
Case "l"
19. You can improve the caesar <B>Algorithm</B> by randomizing the transposition (instead of it jumping by the same amount. If you ‘randomize(<B>Encryption</B>_key)’ before generating random values both sender and receiver will get the same series of random transpositions)
20. Add a new section to the menu called 'CRACK' with the options to crack either the 'ceaser' or 'rail fence'. Get some encrypted text from a fellow student and see (without knowing the <B>Encryption</B> key) what the message is. In the case of the ceaser cipher you need to try 52 different keys (-26 to 26). In the case of the rail fence you need to try each value up to the number of <B>Character</B>s in the cyphertext <B>String</B>. Make sure you utilise the existing decryption functions!
This Code will crack RailFence
To edit the code to crack the ceaser cipher: (By Quoc-Hau Pham. Student of CTKSFC Lewisham)
Or you can do a function to crack the ceaser cipher.:
'Add the following code to the case statement in the Main() Subroutine:
Case "c", "C"
'Add the follwing code to the DisplayMenu Subroutine:
'p' is the case I used for the menu, which can be changed. Just enter an encoded rail fence and it'll run all the possible rail numbers. Remember to add the option in your menu so a user can use it.
NOTE: There is currently a bug where the program has trouble working with codes that haven't been encryted in the same session. I'm working on a fix. If you fix it yourself, feel free to overwrite this. Fixed - it was decrypting the cyphertext variable whist assigning user input into plaintext
For cracking the Caesar cipher:
Caesar crack in pascal/delphi:
procedure CrackCiphertext(Ciphertext : <B>String</B>);
var
begin
end;
Rail fence crack in pascal/delphi:
procedure CrackCiphertextRailFence(Ciphertext : <B>String</B>);
var
begin
end;
21. You can give a negative starting position and it returns the first <B>Character</B> of the file repeatedly
example: MMMMMMMMMMMMMMMaia rolled her eyes
22. For the Caesar Cipher, the Rail Fence and the input for StartPosition, EndPosition and N, it doesn't check that it is an <B>Integer</B>. 
Function GetValueForN() As <B>Integer</B>
The "userInput" variable can be used to validate the StartPosition and EndPosition parameters in the GetPositionToUse procedure as demonstrated above.
23. The EndPosition of the steganography section can be greater than the end of the text file.
Pascal solution
Function GetTextFromFile(StartPosition, EndPosition:<B>Integer</B>) : <B>String</B>;
24. If the number of lines in the rail text entered is greater than the number of <B>Character</B>s in plain text then the <B>Encryption</B> doesn't work.
VB.NET Solution
25. Add a parameter to the GetTextFromFile function to replace the hard-coded 'diary.txt" file name. Pass the file name to the function when it is called. Ask the user for the file name when option n is chosen. 
26. Combine the functions UseCaesarCipher, GetTypeOf<B>Character</B> and ApplyShiftToASCIICodeFor<B>Character</B> into one function, that can also apply the cipher to numbers. Furthermore this function should also include any modifications to allow the entry of minus numbers under -26.
'Ash ;-P
Credit to Ashley Tucker
link on gmshaw's site
The file path issue should be able to be corrected by your teacher and they can agree the change with AQA and provide code that will find the file. This happens most years in VB6 and the simple addition of App.path & "\ to the front of the filename solves the problems as long as the file is in the same location as the program - AQA will agree to this change to be made.
Stop program from freezing with N option - by iPhoneK1LLA (Like A Sir on Student Room)
If you run the raw code in Visual Studio, select option n, type 1, enter key, 208, enter key, 9, enter key, the application will crash. The solution to this problem is to view the 'GetTextFromFile' function Function GetTextFromFile(ByVal StartPosition As <B>Integer</B>, ByVal EndPosition As <B>Integer</B>) As <B>String</B>
Run the program again and you'll see that the program now gives you 'MeeT ME at the coLD room'
1. Who put this all into 1 file? I was the first one to put it onto the site and it was all split up into its different subs, then someone changed it into one big chunk of text :( - iPhoneK1LLA
2. This wasn't a problem running under Delphi/Pascal, 
I've just loaded the code and entered n, 1, 208 etc and it printed the meet me in the cold room, 
no crash???
CB
3. iPhoneK1LLA can you absolutely confirm the crash because "N=9 Start=1 End=208" works fine in python 2.5.6
OP
4. I'll upload a video in a second running the raw code for VB.Net - iPhoneK1LLA
5. It's not really a crash - it just can't find the file. Either alter the file path as has been suggested or place the diary.txt file into the debug/bin folder and it will work fine. There have been 'problems' like this in previous years.
NK
6. In relation to above, the program only crashes if the file is not present, or the file contains no text, which isn't a problem for the exam, but if you would like to make the program more ro<B>Bus</B>t then you need to add validation to check if the file exists and that the file contains more than 0 <B>Character</B>s, such as a Catch and Try statement, or the following:
7. There needs to be solutions for python.
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
The exam is split into 4 sections that must be completed on a computer:
<35 minutes>
Theory Questions based on the material you have covered for Unit 1. For an overview of what this might include see the AQA specification and this wikibook.
<20 minutes>
Programming solutions to short problems, not based on the preliminary material or skeleton code.
<10 minutes>
Theory questions about the preliminary material and skeleton code.
<55 minutes>
Program solutions based around the preliminary code. The guidance below doesn't pretend to offer the actual questions that will be set in the exam, but by doing them you should hopefully get a better grasp of the code and be able to answer any questions thrown at you during the exam.
=Section B Introduction=
This section will ask you questions that you will have to find programming solutions to. The past exams have always provided a strict program specification in the form of variable names and pseudocode. You should be able to interpret pseudocode, structured english, structure charts, stepwise refinement <B>Table</B>s and decision <B>Table</B>s. Any of these techniques could be used to communicate an <B>Algorithm</B> to be coded.
Obviously all the past papers from AQA have good section B questions that you should attempt. Here are some around this year's theme... 
Question 1
Pseudo code
Another question... 
'Another solution
Example Answer
Choice, PlayerName
NoOfCardsTurnedOver
UpdateRecentScores, PlayGame
DisplayCard, DisplayEndOfGameMessage, DisplayCorrectGuessMessage,DisplayRecentScores
VB.Net solution
Modify the function GetPlayerName() as follows:
Function GetPlayerName() As <B>String</B>
End Function
an alternative solution
'mrclement@highcliffe
Python Solution
import <B>String</B>
def GetPlayerName():
PlayerName = GetPlayerName()
print( PlayerName )
def GetPlayerName():
Java solution
/* Dwarph */
Pascal solution
Function GetPlayerName : <B>String</B>;
VB.Net solution
Sub UpdateRecentScores(ByRef RecentScores() As TRecentScore, ByVal Score As <B>Integer</B>)
'Nathan Harries-Wood, Ecclesbourne School
Sub SaveScores(ByVal recentscores() As TRecentScore)
'Dylan Patel
'Highdown 
'Prof Brooks
'Alexander Miles
'Creates a *.txt file which is saved to and read from showing 3 most recent scores
'Put this in the (UpdateRecentScores) Sub, after the line (RecentScores(Count).Score = Name), but before the (End Sub)
Sub DisplayScoresFromFile(ByRef recentscores() As TRecentScore, NoOfGamesPlayed As <B>Integer</B>)
End Sub
'Writing to the file
'Lord Sebastian Morrell
'/*A couple of simple functions "SaveScores" and "LoadScores" with one line modifications to "Main", "UpdateRecentScores" and "ResetRecentScores" using StreamReaders/Writers <B>Method</B>.*/
'/*Don't forget to import the System.IO <B>Library</B>!*/
'Then add this:
SaveScores(RecentScores, CurDir()) '/* Simple function call to save the data */
'to bottom of "UpdateRecentScores" and "ResetRecentScores" and add this:
LoadScores(RecentScores, CurDir)
'above the Do Loop in "Main"
'/*Code Written by Kiran Joshi*/
'/*The Queen Katherine School, Kendal*/
'Code written by George
'Very clean and quick saving and loading of scores
Python Solution
def SaveScores():
def LoadScores():
def SaveScores(RecentScores):
'S Chell'
def getScores(RecentScores):
'This function only loads the scores, the DisplayRecentScores function will then have to be called.
'S Chell
Java solution
public <B>Class</B> Main {
void displayMenu() {
/* Dwarph */
/*Another way to solve this problem is to load the text file into the array
/* Dwarph */
Pascal solution
// Two new procedures to add anywhere
Procedure SaveScores;
Var
Begin
End;
Procedure LoadScores;
Var
Begin
End;
// Add 'LoadScores;' just after 'Randomize;' on the main program.
// Add 'SaveScores;' just after 'Until Choice = 'q';' in the main program.
VB.Net solution
' Enio F <http://eniof.com>
' Chelsea Independent College
' Reusing most of the UpdateRecentScores code (very efficient solution!)
<syntaxhighlight lang="vbnet">
'Max Kramer <http://maxkramer.co>
'University College School, London.
Sub UpdateRecentScores(ByRef RecentScores() As TRecentScore, ByVal Score As <B>Integer</B>)
'Jacob Moss, UCS School
'Penguins
Sub DisplayRecentScores(ByRef RecentScores() As TRecentScore)
'this is an alternative solution which ranks the scores as it reads from the file
Sub GetHighscores(ByRef recentscores() As TRecentScore)
' Peter Chapman, Highdown
' This works with my system of saving scores in the previous section
Sub DisplayHighScores()
'another alternative - this includes the load and save scores subs as well as a basic sort
Sub bubblesort(Byref Array)
Sub UpdateRecentScores(ByRef RecentScores() As TRecentScore, ByVal Score As <B>Integer</B>)
'mrclement@highcliffe
Python Solution
def rankScores(RecentScores):
'S Chell
OR without moving the .Score and .Name separately
def rankScores(RecentScores):
'MrsCMH
def UpdateRecentScores( NewScore ):
Java solution
//add "rankScores(recentScores);"
//to the top of the <B>Method</B> displayRecentScores
/*Dwarph */
Pascal solution
// James Tarpy Longbenton Community College Newcastle upon Tyne
Procedure UpdateRecentScores(Var RecentScores : TRecentScores; Score : <B>Integer</B>);
End;
VB.Net solution
// Also in every instance of 52 or 51 add 13 to increase the deck size to accommodate another suit and add this to the text file:
5
1
5
2
5
3
5
4
5
5
5
6
5
7
5
8
5
9
5
10
5
11
5
12
5
13
Python Solution
def GetSuit(SuitNo):
Java solution
/* add an extra suit to the deck.txt (5 1 5 2 5 3 ect)
 suit= "Swords";
/* Dwarph */
Pascal solution
//Solution
//James Tarpy Longbenton Community College Newcastle upon Tyne
Function GetSuit(SuitNo : <B>Integer</B>) : <B>String</B>;
//You also need to change every hardcoded incidence of 52/51 in the whole program to 
// take account of the fact there are now 65 cards in the pack
// and change the data.txt file by adding 13 extra Sword cards as so
// 515253545556575859510511512513
VB.Net solution
Sub Main()
Function IsNextCardLower(ByVal LastCard As TCard, ByVal NextCard As TCard) As <B>Boolean</B>
Function GetHighOrLowFromUser() As Char
Sub PlayHighOrLow(ByVal Deck() As TCard, ByRef RecentScores() As TRecentScore)
'no you didn't dylan
'oh yes you did
'highdown
Python Solution
'This is an amendment to the PlayGame function rather than a new function
Although a new function called IsNextCardLower() is required. See below
below that is the amended PlayGame() function'
def IsNextCardLower(LastCard, NextCard):
def PlayGame(Deck, RecentScores):
Java solution
/* For this solution I also made ace count as both higher or lower
//this <B>Method</B> checks to see if it is an ace
<B>Boolean</B> isNextCardAce (TCard lastCard, TCard nextCard){
Pascal solution
//Solution
VB.Net solution
Enter this as IsNextCardHigher
Function IsNextCardHigher(ByVal LastCard As TCard, ByVal NextCard As TCard) As <B>Boolean</B>
Dim Higher As <B>Boolean</B> = false
If NextCard.Rank = LastCard.Rank Then
If NextCard.Suit > LastCard.Suit Then
Higher = True
End If
Return Higher
End If
If NextCard.Rank > LastCard.Rank Then
Higher = True
End If
Return Higher
End Function
'Mr Patel
'Highdown
'More efficient version which uses ELSE
Function IsNextCardHigher(ByVal LastCard As TCard, ByVal NextCard As TCard) As <B>Boolean</B>
End Function
—Geoguy180-- 
Python Solution
Please note this solution amends the existing PlayGame function rather than creates a complete new function. It does need a need function called IsNextCardLower(LastCard, NextCard)
def IsNextCardLower(LastCard, NextCard):
'Amended PlayGame Function'
def PlayGame(Deck, RecentScores):
Java solution
/* Dwarph */
Pascal solution
Function IsNextCardHigher(LastCard, NextCard : TCard) : <B>Boolean</B>;
'S Chell
VB.Net solution
'Highdown
Function GetChoiceFromUser() As Char
'Osy
Python Solution
def GetChoiceFromUser():
Java solution
/* You can also use the <B>Method</B> .toLowerCase- see below:*/
/*Dwarph */
/* Another alternative is to use the <B>Character</B>.toLowerCase() <B>Method</B> instead of converting to and from <B>String</B>s */
char getChoiceFromUser() {
/* Dan Foad */
Pascal solution
//Made by AK
//Make sure to use StrUtils
Function GetChoiceFromUser : Char;
VB.Net solution
End Module
'Dan B, Ecclesbourne
Python Solution
def PlayGame(Deck, RecentScores):
Java solution
void playGame(TCard[] deck, TRecentScore[] recentScores) {
/* Dwarph */
Pascal solution
if input = 'q' then
VB.Net Solution
'why write such complex code? the following alternative solution works. if you want to tell the user the constraints of the name <B>String</B> just put it in early in the do loop
'enter any commands relating to the type of <B>String</B> to use as the name here
'EFORD
NOTE: This piece of code has also disallowed an input of 0 <B>Character</B>s for the 'username'. Therefore the username must be between 1 and 10 <B>Character</B>s long.
Jack.Wall
Python Solution
def GetPlayerName(MaximumLengthName):
Note: This also has the fix for Question 1
Java solution
/* Dwarph & Dan Foad */
Pascal solution
//Made by AK
Function GetPlayerName : <B>String</B>;
Second Python solution is a less compute intensive solution than most, and works all way from 1st to last card. Easy to port to other languages
'Note: none of these solutions take into account the fact that the total cards in each rank decreases
VB.Net solution
'Danté G - Loxford
'Edit: Fastest and the most efficient and mathematical way of doing this~
Function probabilityHigher(lastCard As TCard) As <B>Integer</B>
'charlieb
'Edit: This will only work correctly for the first card drawn 
Function probabilityHigher(ByVal lastCard As TCard) As <B>Integer</B>
'Not very efficient, lots of lines of code but it should work for every card
'Ben.B
Python Solution
def SetPercentAge(CurrentDeck, LastCard):
then have to add to the main fuction
def PlayGame(Deck, RecentScores):
Less Compute intensive solution every GetCard does ONE subtract, and MAX of 12 numbers to SUM to get percentage
CardsRank = [ 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 ]
def GetCard( ThisCard, Deck, NoOfCardsTurnedOver ):
def DisplayChance( Card, CardsTurned ) :
def PlayGame( Deck ):
Java solution
//Solution
Pascal solution
//Solution
Procedure ResetDealtCards(var DealtCards:TDealtCards);
//set all elements to 0 before a game is played
Procedure UpdateDealtCards( LastCard:Tcard;
//add 1 to the count of the rank belonging to the last card.
//called after every card is dealt
Function GetProbabilityofHigherCard(LastCard:TCard;
//calculate the probablity of the next card being Higher than the LastCard
//uses the array of DealtCards and the NoOfCardsDealt
VB.Net solution
Sub PlayGame(ByVal Deck() As TCard, ByRef RecentScores() As TRecentScore)
'Charley Baker
Module CardPredict
'mrclement@highcliffe
Python Solution
Java solution
char getChoiceFromUser(int cardSwapsLeft)
void playGame(TCard[] deck, TRecentScore[] recentScores)
/* Tom */
Pascal solution
//Solution
VB.Net solution
'Working on average score, but I have 2 codes for number of games
'This code displays the games played in a session at the "GAME OVER" screen
Sub DisplayEndOfGameMessage(ByVal Score As <B>Integer</B>) 'This can just replace the Sub of the same name
'This code writes & reads from a file, displaying total number of games
Sub DisplayEndOfGameMessage(ByVal Score As <B>Integer</B>)
'You're welcome
'SLAW the LAD
'Ecclesbourne School
Module CardPredict
'mrclement@highcliffe
Python Solution
Games = 0
TotalScore = 0
def DisplayMenu():
def PlayGame(Deck, RecentScores):
def DisplayStats( )
if __name__ == '__main__':
Java solution
/* I added the <B>Method</B>s numberOfGames and averageScore to the gameOver condition in the playGame <B>Method</B>
Remember to put it AFTER the score is updated!!!!
Dwarph */
Pascal solution
//Solution
VB.Net solution
"Taken from Sub PlayGame(ByVal Deck() As TCard, ByRef RecentScores() As TRecentScore)
Dim lives As <B>Integer</B> = 2 
If Higher And Choice = "y" Or Not Higher And Choice = "n" Then
'Osy
Python Solution
Java solution
void playGame(TCard[] deck, TRecentScore[] recentScores) {
/* Dwarph+ Mr X */
Pascal solution
//James Tarpy Longbenton Community College Newcastle upon Tyne
//solution requires changes to one Function and one Procedure
Function GetChoiceFromUser (var gameover : <B>Integer</B>) : Char;
Procedure PlayGame(Deck : TDeck; Var RecentScores : TRecentScores);
As each card is thrown away and moved up the deck this requires changing the deck handling to include a pointer. Is this 
Likely? 
This does not appear to be needed. You can just replay with Deck as the contents of that are not lost. There is no need for a copy of the Deck to play again. 
No it doesn't. As the person who produced the Pascal solution has shown - just take a copy of the shuffled deck before you start playing. You can play this copy again and again.
GetCard effectively pops card from deck and fills in a blank on bottom so destroys the deck while playing Python version available as well
VB.Net solution
' add this code to sub Main()
Dim ShuffledDeck(52) As TCard
' dont forget to add a line into sub DisplayMenu as well
' Mr Roberts YDT
Python Solution
import copy
Deck = []
OldDeck = []
<B>Class</B> TCard( ):
<B>Class</B> TRecentScore( ):
def DisplayMenu():
if __name__ == '__main__':
Java solution
public Main() {
/* displayMenu() function */
void displayMenu() {
/* shuffleDeck() function */
void shuffleDeck(TCard[] deck) {
/* Create a new <B>Method</B> called playLastGame */
void playLastGame(TCard[] deck) { // <B>Method</B> takes the deck array as parameter
/* Dan Foad */
Pascal solution
//Solution
VB.Net solution
Sub Bookies()
Function Initializer()
Function UpdateFunds(ByRef Funds As <B>Integer</B>, ByVal Name As <B>String</B>, ByVal Score As <B>Integer</B>, ByVal Bet As <B>Integer</B>)
'Change PlayGame to a function and change it to return NoOfCardsTurnedOver
Python Solution
Java solution
//Solution
Pascal solution
//Solution
VB.Net solution
'NLS
'Alternate Idea could be to just alter the value in the IsNextCardHigher Function the cards are passed by value anyway
'RS
Python Solution
GetRank = [ ", 'Ace', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King' ]
GetSuit = [ ", 'Clubs', 'Diamonds', 'Hearts', 'Spades' ]
def DisplayCard(ThisCard):
Java solution
//////////////////// FIXED SECTION ////////
///////////////////////////////////////////
Pascal solution
//Made by AK
Function GetRank(RankNo : <B>Integer</B>) : <B>String</B>;
VB.Net solution
'DATE: 26/05/2014
'AUTHOR: Kiran Joshi, The Queen Katherine School, Kendal
'NOTES:
'Firstly I think its less likely that this will come up due to the extensive modifications to the program as a whole and the structure of the "PlayGame" Subroutine but don't hold me to it.
'When you are mid game and want to quit you are able to quit the game by using char "q". Data for the game is stored in a text file called "SavedGame.txt" in the program directory.
'You can load a game by selecting "Option 5" at the menu.
'Anyways I have written two very simple routines "SaveGame" and "LoadSavedGame" and modified "PlayGame" , "GetChoiceFromUser", "DisplayMenu" and "Main"
'Im sure there must be a easier way of doing this.
'OVERVIEW:
'+ SaveGame & LoadSavedGame have been added as SubRoutines
'+ Load(bool) has been added as a parameter to PlayGame SubRoutine
'+ Main and DisplayMenu have been edited to include options to LoadSaveGame
'+ GetChoiceFromUser has been modified to give the option to quit and save
'+ PlayGame now allows you to quit game midway and automatically save by calling function SaveGame.
'STRUCTURE OF SAVE FILE
'104 Lines have been used to store Deck Data. 52 Suits and 52 Ranks = 104.
'6 Lines to store RecentScores(using the constant global var that AQA provided)
'2 Lines to store NextCard
'2 Lines to store LastCard
'1 Line to store Number of turned cards
'CODE:
'SaveGame SubRoutine
Sub SaveGame(ByVal Deck() As TCard, ByVal RecentScores() As TRecentScore, ByVal NextCard As TCard, ByVal LastCard As TCard, ByVal NumberOfCardsTurned As <B>Integer</B>)
'LoadSavedGame SubRoutine
'NOTES:
'As explained in the Pascal Solution (thanks James Tarpy) cards are popped of the deck and removed. As the deck gets smaller all the spaces in the array at the bottom are replaced with 0s.
'For example:
'Ace of Spades, Five of Hearts, Two of Spades, Three of Clubs.
'would be stored as (Suit,Rank):
'4,1 3,5 4,2 1,3
'after popping off the first card you are left with
'4,2 1,3 0,0 0,0
'4,1 gets stored Last Card
'3,5 gets stored Next Card
'Cards move down etc
'3,5 moved to Last Card
'======================================MODIFIED CODE=====================================================
PlayGame SubRoutine:
Sub PlayGame(ByVal Deck() As TCard, ByRef RecentScores() As TRecentScore, ByVal LoadGame As <B>Boolean</B>)
'GetChoiceFromUser SubRoutine:
Function GetChoiceFromUser() As Char
'Main Subroutine(TAKE NOTE OF PARAMETER CHANGES!):
'DisplayMenu Subroutine:
Console.WriteLine("5. Play game (Load saved game)") 'ADD THIS INTO DISPLAYMENU SUBROUTINE IN A LOGICAL POSITION
'Code written by Kiran Joshi
'The Queen Katherine School, Kendal
Python Solution
Java solution
//Solution
Pascal solution
//Solution
//James Tarpy Longbenton Community College Newcastle upon Tyne
//The two score save/load procedures can go anywhere amongst your Procedure declarations
//The savegame and loadsavedeck procedures can go anywhere amongst your procedure declarations
//DisplayCorrectGuess Message has been modified to ask the user “Do you want to save?” which then calls savegame
//PlayGame has been modified to make sure that recent scores are saved to file even if they lose
//A new case option has been added to the menu of choices in the main program - '5' load saved game - to call the loadsavegame procedures
//players can now load a game they saved either during the current game, or from a previous session
procedure Savescores;
Var
Begin
End; 
procedure loadscores(var recentscore :TRecentScores);
Var
Begin
procedure savegame(var Deck : TDeck);
Var
//the Deck is held in a array of 52 <B>Record</B>s, each <B>Record</B> holds a card's Suit and Rank
//as the game progresses cards are removed from the top of the deck, all cards are moved up one place, and 0,0 cards are fed into the bottom place.
//this procedure loads the content of save.txt into the Deck
//it counts the number of cards that are Rank 0. This equals thew number of cards turned over
//simple!
procedure loadsaveddeck (var deck :Tdeck; var numberofcardsturnedover:<B>Integer</B>);
Procedure DisplayCorrectGuessMessage(Score : <B>Integer</B>; deck : Tdeck);
Procedure PlayGame(Deck : TDeck; Var RecentScores : TRecentScores; numberofcardsturnedover : <B>Integer</B>);
// LastCard and so on... 
//...most of this is now the same as in original program apart from last few lines starting ...
If GameOver
End;
//################ this is the new main program
Begin
End.
Basically change IsNextCardHigher to become IsNextCardHigherOrEqual
VB.Net solution
Function IsNextCardHigher(ByVal LastCard As TCard, ByVal NextCard As TCard) As <B>Boolean</B>
Python Solution
def IsNextCardHigher(LastCard, NextCard):
Java solution
void playGame(TCard[] deck, TRecentScore[] recentScores) {
/* Create new wasDraw <B>Method</B> */
void wasDraw(int score) {
/* Dan Foad */
Pascal solution
//Solution
VB.Net solution
Python Solution
Java solution
//Solution
Pascal solution
//Solution
VB.Net solution
Python Solution
Java solution
//Solution
Pascal solution
//Solution
VB.NET
'Skeleton Program code for the AQA COMP1 Summer 2014 examination
'this code should be used in conjunction with the Preliminary Material
'written by the AQA COMP1 Programmer Team
'developed in the Visual Studio 2008 (Console Mode) programming environment (VB.NET)
Module CardPredict
End Module
Java
/**
import java.util.Random;
public <B>Class</B> Main {
Python
import random
NO_OF_RECENT_SCORES = 3
<B>Class</B> TCard():
<B>Class</B> TRecentScore():
Deck = [None]
RecentScores = [None]
Choice = "
def GetRank(RankNo):
def GetSuit(SuitNo):
def DisplayMenu():
def GetMenuChoice():
def LoadDeck(Deck):
def ShuffleDeck(Deck):
def DisplayCard(ThisCard):
def GetCard(ThisCard, Deck, NoOfCardsTurnedOver):
def IsNextCardHigher(LastCard, NextCard):
def GetPlayerName():
def GetChoiceFromUser():
def DisplayEndOfGameMessage(Score):
def DisplayCorrectGuessMessage(Score):
def ResetRecentScores(RecentScores):
def DisplayRecentScores(RecentScores):
def UpdateRecentScores(RecentScores, Score):
def PlayGame(Deck, RecentScores):
if __name__ == '__main__':
Pascal
Program CardPredict;
this code should be used in conjunction with the Preliminary Material
written by the AQA COMP1 Programmer Team
Const NoOfRecentScores = 3;
Type
Var
Function GetRank(RankNo : <B>Integer</B>) : <B>String</B>;
Function GetSuit(SuitNo : <B>Integer</B>) : <B>String</B>;
Procedure DisplayMenu;
Function GetMenuChoice : Char;
Procedure LoadDeck(Var Deck : TDeck);
Procedure ShuffleDeck(Var Deck : TDeck);
Procedure DisplayCard(ThisCard : TCard);
Procedure GetCard(Var ThisCard : TCard; Var Deck : TDeck; NoOfCardsTurnedOver : <B>Integer</B>);
Function IsNextCardHigher(LastCard, NextCard : TCard) : <B>Boolean</B>;
Function GetPlayerName : <B>String</B>;
Function GetChoiceFromUser : Char;
Procedure DisplayEndOfGameMessage(Score : <B>Integer</B>);
Procedure DisplayCorrectGuessMessage(Score : <B>Integer</B>);
Procedure ResetRecentScores(Var RecentScores : TRecentScores);
Procedure DisplayRecentScores(RecentScores : TRecentScores);
Procedure UpdateRecentScores(Var RecentScores : TRecentScores; Score : <B>Integer</B>);
Procedure PlayGame(Deck : TDeck; Var RecentScores : TRecentScores);
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
The exam is split into 4 sections that must be completed on a computer:
<35 minutes>
Theory Questions based on the material you have covered for Unit 1. For an overview of what this might include see the AQA specification and this wikibook.
<15 minutes>
Programming solutions to short problems, not based on the preliminary material or skeleton code.
<10 minutes>
Theory questions about the preliminary material and skeleton code.
<60 minutes>
Program solutions based around the preliminary code. The guidance below doesn't pretend to offer the actual questions that will be set in the exam, but by doing them you should hopefully get a better grasp of the code and be able to answer any questions thrown at you during the exam.
Example Answer
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char) As <B>Boolean</B>
If Asc(SampleGame) >= 97 And Asc(SampleGame) <= 122 Then
SampleGame = Chr(Asc(SampleGame) - 32)
End If
This converts lowercase to uppercase by using ASCII values.
I just wanted to say good luck to all on results day after that nightmare of a paper! And good luck to any future years who attempt this in <B>Class</B>, you'll need it!
It isn't an extremely bad paper, the FEN question (if someone wants to make a solution) just needed you to do something similar to the display board function, and then express blanks as numbers (I admit, I didn't have time to do that!)
Currently when the sample game is set up, all of the pieces are positioned in certain places. Edit the program to give the user an option to create their own sample game.
Python Solution
def InitialiseBoard(Board, SampleGame):
VB.NET solution
When asking for the coordinates for the startPosition, give an option for the user to exit game.
VB.Net Solution
'Jonathan Middlemass, Beckfoot School
'Highlighted by Edd Norton, Ashville College 
Sub GetMove(ByRef StartSquare As <B>Integer</B>, ByRef FinishSquare As <B>Integer</B>)
End Sub
Java Solution
void getMove(Position startPosition, Position finishPosition) {
Pascal Solution
Procedure GetMove(Var StartSquare, FinishSquare : <B>Integer</B>);
Begin
End;
Python Solution 
def GetTypeOfGame():### CHANGE
def GetMove(StartSquare, FinishSquare):###Quit before move played 
if __name__ == "__main__":
Add skill trees to the game so that pieces can learn new abilities and skills upon capturing enemy pieces. For students seeking a challenge at some advanced programming.
VB.Net solution
'By Charlie Letts - 12/Co1 Riddlesdown Collegiate
Sub Main()
Python Solution
Java Solution
Pascal Solution
C# Solution
VB6.0 Solution
When you start capture the Sarrum you are asked: "Do you want to play the sample game (enter Y for Yes)? ", Add an option that would allow you to say No to start a new game and then an option to close the program.
VB.Net solution
Sub InitialiseBoard(ByRef Board(,) As <B>String</B>, ByVal SampleGame As Char)
End Sub
OR
Sub InitialiseBoard(ByRef Board(,) As <B>String</B>, ByVal SampleGame As Char)
Python Solution
def InitialiseBoard(Board, SampleGame):
if __name__ == "__main__":
Java Solution
Pascal Solution
Writeln('Do you want to play the sample game?');
Write('Enter Y for Yes, n to quit the program without playing, or enter anything else to play a new game. ');
If SampleGame= 'n' then Exit;
// LouisdM
C# Solution
public static char GetTypeOfGame()
VB6.0 Solution
Currently when the board is initialised, all of the pieces are positioned in the same place. Edit the program to give the user an option to randomly place the pieces onto the board.
VB.Net solution
Sub Main()
Console.Write("Do you want to play the sample game (enter Y for Yes, or R to randomly place pieces on the board)?") 'adding new option to menu
End sub
Sub InitialiseBoard(ByRef Board(,) As <B>String</B>, ByVal SampleGame As Char)
End Sub
VB.Net solution
ElseIf SampleGame = "R" Then
Python Solution
import random #Allows the program to use the random module when selecting an <B>Integer</B>.
def InitialiseBoard(Board, SampleGame):
Java Solution
public Main() {
void initialiseBoard(<B>String</B>[][] board, char selectedGame) {
Pascal Solution
C# Solution
VB6.0 Solution
Add a rule that Marzaz Pani (royal attendant) pieces can be promoted to a Kashshaptu (witch) piece if it reaches the front rank (the eighth rank for a white redum, the first rank for a black redum).
This would involve adding the Kashshaptu (witch) piece - which could have the same movement as a queen in chess.
VB.Net solution
Function CheckKashshaptuMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
End Function
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char) As <B>Boolean</B>
End Function
Sub MakeMove(ByRef Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char)
End Sub
Python Solution 
def CheckKashshaptuMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
Java Solution
void makeMove(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn) {
void makeMove(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn) {
Pascal Solution
copied from the function CheckGisgigirMoveIsLegal and modified slightly by 
just changing some variable names, to move diagonally check the code before the last End ***
By Arif Elahi
C# Solution
public static <B>Boolean</B> CheckKashshaptuMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile)
public static <B>Boolean</B> CheckMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile, char WhoseTurn)
public static void MakeMove(ref <B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile, char WhoseTurn)
//UTC Reading
VB6.0 Solution
Add a rule to CheckMoveIsLegal that means all pieces can only move forward and can not retreat
VB.Net solution
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char) As <B>Boolean</B>
End Function
Python Solution
def CheckMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn):
def CheckMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn):
 
Java Solution
<B>Boolean</B> checkMoveIsLegal(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn) {
//Ainsley Rutterford.
Pascal Solution
If WhoseTurn = 'W'
By Eddie V
C# Solution
// Answer once again coming from the fabulous institution that is UTC Reading ヽ༼ຈل͜ຈ༽ﾉ Raise Your Dangersヽ༼ຈل͜ຈ༽ﾉ 
VB6.0 Solution
Add a new piece that behaves like a knight in chess - see here for details
VB.Net solution
'Stan - Ecclesbourne, A Level
Python Solution
def CheckKnightMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
def CheckKnightMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
def CheckKnightMoveIsLegal(Board, StartSquare, FinishSquare):
Java Solution
<B>Boolean</B> checkKnightMoveIsLegal(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile){
Remember to add case 'K' to <B>Switch</B> statement in checkMoveIsLegal <B>Method</B> and make the board bigger
Amy Rainbow + Rajan , HGS
Pascal Solution
JACK SWEASEY OF STEYNING GRAMMAR
To make a knight like piece all you have to do is edit the Etlu code like such:
Function CheckEtluMoveIsLegal(Var Board : TBoard; StartRank, StartFile, FinishRank, FinishFile : <B>Integer</B>) : <B>Boolean</B>;
If you do not notice the change, you change the 0 in (Abs(FinishRank - StartRank) = 1) and (Abs(FinishFile - StartFile) = 1) to a 1 which I have already done. It's pretty ez pz.
C# Solution Jamal Arif of Nelson and Colne College
//Create the following subroutine:
public static <B>Boolean</B> CheckKnightMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile)
// Then in the CheckMoveIsLegal subroutine, add another case statement like this :
// Finally, in the InitialiseBoard subroutine add the following in the else statement right at the end:
//This actually puts the piece on the board.
VB6.0 Solution
Allow a Sarrum (king) and Gisgigir (chariot) to castle (as in chess with a king and rook).
See here for details on castling in chess
VB.Net solution
Function CheckSarrumMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
Sub MakeMove(ByRef Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char)
Python Solution
Java Solution
void makeMove(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn) {
^_^ Reading School
Pascal Solution
Not full castling but hard enough. Checks to make sure Gisgigir and Sarrum in starting position and nothing between
Function CheckSarrumMoveIsLegal(Var Board : TBoard; StartRank, StartFile, FinishRank, FinishFile : <B>Integer</B>; WhoseTurn:Char) : <B>Boolean</B>;
Gill Meek
FULL SOLUTION WITH PROPER CASTLING BY JACK SWEASEY FROM STEYNING GRAMMAR
Extra Global Variables:
Custom procedures follow:
Edited main code with edits commented:
C# Solution
VB6.0 Solution
Add variables to keep track of how many moves each player has had. Add an option to limit a game to 10, 20, or 50 moves - with who ever has the most pieces left after said moves declared the winner.
VB.Net solution
Sub Main()
End Sub
' (Viktor I - Highcliffe Sixth)
VB.Net solution alternative
' this solution doesnt count the moves of each individual player, but of both of the players,
' from NewVIc Sixth form college
Python Solution
if __name__ == "__main__":
if __name__ == "__main__":
Java Solution
Pascal Solution
SET TWO GLOBAL VARIABLES 'BMOVES' AND 'WMOVES' AS '<B>Integer</B>'
SET THEIR INITIAL VALUE TO 0
AFTER A MOVE IS MADE:
MakeMove(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn);
INSIDE THE 'DISPLAYWINNER' PROCEDURE:
If WhoseTurn = 'W'
C# Solution
//Create the variables above static main void
public static <B>Boolean</B> CheckMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile, char WhoseTurn)
//Output it here
public static void DisplayWhoseTurnItIs(char WhoseTurn)
//UTC Reading
VB6.0 Solution
This is not a short game, so allow a player to save the game by saving the board array and which play goes first.
VB.Net solution
Imports System.Text 'Make sure you add this at the top! ~ Edd Norton, Ashville College
'Also, Make sure to add a call function somewhere in the GetMove subroutine
' ****"Didn't really understand that so I made my own. Also I used what is taught in the 'Nelson Thornes' textbook." ****
' *Note: Change the FileName text to the file you want to save it to (eg. C:\Users\Owner\Desktop\John\test.txt) which is mine. *
Imports System.IO ' Add this at the very top, where you'll find Import System.Math
Sub Main()
Sub SaveGame(ByVal Board(,) As <B>String</B>, ByVal WhoseTurn As Char)
Python Solution
<!-- the <B>Method</B> to save using csv file has been added at the bottom-->
import json #Imports json to the program.
def SaveGame(Board, WhoseTurn):
def LoadBoard():
def LoadTurn():
if __name__ == "__main__":
Here is how to do it using csv, this is done using procedure called SaveBoard() and LoadBoard()
def SaveBoard(Board):
def LoadBoard(Board):
by Dulan
-------------------- Another way of saving to csv file----------------------
def SaveGame(Board):
def LoadGame(Board):
Aidan.D
Java Solution
// save game
do {
//this goes around line 110
//load game
void initialiseBoard(<B>String</B>[][] board, char sampleGame, char whoseTurn) {
// to load whoseTurn
initialiseBoard(board, sampleGame, whoseTurn); 
//this goes around line 102
//Alternative Solution for save game:
Pascal Solution
//You need to put the Save board procedure after the make move procedure
//Also make sure to call the procedure 'LoadBoard' in the main program after 'InitialiseBoard(Board, SampleGame);' piece of code.
//I updated it because it wasn't loading the last column. It now runs through the whole array and includes column 8.
//Additionally, Why have 2 text files one for load and one for save? Just make it save the previous game into 1 text file! Also added/fixed (as it was saving into SBoard and the load procedure was loading Lboard...)
//Lastly, it will crash if nothing is in the text file, so before testing the loading out, make sure you play the game once and have saved it (so something is in the text file)- Then try and load it!
//updated and fixed 
C# Solution
public void LoadGame(ref <B>String</B>[,] Board, ref char whosTurn)
OR alternative answer 
using System.IO; // add this at the top
VB6.0 Solution
<syntaxhighlight lang="vb">
There are 2 coordinates to enter. If the first is entered incorrectly, you can still enter the second and then it crashes. Fix this.
VB.Net solution
Sub GetMove(ByRef StartSquare As <B>Integer</B>, ByRef FinishSquare As <B>Integer</B>, ByVal Board As Array, ByVal WhoseTurn As Char)
'This solution assumes that an <B>Integer</B> is being entered, if a non-<B>Integer</B> is entered it will still crash due to
'A first chance exception of type "System.InvalidCastException"
End Sub
'**********************************************************Another solution is shown below****************************************************************
'A new function is created to validate the inputs 
Function Validate(ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
End Function
' This Function Validate is called in the SubMain()
Sub Main()
If Validate(StartRank, StartFile, FinishRank, FinishFile) Then
End Sub
'End of solution
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char) As <B>Boolean</B>
Python Solution
def GetMove(StartSquare, FinishSquare):
Java Solution
//Place in checkIfMoveIsLegal function
Nonso Makwe
__________________________________________________________________________________________________________________________
<B>Boolean</B> checkMoveIsLegal(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn) {
'Sanyan Rahman - SJC College
Pascal Solution
OR
Function CheckMoveIsLegal(Var Board : TBoard; StartRank, StartFile, FinishRank, FinishFile : <B>Integer</B>;
</big> then
or can use this code which will check to make sure something entered, that it is a number, and that both digits in the number are valid
C# Solution
OR can change getMove
public static void GetMove(ref int StartSquare, ref int FinishSquare)
VB6.0 Solution
thunderthighs
Add the Kashshaptu to the game, the Kashshaptu can move in any direction, any number of spaces, but cannot jump. Replace the Marzaz Pani with this piece.
VB.Net solution
'code courtesy of John Chamberlain 
Function CheckKashshaptuMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
End Function
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char) As <B>Boolean</B>
End Function
Sub InitialiseBoard(ByRef Board(,) As <B>String</B>, ByVal SampleGame As Char)
End Sub
Python Solution
def CheckKashaptuMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
def CheckMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn):
def InitialiseBoard(Board, SampleGame):
Java Solution
Alex Drogemuller, Reading School - thanks to Ed "keen" Smart for the help
Amy Rainbow, HGS
Essentially this was copied from the Nabu solution and then reused
to allow vertical and horizontal movement so credit goes to Zephyr 12
whoever they are.
Chris Drogemuller - Reading School 
Pascal Solution
Subroutines Created/Changed/Removed:
•CheckKashshaptuMoveIsLegal (Added)
•CheckMarzazPaniMoveIsLegal (Removed)
•CheckMoveIsLegal (Changed)
•InitialiseBoard (Changed)
•Main Code (Changed)
Code (Only Changed Subroutines and Main Program):
//CHECKS IF THE KASHSHAPTU MOVE IS LEGAL
C# Solution
//George Boulton HGS Sixth Form
public static <B>Boolean</B> CheckKashshaptuMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile)
VB6.0 Solution
An option will appear after or before a move is made so that the user can choose to see the number of pieces he or she has left on the board.
VB.Net solution
Sub Main()
End Sub
Python Solution
def PiecesLeft(Board):
if __name__ == "__main__":
Java Solution
//Nonso Makwe
Pascal Solution
C# Solution
VB6.0 Solution
Separate taken pieces counter for White and Black
VB.Net solution
Sub Main()
End Sub
Sub MakeMove(ByRef Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char, ByRef WhiteScore As <B>Integer</B>, ByRef BlackScore As <B>Integer</B>)
End Sub
Python Solution
def PiecesTaken(Board):
Java Solution
//The console.println goes under makemove near line 90.
Pascal Solution
Procedure TakenPieces (var Board: TBoard);
C# Solution
VB6.0 Solution
Currently, you can move pieces into the 0 files or ranks.
VB.Net solution
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>,
End Function
Python Solution
def CheckMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn):
Java Solution
Alex Drogemuller
 come on guys... its like just one if statement and adding parameters...
<B>Boolean</B> checkMoveIsLegal(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn, Position finishPosition) {
Bob Singh
Pascal Solution
Function CheckMoveIsLegal(Var Board : TBoard; StartRank, StartFile, FinishRank, FinishFile : <B>Integer</B>;
or can use this when getting coordinates in the first place.
C# Solution
public static <B>Boolean</B> CheckMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile, char WhoseTurn)
VB6.0 Solution
A-level Computing/AQA/Problem Solving, Programming, Data Representation and Practical Exercise/Skeleton code/2015 Exam/Section D
Pawns in chess are allowed a "double" move, however only out of their starting position.
VB.Net solution
'code courtesy of John Chamberlain
Function CheckRedumMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal ColourOfPiece As Char) As <B>Boolean</B>
Python Solution
def CheckRedumMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, ColourOfPiece):
Java Solution
<B>Boolean</B> checkRedumMoveIsLegal(<B>String</B>[][] board, int startRank,int startFile, int finishRank, int finishFile, char colourOfPiece) {
Mikhail Z Hussain - Reading school
Pascal Solution
Function CheckRedumMoveIsLegal(Var Board : TBoard; StartRank, StartFile, FinishRank, FinishFile : <B>Integer</B>;
C# Solution
VB6.0 Solution
The initial program does not allow a player to move their enemy's pieces but only prints the normal "please try again" message. This prints a specialised message if you try to move a piece which does not belong to you.
VB.Net solution
Python Solution
def CheckMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn):
Patch file: not-your-piece.patch
Java Solution
//
Pascal Solution
C# Solution
VB6.0 Solution
Make the Nabu like a bishop in chess, can move any number of tiles diagonally.
VB.Net solution
Function CheckNabuMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
End Function
'Uploaded by an AS Student
Python Solution
def CheckNabuMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
A easier solution
def CheckNabuMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
Java Solution
Bob Singh
/*The above solution does not take into 
//Zephyr 12
Pascal Solution
//#Daz
C# Solution
//I'm sure this isn't the best way to do it, but it works.
public static <B>Boolean</B> CheckNabuMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile, char WhoseTurn)
//Tom Short - UTC Reading
VB6.0 Solution
Add an option to forfeit each turn (similar to the way you can knock over your king in chess).
VB.Net solution
Sub Main()
End Sub
Sub GetMove(ByRef StartSquare As <B>Integer</B>, ByRef FinishSquare As <B>Integer</B>)
End Sub
Python Solution
Edited regions will have comments by them.
if __name__ == "__main__":
Java Solution
This code also includes another 2 possible questions which were 1.11 and 1.15. You would also need to add the argument near line 75
Pascal Solution
//call to a new function within main program. If it returns true then game is over
//new function
C# Solution
VB6.0 Solution
Currently the program does not use GetTypeOfGame when asking the user whether they want to play a sample game or not. Make the program use GetTypeOfGame to ask the user whether they want to play a sample game or not.
VB.Net solution
Python Solution
def GetTypeOfGame():
if __name__ == "__main__":
Java Solution
Pascal Solution
Begin
C# Solution
public static char GetTypeOfGame(char SampleGame)
// Answer kindly provided by UTC Reading #ShamelessPluggingAsRequestedByDan info@futureconnections.org.uk for more info
VB6.0 Solution
The size of the two dimensional array that holds the board is defined by the constant BoardDimension. Change the size of the board to be bigger (for example: 10 by 10)
VB.Net solution
' Note: I changed the size of the board to 9, kept the No. of ranks to 8 and added the Kaskshaptu piece to the 6th File.
Module CaptureTheSarrum
Sub DisplayBoard(ByVal Board(,) As <B>String</B>)
Sub InitialiseBoard(ByRef Board(,) As <B>String</B>, ByVal SampleGame As Char)
' If you want to include the Kashshaptu:
' Edit the general move checker:
Function CheckMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B> '...
' Add a Kashshaptu move checker: (Mine just lets the witch move wherever it wishes to go...kinda spooky huh?) edit this will let you immediately take the other players sarrum so fix it plz u newb
Function CheckKashshaptuMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
Python Solution
BOARDDIMENSION = 9
def DisplayBoard(Board):
def InitialiseBoard(Board, SampleGame):
Java Solution
^_^ Reading School
Pascal Solution
C# Solution
Create two new constants:
Change all the references from BoardDimension to the appropriate new constant, there are 8 in total in the following <B>Method</B>s:
Lastly, you need to add to the underscores in DisplayBoard and add the new rank and file numbers.
//UTC Reading
VB6.0 Solution
Give players a score based on how many pieces they have taken. Additionally give each piece taken its own unique score. Display the score on the players move and display both scores at the end of the game.
VB.Net solution
Sub ScoreCount(ByRef Board(,) As <B>String</B>, ByRef WhoseTurn As Char)
[By TheHarshKnight aka ThunderThighs x]
Python Solution
def MakeMove(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn, WhitePoints, BlackPoints):
Java Solution
//make move edit
int makeMove(<B>String</B>[][] board, int startRank, int startFile, int finishRank, int finishFile, char whoseTurn) {
//main edit
// ^_^ Reading School
Pascal Solution
//WhiteScore and BlackScore are both global <B>Integer</B>s.
Procedure ScoreCount(Board:TBoard;WhoseTurn:Char;FinishRank,FinishFile:<B>Integer</B>); //called in main program after a legal move is entered.
Procedure DisplayWhoseTurnItIs(WhoseTurn : Char);
Procedure DisplayWinner(WhoseTurn : Char);
C# Solution
VB6.0 Solution
"En passant" "is a special pawn capture, that can only occur immediately after a pawn moves two ranks forward from its starting position, and an enemy pawn could have captured it had the pawn moved only one square forward". The program code could be adapted to allow Redums to use such a move.
VB.Net solution
Python Solution
Java Solution
Pascal Solution
// enPassant is a global variable (<B>Integer</B>)
C# Solution
//Leviathan
static void Main(<B>String</B>[] args)
//Seems long winded. Included the entire subroutine to show which ones were changed. 
<B>String</B>[,] Board = new <B>String</B>[BoardDimension + 1, BoardDimension + 1];
<B>Boolean</B> GameOver;
int StartSquare = 0;
int FinishSquare = 0;
int StartRank = 0;
int StartFile = 0;
int FinishRank = 0;
int FinishFile = 0;
int LastMoveRank = 0;//
int LastMoveFile = 0;//here i have two variables to save the last move
<B>Boolean</B> MoveIsLegal;
char PlayAgain;
char SampleGame;
char WhoseTurn;
PlayAgain = 'Y';
do
WhoseTurn = 'W';
GameOver = false;
Console.Write("Do you want to play the sample game (enter Y for Yes)? ");
SampleGame = char.Parse(Console.ReadLine());
if ((int)SampleGame >= 97 && (int)SampleGame <= 122)
SampleGame = (char)((int)SampleGame - 32);
InitialiseBoard(ref Board, SampleGame);
do
DisplayBoard(Board);
DisplayWhoseTurnItIs(WhoseTurn);
MoveIsLegal = false;
do
GetMove(ref StartSquare, ref FinishSquare);
StartRank = StartSquare % 10;
StartFile = StartSquare / 10;
FinishRank = FinishSquare % 10;
FinishFile = FinishSquare / 10;
MoveIsLegal = CheckMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn, LastMoveFile, LastMoveRank);//Sends LM Variables (Last Move) into MoveIsLegal
if (!MoveIsLegal)
Console.WriteLine("That is not a legal move - please try again");
} while (!MoveIsLegal);
GameOver = CheckIfGameWillBeWon(Board, FinishRank, FinishFile);
MakeMove(ref Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn);
if (GameOver)
DisplayWinner(WhoseTurn);
if (WhoseTurn == 'W')
WhoseTurn = 'B';
else
WhoseTurn = 'W';
LastMoveFile = FinishFile;//
LastMoveRank = FinishRank;//this sets the variables and puts them on the board using WriteLine. WriteLine is not needed, i just use it as a check
Console.WriteLine(LastMoveFile);//
Console.WriteLine(LastMoveRank);//
} while (!GameOver);
Console.Write("Do you want to play again (enter Y for Yes)? ");
PlayAgain = char.Parse(Console.ReadLine());
if ((int)PlayAgain > 97 && (int)PlayAgain <= 122)
PlayAgain = (char)((int)PlayAgain - 32);
} while (PlayAgain == 'Y');
public static <B>Boolean</B> CheckRedumMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile, char ColourOfPiece, int LastMoveFile, int LastMoveRank)//Here
<B>Boolean</B> RedumMoveIsLegal = false;
if (ColourOfPiece == 'W')
if ((FinishFile == LastMoveFile)&&(FinishRank == LastMoveRank))
RedumMoveIsLegal = true;
else if ((FinishFile == LastMoveFile) && (FinishRank == LastMoveRank))
RedumMoveIsLegal = true;//Here is the white check
if (FinishRank == StartRank - 1)
if ((FinishFile == StartFile) && (Board[FinishRank, FinishFile] == " "))
RedumMoveIsLegal = true;
else
if ((Math.Abs(FinishFile - StartFile) == 1) && (Board[FinishRank, FinishFile][0] == 'B'))
RedumMoveIsLegal = true; 
else
if ((FinishFile == LastMoveFile) && (FinishRank == LastMoveRank))
RedumMoveIsLegal = true;
else if ((FinishFile == LastMoveFile) && (FinishRank == LastMoveRank))
RedumMoveIsLegal = true;//Here is the Black check
if (FinishRank == StartRank + 1)
if ((FinishFile == StartFile) && (Board[FinishRank, FinishFile] == " "))
RedumMoveIsLegal = true;
else
if ((Math.Abs(FinishFile - StartFile) == 1) && (Board[FinishRank, FinishFile][0] == 'W'))
RedumMoveIsLegal = true;
return RedumMoveIsLegal;
char PieceType;
char PieceColour;
<B>Boolean</B> MoveIsLegal = true;
if ((FinishFile == StartFile) && (FinishRank == StartRank))
MoveIsLegal = false;
PieceType = Board[StartRank, StartFile][1];
PieceColour = Board[StartRank, StartFile][0];
if (WhoseTurn == 'W')
if (PieceColour != 'W')
MoveIsLegal = false;
if (Board[FinishRank, FinishFile][0] == 'W')
MoveIsLegal = false;
else
if (PieceColour != 'B')
MoveIsLegal = false;
if (Board[FinishRank, FinishFile][0] == 'B')
MoveIsLegal = false;
if (MoveIsLegal)
<B>Switch</B> (PieceType)
case 'R':
MoveIsLegal = CheckRedumMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile, PieceColour, LastMoveFile, LastMoveRank);//Here
break;
case 'S':
MoveIsLegal = CheckSarrumMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile);
break;
case 'M':
MoveIsLegal = CheckMarzazPaniMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile);
break;
case 'G':
MoveIsLegal = CheckGisgigirMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile);
break;
case 'N':
MoveIsLegal = CheckNabuMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile);
break;
case 'E':
MoveIsLegal = CheckEtluMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile);
break;
default:
MoveIsLegal = false;
break;
return MoveIsLegal;
VB6.0 Solution
Currently, when the user is able to choose the type of game they are able to enter multiple <B>Character</B>s, this should be limited to one <B>Character</B> excluding numbers
VB.Net solution
'This problem does not apply for VB.Net: The SampleGame variable is already assigned as a charater
Python Solution
def GetTypeOfGame():
or
def GetTypeOfGame():
if __name__ == "__main__":
Java Solution
console.print("Do you want to play the sample game (enter Y for Yes or N for No )? ");
Pascal Solution
C# Solution
VB6.0 Solution
Possibly save the game after every move and allow them to load a previous state of the board?
VB.Net solution
Python Solution
Java Solution
public Main() {
^_^ Reading_School
Pascal Solution
//Call this procedure after the Whose turn change in the main code otherwise it won't work properly
//Daz u faget
//#420dankmemescantmeltstealbeams
C# Solution
VB6.0 Solution
VB.Net solution
Sub Getmove(ByRef StartSquare As <B>String</B>, ByRef finishSquare As <B>String</B>) ' Edited to stop blank entries
Python Solution
def GetMove(StartSquare, FinishSquare):
if __name__ == "__main__":
Java Solution
By Sheikh Sonjeet Bin Paul + Emdadul + Grandad(who paid for my computer) 
__________________________________________________________________________________________________________________________________________
'Sanyan Rahman - SJC College
Pascal Solution
This covers ensuring input is present for coordinates, that they are numbers and that each digit in the number is valid >0 and <=BoardDimension
C# Solution
public static void GetMove(ref int StartSquare, ref int FinishSquare)
VB6.0 Solution
Currently the board is in Black and white text, This is difficult to read and understand. Add visible different colours to the pieces to make it easier to distinguish between the two sides.
VB.Net solution
'Code courtesy of James Henderson
Sub DisplayBoard(ByVal Board(,) As <B>String</B>)
'You can get it to have more chess-like colours by editing the background colour with better grid like lines (by Dominic)
'This goes in the display board part
Python solution
TD_INPUT_HANDLE = -10
STD_OUTPUT_HANDLE= -11
STD_ERROR_HANDLE = -12
FOREGROUND_BLUE = 0x01 # text color contains blue.
FOREGROUND_GREEN= 0x02 # text color contains green.
FOREGROUND_RED = 0x04 # text color contains red.
FOREGROUND_INTENSITY = 0x08 # text color is intensified.
BACKGROUND_BLUE = 0x10 # background color contains blue.
BACKGROUND_GREEN= 0x20 # background color contains green.
BACKGROUND_RED = 0x40 # background color contains red.
BACKGROUND_INTENSITY = 0x80 # background color is intensified.
import ctypes
std_out_handle = ctypes.windll.<B>Kernel</B>32.GetStdHandle(STD_OUTPUT_HANDLE)
def set_color(color, handle=std_out_handle):
def DisplayBoard(Board):
VB.Net solution
'Code courtesy of James Henderson
Function CheckEtluMoveIsLegal(ByVal Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>) As <B>Boolean</B>
Python Solution
def CheckEtluMoveIsLegal(Board, StartRank, StartFile, FinishRank, FinishFile):
Java Solution
^_^ Reading_School
Pascal Solution
Function CheckEtluMoveIsLegal(Var Board : TBoard; StartRank, StartFile, FinishRank, FinishFile : <B>Integer</B>) : <B>Boolean</B>;
C# Solution
public static <B>Boolean</B> CheckEtluMoveIsLegal(<B>String</B>[,] Board, int StartRank, int StartFile, int FinishRank, int FinishFile)
// Courtesy of ToxicVerbid
VB.Net
Tutorial.tutorial_doTutorialMenu(Board)
Module Tutorial
End Module
Java Solution
// Type in C for castling
^_^ Reading School
VB.Net
'The Rayman'
Sub MakeMove(ByRef Board(,) As <B>String</B>, ByVal StartRank As <B>Integer</B>, ByVal StartFile As <B>Integer</B>, ByVal FinishRank As <B>Integer</B>, ByVal FinishFile As <B>Integer</B>, ByVal WhoseTurn As Char)
Python
'Batman'
def MakeMove(Board, StartRank, StartFile, FinishRank, FinishFile, WhoseTurn):
VB.NET Solution
Python Solution
def InitialiseBoard(Board, SampleGame):
'Advanced' Solution
The code for this solution is too long to post here. It can be found at git<B>Hub</B> with an explanation for the code at Hillsoft Blog.
It is also able to win against everyone in my <B>Class</B>.
Pascal Solution
// Move type
// FindMove() Procedure (Plays first approached aggressive move)
Procedure FindMove;
var sf, sr, ff, fr, moveCount, i, randomMove: <B>Integer</B>; moves : Array[0..1000] of Move;
Begin
End;
// Modification at main program body
if (WhoseTurn = 'B') then
else
// You might also want have this is an option in the game menu if applied
// By Tochi, CHS
Java Solution
//This is a very simple AI that will make a piece move when it is blacks turn.
//This fix is simple when you lay it out logicallyː when you are playing with another player you must both make a move - 
//this is the only part that isn't automated in your program,
//So if you wanted to automate the game and play with the computer all you need to do is automate the coordinate picking process
//as shown below.
void computerGetMove(Position startPosition, Position finishPosition, <B>String</B>[][] board, char colourOfPiece, <B>Boolean</B> moveIsLegal, char pieceType) {
Brad - Halesowen College
A-level Computing/AQA/Problem Solving, Programming, Data Representation and Practical Exercise/Skeleton code/2015 Exam/Section D
Currently, there is nothing implemented to let the players know which piece has been captured, other than the piece's initials.
VB .NET Solution
<syntaxhighlight lang="vbnet">
Java Solution
Python Solution
Add the rule that the Redum (Soldier) pieces is promoted to a Kashshaptu (Witch) piece if it reaches the other side of the board from where it stated. The Kashshaptu will then move like the Queen in chess.
Python Solution
Please put the question number followed by what your answer was, thanks for contributing. I would also like to thank everyone who, along with me, created this page, very good and had most of the solutions on what came up in the exam.
The Skeleton Program accompanying this Preliminary Material is for the board game AQA
REVERSE.
AQA REVERSE is a board game in which a human plays against the computer. Each player takes
it in turn to make a move by specifying coordinates of where they would like to place one of their
pieces – the human player uses pieces labelled "H" and the computer uses pieces labelled "C". A
piece can only be put in an empty square on the board.
After a player has put a piece on the board any of the opponent’s pieces that are now trapped,
either horizontally or vertically, between the piece just placed and one of the player’s other pieces
are flipped – this means that they now change their label (if they were an "H" they become a "C" and
vice versa). There must be no empty spaces or other pieces belonging to the player between the
two trapping pieces.
The game finishes when every square on the board contains a piece. The winner is the player who
has the most pieces on the board at the end of the game. The human player always moves first.
The default board consists of a 6x6 grid of squares.
If you want to communicate I will be able to help:
Contacts:
<br>I am one of the contributors to the coding solution, I am a python coder and I can help with any solution.
I can talk about my the solution as psuedo or plain english if it isn't python and a python solution.
<br>My contact is: rad-wane@hotmail.co.uk
Please go to the discussion page at the top of the page to talk.
Note be-careful and aware of the contact you put here
Please contribute to this website as you can see in this link: https://en.wikibooks.org/wiki/A-level_Computing_2009/AQA/Problem_Solving,_Programming,_Data_Representation_and_Practical_Exercise/Skeleton_code/2015_Exam/Section_D 
Similar Games:
If adding to this list, please provide tangible and measurable changes. 
"Changing capture rules" is not a workable idea unless possible changes are also stated.
Visual Basic Code:
'Skeleton Program code for the AQA COMP1 Summer 2016 examination <br />
'this code should be used in conjunction with the Preliminary Material <br />
'written by the AQA COMP1 Programmer Team <br />
'developed in the Visual Studio 2008 programming environment
Module Module1
End Module
Python Code:
import random 
def SetUpGameBoard(Board, Boardsize): 
def ChangeBoardSize(): 
def GetHumanPlayerMove(PlayerName): 
def GetComputerPlayerMove(BoardSize): 
def GameOver(Board, BoardSize): 
def GetPlayersName(): 
def CheckIfMoveIsValid(Board, Move): 
def GetPlayerScore(Board, BoardSize, Piece): 
def CheckIfThereArePiecesToFlip(Board, BoardSize, StartRow, StartColumn, RowDirection, ColumnDirection): 
def FlipOpponentPiecesInOneDirection(Board, BoardSize, StartRow, StartColumn, RowDirection, ColumnDirection): 
def MakeMove(Board, BoardSize, Move, HumanPlayersTurn): 
def PrintLine(BoardSize): 
def DisplayGameBoard(Board, BoardSize): 
def DisplayMenu(): 
def GetMenuChoice(PlayerName): 
def CreateBoard(): 
def PlayGame(PlayerName, BoardSize): 
random.seed() 
BoardSize = 6 
PlayerName = "" 
Choice = "" 
while Choice != "q": 
C# Code:
// Skeleton Program code for the AQA COMP1 Summer 2016 examination
// this code whould be used in conjunction with the Preliminary Material
// written by the AQA COMP1 Programmer Team
// developed in the Visual Studio 2012 programming environment
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Comp_1_Resit
Java:
VB.Net:
Python:
def GetHumanPlayerMove(PlayerName):
def CheckIfMoveIsValid(Board, Move):
C#:
OR
Python:
random.seed()
BoardSize = 6
PlayerName = ""
Choice = ""
while Choice.lower() != "q":
or
def GetMenuChoice(PlayerName):
or
random.seed()
BoardSize = 6
PlayerName = ""
Choice = ""
while Choice != "q" or Choice != "Q":
C#:
def PlayGame(PlayerName, BoardSize):
In the original Reversi game you are only allowed to place a piece if it captures the opponents piece.
Python :
def CheckIfMoveIsValid(Board, BoardSize, Move, HumanPlayersTurn):
I haven't made it load yet, but it does save in a text file called test. If anyone has other ideas on how to do this I'll code other possible solutions. This current one, saves the board every turn and whose turn, true means its human turn, false computer.Vb.Net - Using last years as an example this is what i came up with, I could definitely be improved but is a starting point.
To save the game i put in a If statement when the human move was fetched so when the input move = 6666 the save sub was run
To make the Load game sub work, I put another case statement into the menu that set a variable Gameload = true and ran the play sub passing it through. Then in the play sub an if statement that when true runs the load game sub, while also making sure to stopped the SetupGameBoard sub overwriting the save.
Sub Savegame(ByVal Board(,) As Char, ByVal HumanPlayersTurn As <B>Boolean</B>, ByVal Boardsize As <B>Integer</B>)
Loading the game:
Adapting the program to load the save:
In Sub Main -
Case "l"
In Setup Board -
Enclose all code with If Gameloaded = False Then ... End If
In PlayGame -
Python (<B>Method</B> 1):
def DisplayGameBoard(Board, BoardSize):
def SaveGame(Board,HumanPlayersTurn):
def PlayGame(PlayerName, BoardSize):
Python (<B>Method</B> 2):
Another Way of Saving (Nested FOR Loops to separate data from board lines)
def SaveGame(Board,HumanPlayersTurn): 
def LoadGame(Board):
def PlayGame(PlayerName, BoardSize):
C#:
Python:
<br> Firstly I have added another choice on the main menu called (m)ultiplayer game, where user will enter 'm' to play against eachother, this will straightly ask them to enter their names, I stored the first player's players name in the variable PlayerName and the second in another variable I made called PlayerTwoName. I then call the play game function passing on three parameters PlayerName, PlayerTwoName, BoardSize. Because I added another parameter that it takes I had to pass onther parameter when the computer plays with human so I added none leaving the other two so like (PlayerName,None, BoardSize). In the PlayGame function just before the computer gets it's move, I made a check to see if it's two players against a computer or a human, this was simply done by that variable/parameter I have passed on, if Player2Name does not equal none, then we know it is another human player as we passed his/her name. Under that I did Move = GetHumanPlayerMove(Player2Name), this is calling the function GetHumanPlayerMove but passing a different parameter than the computer. Otherwise/else it is a computer so we keep the existing line Move = GetComputerPlayerMove(BoardSize) but under the if statement as else. I then just added some extra bits so instead of "Press the Enter key and the computer will make its move" I did a check to see if it is against human player and then added anther message saying press enter so 'player2name' will make their move, for example. Also a message saying player 2 won instead of computer won.
def DisplayMenu():
def PlayGame(PlayerName,Player2Name, BoardSize):
random.seed()
BoardSize = 6
PlayerName = ""
Choice = ""
while Choice.lower() != "q":
C#:
Vb.net
'Skeleton Program code for the AQA COMP1 Summer 2016 examination <br />
'this code should be used in conjunction with the Preliminary Material <br />
'written by the AQA COMP1 Programmer Team <br />
'developed in the Visual Studio 2008 programming environment
Module Module1
End Module
"Python:"
def SetUpGameBoard(Board, Boardsize, PlayerInitials, ComputerInitials):
def ChangeInitials(PlayerName):
def DisplayMenu():
def PlayGame(PlayerName, BoardSize, PlayerInitials, ComputerInitials):#
random.seed()
BoardSize = 6
PlayerName = ""
Choice = ""
PlayerInitials = "H"# Sets the default Player initial to H
ComputerInitials = "C"# Sets the default Computer initial to C
while Choice != "q":
"C#:"
The solution here changes the default H to the first letter of the player's name when entered through the menu.
Python:
random.seed()
BoardSize = 6
PlayerName = ""
Choice = ""
while Choice != "q":
C#:
Python:
def MakeMove(Board, BoardSize, Move, HumanPlayersTurn):
def MakeMove(Board, BoardSize, Move, HumanPlayersTurn):
C#:
I have quite simply added ONE line of code in to the original section which calculated when the game was over.
It now just tells you your score against how many spaces were on the Board originally.
Python:
def PlayGame(PlayerName, BoardSize):
C#:
Section A usually doesn't relate to the skeleton program. The type of question that will be asked is:Correct any mistakes I make here, please.
POINT TO NOTE, AS YOU ARE NOT ALLOWED A CALCULATOR YOU CAN USE THE COMPUTER AND YOUR PROGRAMMING LANGUAGE TO CALCULATE THINGS, worth learning it though.
The way to go about this is, you will firstly know that 8 bits means there will be 8 numbers. The answer will be: 00110111 
Learn how to convert from binary to denary and vice versa
Look at Two's compliment
Don't forget to know the range of the negative bits too
Advantages and disadvantages so mostly talk about the quality of image, the size the file is...
THIS IS JUST SOME OF THE THINGS YOU'LL NEED TO KNOW. DON'T JUST RELY ON THIS AS I MAY HAVE MISSED SOME THINGS.
State a User Defined Subroutine with only one parameter:
1)GetHumanPlayerMove
2)GetComputerPlayerMove
3)PrintLine
4)GetMenuChoice
State a User-defined subroutine whose only action is to produce output to the screen:
1)DisplayGameBoard
2)PrintLine
3)DisplayMenu
State a Local variable: 
1)BoardSize
2)PlayerName
3)Choice
State a Global variable:
1)BoardSize
2)PlayerName
3)Choice
Variable that has a stepper role: 
1)Row 
2)Column
Variable that has a Gatherer role: 
1) Score
Array variable:
1)Board
Describe the circumstances under which this structure in the Skeleton Program will stop repeating:
When the int value of the Global Variable of BoardSize has been reached, or when the game has been won by a player.
Why has a For loop been chosen for the repetition structure :
The program is fed the specified number of times it has to repeat ( e.g. BoardSize parameters ), therefore a for loop has been used as it allows the user/player to pick a specific range, and execute it the specified amount of times.
1)Easier reuse of routines in other programs; 
2)Routine can be included in a <B>Library</B>; 
3)Helps to make the program code more understandable;
4)Ensures that the routine is self-contained // routine is independent of the rest of the program; 
5)(Global variables use memory while a program is running) but local variables use memory for only part of the time a program is running; 
6)reduces possibility of undesirable side effects;
7) Using global variables makes a program harder to debug;
Name a variable used to store whole numbers : 
1)Coordinates
2)BoardSize
State a User-defined subroutine that has exactly two parameters :
1)SetUpGameBoard(Board, Boardsize)
2)GameOver(Board, BoardSize)
3)CheckIfMoveIsValid(Board, Move):
4)DisplayGameBoard(Board, BoardSize)
5)PlayGame(PlayerName, BoardSize)
What does random.seed() do?
1) Makes it more random
Why has MOD 10 been used?
1) To get the second digit of a two digit number
State a Built-in function with exactly one parameter that returns an <B>Integer</B> value:
1)GetHumanPlayerMove(PlayerName) ====> (gets the <B>Integer</B> value of coordinates)
Explain what is meant by a boundary value
1)Boundary values are those just inside, on and just outside the range of allowed values
Built-in function that converts a <B>String</B> into a different data type :
1)int
----Variable Types
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
This is for the new specification A-Level Computer Science with the skeleton code being a version of the Battleships game. There is a change in the exam layout this year as the standard comp1 and comp2 some of us are used to are being changed. The main changes are that some of the questions from the comp1 (now called paper 1) have moved to the comp 2(now called paper 2) with some smaller differences in the specifications. it is advised you go through these specification to check if you have missed anything and to check for changes.
I think that that is the format for the paper 1 and it is very similar to the comp1 in the last few years, just without the section A as it is being moved onto the paper 2.(If I Say anything wrong please edit this page, I have no intention of misleading people.)
As I don't know the full layout of the paper the pages may not be in the right order or labelled right so please edit them as you see fit.
Skeleton code June 2016 Problems (Section D in Comp1 and most likely Section C in Paper 1 on new spec this year)
Sample Question Papers/
I have been developing some practice questions based on my own investigations and the sample questions posted on here. I have estimated mark values depending on the complexity. I created these in Microsoft Word, so ideally you would copy and paste them from the page into that and then you can easily insert screen-shots etc. into the <B>Table</B>s. Any feedback via the discussion page would be appreciated. There may be some questions specific to the JAVA program or the netbeans IDE as that is the language we are using.
1. Write an explanation of how get RowColumn() works below
3 marks
2. Enter a break-point at an appropriate point and then debug the program. Enter a column value of a and enter nothing when asked for a row number. Insert a screenshot below of the values of the row and column <B>Integer</B> variable values after the data has been input
2 marks
3. Modify the getRowColumn() <B>Method</B> so that it will not allow the user to make a move that is off the board. It must repeat until the user enters a valid move and output an error if they do not enter a correct row or column value.
Insert a screenshot of your code below
4 marks
Test your code by entering a column value of 10, then a, then -1, then 5. Then enter a row value of 10, then a, then -1, then 5. Insert a screenshot(s) of the result below
2 marks
4. List all the <B>Character</B>s that are stored within the array board[] and for each one, describe what it represents.
8 marks
5. Several of the <B>Character</B>s stored within the board are automatically generated. State the name below of the user-defined <B>Method</B> in which this is performed.
1 mark
6. Several of the <B>Character</B>s stored within the board are automatically generated. State the name below of the built-in <B>Method</B> which is used to performed this operation.
1 mark
5 marks
2. Within the final else statement in makePlayerMove(), the player is told “Hit at” position if they have hit an enemy ship. Modify the code within this else statement so that it also outputs the name of the ship that they have hit.
4 marks 
3 marks
3. The board stores the first <B>Character</B> from the ship name to represent which ship is stored in a square. Create a new function called outputHit. It must return a <B>String</B> and take two parameters, a <B>Character</B> called square and and array of Ship called ships. It must loop through each item in the array until it finds the name of the ship that matches the square <B>Character</B> and then return the name of that ship. You will need to modify the output code in makePlayerMove() so that it passes in the pointer to the ships array and the board[row][column] value and outputs the <B>String</B> that is returned by the function. 
8 marks 
2 marks   
3 marks
1. Within the subroutine printBoard() there is a conditional statement which is extremely long and not dynamic. Explain in the box below why it is not dynamic and in what situations it may not work correctly. The statement is shown below:-
2 marks
2. Rewrite the statement within printBoard() to make it work dynamically.
4 marks
3 mark
3. Within the subroutine checkWin() there is a conditional statement which is the same as the one within printBoard(). If you were to just copy your dynamic statement from printBoard() to replace this it would not work. Explain why below:- 
2 marks
4. Rewrite the statement within checkWin() to make it work dynamically. 
4 mark
5. Add another ship with a size of 1 and the name “Row Boat” to the appropriate subroutine 
2 marks
6. In order to make use of your additional ship, there is another change you must make to the program code. Make that change.
1 mark
7. In order to test your code, you need to be able to see the positions of the ships on the board. To do this, there is a change you must make to the line console.print(" "); within the subroutine printBoard(). Comment out this line of code (DO NOT DELETE IT) and add an alternate line below it that will display the actual <B>Character</B> stored within the board array instead of an empty space.
4 marks
2 marks
8. So that the game performs as it used to, comment out your additional line of code and remove the comments from the line console.print(" ");
1 mark
1 mark
This is Comp1 for the new Computer Science Specification even though it is under the Computing Wiki. Keep in mind that there is another Comp1 exam for Computing (for retakes?) and this is the place for this older exam. There should be a new wiki for Computer Science with links from both wikis to each other.
Welcome to the paper 1 section C (what used to be section D in past COMP1 papers) for the new 2016 AQA Computer Science Exam.
This is where suggestions can be made about what some of the questions might be and how can we solve them.
Please be respectful and do not vandalise or tamper with the page, as this would affect students' preparation for their exams!
I wish you all good luck with the exam, hopefully we can make it a little easier on ourselves by working together.
Delphi/Pascal Solution
Answer :
Procedure GetRowColumn(Var Row: <B>Integer</B>; Var Column: <B>Integer</B>);
Begin
End;
VB.NET Solution
Answer :
Python Solution:
Answer :
def GetRowColumn():
This is a simple way to check the validity of row and column's entered values to ensure they do not exceed the size of the board. The maximum size of the board being 9 and minimum size being 0.
Another way could be to use the 'Try and Except' function in Python, this would help to cover multiple input errors and include the <B>Method</B> above in a slightly more efficient way.
def GetRowColumn():
def GetRowColumn():
This is some more top notch code from your friendly neighborhood Oliver James Cooke.
def GetRowColumn():
Java Solution
Answer :
//Author: Dan H
int[] getRowColumn(){
Alternative, checking column and then row seperately:
<syntaxhighlight>
// Author Asadullah H
</syntaxhighlight>
Alternative, with no checking, instead invalid values are truncated.
C# Solution
Answer :
May 2017 - you scrubs. Here is some neat code.
June 2016 - Bit of a late addition, but this is my <B>Method</B> to stop ANY wrong input from crashing the program.
This works by storing the input as a <B>String</B>, checking if it can be converted to an int, and only then will it overwrite the Column/Row data.
Courtesy of the legend known of Lloyd, ~Bridgwater College.
THIS CODE SOLVE THE PROBLEM OF THE CODE CRASHING IF AN <B>Integer</B> BELOW 0 OR ABOVE 9 IS ENTERED BUT THE CODE WILL STILL CRASH IF ANYTHING BUT AN <B>Integer</B> IS ENTERED - Aquinas College
private static void GetRowColumn(ref int Row, ref int Column)
p.s. (if you can't do this, you will fail)
This feature may defeat the point of the game. But we shall give it a go anyway.
Delphi/Pascal Solution
Answer :
Procedure MakePlayerMove(Var Board: TBoard; Var Ships: TShips);
Var
Begin
End;
VB.NET Solution
Answer - Better :
' Answer is more efficient than previous code which utilised a dictionary
Sub MakePlayerMove(ByRef Board(,) As Char, ByRef Ships() As TShip)
End Sub
Answer :
Sub MakePlayerMove(ByRef Board(,) As Char, ByRef Ships() As TShip)
Python Solution
Answer - Better :
def MakePlayerMove(Board, Ships):
Answer :
def MakePlayerMove(Board, Ships):
Java Solution
Answer :
//Author: Dan H
void makePlayerMove(char[][] board, Ship[] ships) {
// Author: Emmanuel M
void makePlayerMove(char[][] board, Ship[] ships){
C# Solution
Answer :
private static void MakePlayerMove(ref char[,] Board, ref ShipType[] Ships)
I worked to replace the 'h' with the specific letter of the warship hit.
The underneath solution does this quite well.
However, it is for the specific ships entered and does not automatically change if more are added/changed.
Basically, I replace the code:
With this:
for (int i = 0; i < 6-1; i++)
This converts the first letter of the ship name into a <B>Character</B>, then converts it to lower case.
The visibility of the letter is handled in a different subroutine (the lower case will be visible).
Only thing I didn't get round to is replacing the '6' with the max element in the array. Work this out yeah ;D
Courtesy of the legend known of Lloyd, ~Bridgwater College.
This is highly unlikely to come up as it is already implemented in Java but it is good practice nonetheless.
Delphi/Pascal Solution
Answer :
Function GetMainMenuChoice: <B>Integer</B>;
Var
Begin
End;
VB.NET Solution
Answer :
'Subroutine to get coordinates from user
Python Solution
Answer :
def GetMainMenuChoice():
Java Solution
Answer :
C# Solution
Answer :
/*One way to do this is to put all the Convert.ToInt32 (Console.ReadLine ()) in a 
try / catch and reasonably assume that any problem that happens is because of non-<B>Integer</B> input
This happens here, and also in GetMainMenuChoice(). 
A slightly nicer solution is to create another <B>Method</B> which reads an <B>Integer</B> input from the user 
with the instructions as a parameter */
/* Or with a <B>Method</B> to get <B>Integer</B> input ... */
/* get an <B>Integer</B> input from the user */
This would involve adding another menu item between 2 and 9 perhaps to load a saved game? 
Saving a game part way through would mean just saving a .txt file and having the option to open it much in the same way a training file works. 
We would also need to make sure that when a game is saved it deletes the previous save file, or maybe allow for there to be multiple save slots.
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer:
' this answer does not work
' Modify playgame to prompt for save
Sub PlayGame(ByVal Board(,) As Char, ByVal Ships() As TShip)
End Sub
'change LoadGame to support loading the game
Sub LoadGame(ByVal Filename As <B>String</B>, ByRef Board(,) As Char)
End Sub
'Save the Game
End Sub
'Alternate Savegame Function (Define Filename as "training.txt" earlier in the program)
Sub Savegame(ByVal Filename As <B>String</B>, ByRef Board(,) As Char)
Answer :
'This code doesn't work. "Board" is unspecified and is <B>Class</B>ed as an invalid exception error due to Board(,) not being able to be used in the GetRowColoumn area. No idea how to fix this. This code is close, but it needs to be improved for it to work thoroughly without exception errors.
'to save the game
'(prompt to save in GetRowColoumn subroutine)
'to load, edited version of original loadgame subroutine
Python Solution
Answer :
Solution for 3.3:
def SaveGame(Board):
Solution for 2.7:
def SaveGame(Board):
You will need to add a call to this subroutine into the main PlayGame(Board) subroutine to get it to save the Progress after each turn.
def PlayGame(Board, Ships):
Java Solution
Answer :
//Author: Dan H
void playGame(char[][] board, Ship[] ships) {
public Main() {
C# Solution
Answer :
// This is our semi-working save game code, the only problem is that after you have saved the game and return to the main menu any menu choice will load the previously saved game, you can avoid this by exiting the console window and restarting the program.
public struct ShipType
private static void PlayGame(ref char[,] Board, ref ShipType[] Ships)
Unlikely as it all the Ship data would need to be changed. It would take too long in the exam.
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
The programmers have originally hardcoded the size of the board into the relevant functions and procedures. 
Here I have set the 'boardSize' variable to the number of rows and columns I want (as mentioned in the Java solution). The value 12 will result in a board which is 11*11 in size.
The advantage of this is that I can change the size of the board by changing one number.
I have also passed 'boardSize' into the appropriate functions.
if __name__ == "__main__":
You could now set the size of the board to a user defined value.
It will crash for some values because the ships won't fit on the board e.g if you entered 2.
If I was doing this in the exam I would add an error check in and set a lower limit (depending on how large my ships are) and an upper limit to prevent display errors from a very large board.
I don't think this is likely to come up but it's easy enough to do:
if __name__ == "__main__":
Below are all the functions/procedures which required the new 'boardSize' variable.
def SetUpBoard(boardSize):
def PlaceRandomShips(Board, Ships, boardSize):
def ValidateBoatPosition(Board, Ship, Row, Column, Orientation, boardSize):
def CheckWin(Board, boardSize):
Here I have added in an exception to make the board display correctly for double digit values.
def PrintBoard(Board, boardSize):
def PlayGame(Board, Ships, boardSize):
Java Solution
Answer :
// (Edit by : Asadullah: use ctrl+h and replace the number 10 with any number you want by clicking replace all, but check all the replacements just incase you have made additional adjustments. you may also replace it with an appropriate constant such as BOARD_SIZE
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
procedure PlaceRandomShips(var Board: TBoard; Ships: TShips);
type
VB.NET Solution
Answer :
1).
'The boat placed will be displayed as "F" for Frigate
Sub PrintBoard(ByVal Board(,) As Char)
Sub SetUpShips(ByRef Ships() As TShip)
'It is very simple to add, it only requires about 4 lines of extra code
Python Solution
Answer :
def CheckWin(Board):
def PrintBoard(Board):
if __name__ == "__main__":
Java Solution
Answer :
//Author: Dan H
C# Solution
Answer :
// <u>THIS DOES NOT WORK AS THE SHIP IS NOT HIDDEN- Aquinas College</u>
//I knew that your previous <B>Method</B> didn't work, so I added a few bits of code before so that:
//-The ship can be hidden from the user
//-The ship can be checked to make sure that it was sunk, so that the game ends
//Please don't delete my work, thank you... - Oleksandr Buzan
private static void PrintBoard(char[,] Board)
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
def GetMainMenuChoice():
Java Solution
Answer :
//AQA console already covers this
C# Solution
Answer :
// - Oleksandr Buzan
private static int GetMainMenuChoice()
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
def GetMainMenuChoice():
1.using a simple List in which it checks if the value is there or not if it is not then you will be asked repeatedly untill you input an <B>Integer</B>
2.Let my name be known Mustafa
3. please enter your answers in the answer boxes thank you.(easy to do from visual editor)
Java Solution
Answer :
/**This is covered by the AQA Console code already**/
C# Solution
Answer :
May 2017
private static int GetMainMenuChoice()
//Luke Moll, Bridgwater College
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Sub PlayGame(ByVal Board(,) As Char, ByVal Ships() As TShip)
Python Solution
Answer :
def PlayGame(Board, Ships):
Java Solution
Answer :
C# Solution
Answer :
private static void PlayGame(ref char[,] Board, ref ShipType[] Ships)
-Give % accuracy?(user moves/least possible moves)
-Could also add a high score list written to a file (Which would mean adding -another option in the menu).
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Module Module1
Dim Acc As Single
Function hitProb(ByVal Board(,) As Char)
End Function
Python Solution
Answer :
Here we create a calculation 'CalcScore()' function to calculate the percentage accuracy. We then integrate it into the 'PlayGame()' function with global variables (unfortunately the easiest way) to allow the code to run at the correct time with minimal function editing.
But Don't forget
At the start!
Java Solution
Answer :
//Author: Dan H
void playGame(char[][] board, Ship[] ships) {
C# Solution
Answer :
private static void PlayGame(ref char[,] Board, ref ShipType[] Ships)
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
'Subroutine to get coordinates from user
Python Solution
Answer :
One to use the 'Try and Except' function in Python is shown below, this would help to cover a simple ValueError (<B>String</B> typed in place of an <B>Integer</B> input), also works for a NULL value being input too.
def GetRowColumn():
Java Solution
Answer :
//Author: Dan H
int[] getRowColumn(){
C# Solution
Answer :
//This code checks the User input in comparison to the preset correct inputs 0 - 9
//~ Kaine Atherton
Delphi/Pascal Solution
Answer :
VB.NET Solution bad
Answer :
Sub Main()
Sub SetUpShips(ByRef Ships() As TShip, ByRef addship As <B>Boolean</B>) 'Add parameter addship
Python Solution
Answer :
To make this task easier, first I would recommend removing hardcoded lists which are used in the PrintBoard procedure and the CheckWin function.
Below is the code I changed to achieve this:
if __name__ == "__main__":
It's passed through the PlayGame procedure.
def PlayGame(Board, Ships, shipTypes):
And used by these functions/procedures.
def CheckWin(Board, shipTypes):
def PrintBoard(Board, shipTypes):
Removing the hardcoded list means that if you want to add more ships you just have to change the list in one place.
All you now need to do to add multiple ships of the same type is to copy+paste values from both lists so that you have two:
if __name__ == "__main__":
When I modify the code to show the position of the ships when the game is played, I get this result:
As you can see I now have two patrol boats on the board. 
Java Solution
Answer :
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
' could add an error message through use of <B>Boolean</B> var
Python Solution
Answer :
def PlayGame(Board, Ships):
Java Solution
Answer :
//Author: Harnaam J
int[] getRowColumn() {
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
'This is for PvP.
'New Subroutine
'Addition to Sub DisplayMenu()
Console.WriteLine("3. Start new multiplayer game")
'Addition to Sub Main()
Python Solution
Answer :
This code overhaul allows 2 players to compete. Player 1 is represented on the game board by pieces labelled 'A'. Player 2 is represented on the game board by pieces labelled 'B'. This is to retain the neat structure of the game board.
def SetUpGameBoard(Board, Boardsize):
def ChangeBoardSize():
def GetHuman1PlayerMove(Player1Name):
def GetHuman2PlayerMove(Player2Name):
def GameOver(Board, BoardSize):
def GetPlayer1Name():
def GetPlayer2Name():
def CheckIfMoveIsValid(Board, Move):
def GetPlayerScore(Board, BoardSize, Piece):
def CheckIfThereArePiecesToFlip(Board, BoardSize, StartRow, StartColumn, RowDirection, ColumnDirection):
def FlipOpponentPiecesInOneDirection(Board, BoardSize, StartRow, StartColumn, RowDirection, ColumnDirection):
def MakeMove(Board, BoardSize, Move, HumanPlayersTurn):
def PrintLine(BoardSize):
def DisplayGameBoard(Board, BoardSize):
def DisplayMenu():
def GetMenuChoice(Player1Name):
def CreateBoard():
def PlayGame(Player1Name, Player2Name, BoardSize):
BoardSize = 6
Player1Name = ""
Player2Name = ""
Choice = ""
while Choice != "q":
An alternative <B>Method</B> to multiplayer. Although Neils' code is fine, this code may be considered more efficient.
def PlayerPlaceShips(Board, Ships):
def MultiplayerGame(Ships):
Java Solution
Answer :
C# Solution
Answer :
This is all about adding a message to the user as soon as a Ship has been destroyed.
It may quite easily crop up in the exam, as a simple way to get it to work is to copy and modify the existing CheckWin(Board) subroutine.
This works by scanning across the entire board to check for the existence of ships. You can then check which ones exist.
Delphi/Pascal Solution
Answer :
Procedure MakePlayerMove(Var Board: TBoard; Var Ships: TShips);
Var
Begin
End;
VB.NET Solution
Answer :
'Solution 1
Sub DisplayWin(ByVal Board(,) As Char)
Sub MakePlayerMove...
Console.WriteLine("Hit at (" & Column & "," & Row & ").")
'Solution 2
'Global Variable:
Dim Hits As <B>Integer</B>()
'Addition to Sub SetUpShips():
'New Subroutine:
'Solution 3
'In Sub makeplayermove
If Board(Row, Column) = "m" Or Board(Row, Column) = "h" Then
'You can find out the ship number in the SetUpShips subroutine
'You can change the code to suit other ships like destroyers by change the Ship variable and the console.writeline text.
Python Solution
Answer :
This subroutine works in a very similar way to the CheckWin(Board) that already exists. It is called in the same position too.
Probably not the best example that could be coded in, but it works, and in a way that has already been demonstrated in the skeleton code.
def CheckShipsSunk(Board):
The PlayGame(Board, Ships) subroutine has had a simple line added to call the CheckShipsSunk(Board) subroutine when the game is running.
def PlayGame(Board, Ships):
Answer - Alternative :
This solution is very simple and uses the lengths of the ships stored in the Ships 2D array.
Java Solution
Answer :
//Author: Dan H
C# Solution
Answer :
May 2017
public struct ShipType
private static <B>String</B> CheckSunk(ref char[,] Board, ref ShipType[] Ships)
private static void PlayGame(ref char[,] Board, ref ShipType[] Ships)
private static void SetUpShips(ref ShipType[] Ships)
Aquinas College
This contains the code needed to get the program to tell you when you've sunk a ship
public struct ShipType
private static void MakePlayerMove(ref char[,] Board, ref ShipType[] Ships)
private static void SetUpShips(ref ShipType[] Ships)
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
def PlayerMisssile(Board, Ships):
Java Solution
Answer :
// Author: Emmanuel M
// P.S Called it a Rocket instead of a Missile :)
private int hits = 0;
private int miss = 0;
// Edited makePlayerMove to add hits and misses
void makePlayerMove(char[][] board, Ship[] ships){
// made a <B>Method</B> called MakePlayerMoveRC for RocketMove to avoid <B>Interrupt</B>ions with Game 
void makePlayerMoveRC(char[][] board,int row,int column){
void rocketMove(char[][] board){
// Edited playGame
void playGame(char[][] board, Ship[] ships){
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
def add_to_scores(word, score):
def sort_high_scores(scores):
def PlayGame(Board, Ships, Hack):
by Oliver Cooke
"God is dead, and we've killed him"
Java Solution
Answer :
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Console.Clear()
Python Solution
Answer :
The first example is cross-platform, it uses 'cls' if on a windows system but 'clear' if anything else (OSX or Linux I think):
import os
def MakePlayerMove(Board, Ships):
I doubt they would expect a cross-platform solution for full marks, so you can just deal with it like this:
import os
def MakePlayerMove(Board, Ships):
Java Solution
Answer :
C# Solution
Answer :
VB.NET Solution
Answer :
Sub PlaceRandomShips(ByRef Board(,) As Char, ByVal Ships() As TShip)
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
So, here, we can integrate simple loops to make the code work. I made a minor edit the code of the GetRowColumn() and MakePlayerMove() functions to allow the salvo to take place.
Java Solution
Answer :
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Python Solution
Answer :
This shows how I would approach the task of adding a set number of turns and how I would avoid taking a turn off when the same coordinate is entered a second time:
def MakePlayerMove(Board, Ships, maxMoves):
def PlayGame(Board, Ships):
Java Solution
Answer :
C# Solution
Answer :
Delphi/Pascal Solution
Answer :
VB.NET Solution
Answer :
Java Solution
Answer :
C# Solution
Answer :
Python Solution
Answer :
def PlayerPlaceShips(Board, Ships):
Delphi/Pascal Solution
Answer :
//Sam B
Procedure LoadGame(filename: <B>String</B>; Var Board: TBoard);
Var
Begin
End;
Python Solution
Answer :
Save function adapted from the Saving the game tutorial changed so it asks the player if they want to save the game.
Also deals with invalid file names.
def save(Board):
This function will load any file you choose.
def load(Board):
Other Edits
def DisplayMenu():
if __name__ == "__main__":
Java Solution
j
Answer :
//author: zac peel-orange
void placeShip(char[][] board, Ship ship, int row, int column, char orientation){
Python
Answer :
Changes have to be made to 3 of the functions; ValidateBoatPoisition, PlaceShip and PlaceRandomShips:
def PlaceRandomShips(Board, Ships):
def PlaceShip(Board, Ship, Row, Column, Orientation):
def ValidateBoatPosition(Board, Ship, Row, Column, Orientation):
VB.NET Solution
Answer :
'this is a simple way of doing this
'the number is entered and then separated by the left and right command
'if you do not understand this talk to you teacher about it as they are useful commands
'this selects the furthest left number
'this selects the furthest right number
Python Solution
Answer:
def GetRowColumn():
Java Solution
Answer:
//Solution by Psalmjrel Paulin - St. Brendan's Sixthform College
VB.NET Solution
Answer :
'this is an ill efficient <B>Method</B>, change from Sub to Function as <B>Integer</B>, create a nested for loop (row then column, both cycling from (row/column - 1) to (row/column + 1), if structure inside this: if off board, do nothing, else (on board), check to see if ship is present, return true if so [for loop will then be exited as value returned]
' currently no need to pass any value ByRef, only pass the board, row and column
'firstly create the sub routine you are going to use
'you do this to the column and row so that you can use all of the coordinates around where you have played
'all of these if statements use the above <B>Integer</B>s to check if there is a ship nearby
'it does not specify what ship is nearby
'after doing this go to makeplayermove and dim close and set it to false
Sub MakePlayerMove(ByRef Board(,) As Char, ByRef Ships() As TShip)
'then further down in the code, call on you new sub routine
If Board(Row, Column) = "m" Or Board(Row, Column) = "h" Then
'this is where you should add the sub
'here is where you will use close to say the move was close to a hit
Python Solution
Answer :
def MakePlayerMove(Board, Ships):
Performing some <B>Run Length Encoding</B> on the 'Board'. Could be useful when saving the game.
This would work in a similar way to the 'Generate FEN' question from last years COMP1 paper.
Python Solution:
Answer :
def encodeBoard(Board):
C# Solution
Answer :
Java Solution
Answer :
Python
Answer :
Changes have to be made to the subroutine 'PlayGame' as well as creating a new subroutine 'MakeTorpedoMove'.
def PlayGame(Board, Ships):
def MakePlayerTorpedoMove(Board, Ships):
The exam questions are very hard to predict and this site is by no means going to give you everything you need for the questions you'll sit. The most important thing you should do is learn how to program, and learn how to program well!
This is for the new specification A-Level Computer Science with the skeleton code being a version of the Battleships game. There is a change in the exam layout this year as the standard comp1 and comp2 some of us are used to are being changed. The main changes are that some of the questions from the comp1 (now called paper 1) have moved to the comp 2(now called paper 2) with some smaller differences in the specifications. it is advised you go through these specification to check if you have missed anything and to check for changes.
I think that that is the format for the paper 1 and it is very similar to the comp1 in the last few years, just without the section A as it is being moved onto the paper 2.(If I Say anything wrong please edit this page, I have no intention of misleading people.)
As I don't know the full layout of the paper the pages may not be in the right order or labelled right so please edit them as you see fit.
Skeleton code June 2017 Problems (Section D in Comp1 and most likely Section C in Paper 1 on new spec this year)
Sample Question Papers/
Sub Main() 
for?") 
score") 
End Sub
Describe the stages of development of a hardware/software system
When you are given any problem you should start off by finding out about the problem and getting an idea of what you will make to solve the problem by:
Electronic Crafts wants to create a game that will sell successfully, so it needs to see what the market wants to buy and what their current interests are. It will gather data on:
Once it has done its research, it will create a document listing <B>Object</B>ives for the new system. These <B>Object</B>ives must be SMART so that we can check if the system has been created successfully.
SMART means:
Electronic Crafts finds out that football games have sold very well in the past.
It finds out that with a new football season approaching, customers are interested in playing a game with the latest names and kits. The most popular console is the Super MES.
It has created previous football games, so it can re-use and adapt some of the code.
It has a budget of $5million, a team of 20, a year to create it, and the code from previous years to build upon.
Now we have all the data from Electronic Crafts we can set the <B>Object</B>ives, remember these must be SMART. Which of these are sui<B>Table</B>:
What is main aim of the <B>Analysis</B>:
Name some <B>Method</B>s of carrying out your <B>Analysis</B>
What restraints/limits might you have when looking at making a new product?
Once we have settled on what we are going to make and the <B>Object</B>ives for the system, we need to set about <B>Design</B>ing the components. <B>Design</B> is important as it allows you to start thinking about how you will make things, and hopefully avoid making mistakes later.
The Process involved in the <B>Design</B> of a product is looking at:
For Electronic Crafts they now know we are making a football game for the Super MES.
This system only has a joypad interface, they'll have to note which buttons should do what, and where everything will appear on the screen
The process <B>Design</B> is probably the most complicated part. How will the game work out when someone has scored, what will the code for playing a game on the internet look like etc. This may be <B>Design</B>ed using tools such as UML, Data flow diagrams and pseudo code. You don't need to know the specifics for this Unit but they will come in useful for the A2 project.
Finally, Electronic Crafts would need to think about how the game would be delivered to the customer (download vs disc), how games will be saved (On the machine, online or on a memory unit), and how online data would be stored (<B>Database</B> details).
Why is it important for companies to <B>Design</B> products?
So that they can avoid mistakes later on by spotting them in the <B>Design</B> stage
Name 3 things that a company should <B>Design</B>
How would you recommend a company distributes the latest computer game and why?
They should do it online, so that it is faster to get to the customer and companies don't have to pay so much in distribution costs. It also allows for updates to be released without having to recall all the discs
Alternatively
They should distribute it using Blu-ray discs as they offer lots of space and some people have very slow internet connections. They can also be sold in shops, meaning customers will see them and be tempted to buy them
The final thing you should do is evaluate how it all went. Remember we are talking about a systems development life cycle here, so if you made any mistakes or things didn't go to plan it's best to make a note of them. Then next time round you won't make the same mistake. However, the main part of the <B>Evaluation</B> is to reflect on how successful the operational system is:
You might think that all implementation involves is creating the game. You'd be wrong, it involves the following:
And at the same time make sure that the system that you build fits in with what you <B>Design</B>ed
Electronic Crafts will use the <B>Design</B>s and code from previous products to code the game, probably in C++.
They will set up the servers to handle the online play, they will write code to install the game automatically on users machines after paying for it and downloading/putting the disc in the drive.
They will set up data files on the users Super MES and on the online server to handle user and game data
They will create a user manual and website to guide users in playing the game
On top of programming a solution, what else does the Implementation involve?
For a firm creating supermarket checkout machines, explain what they would do for each stage:
What forms might system documentation take:
The most common is a user manual. There might also be a website and videos
Once we have created our solution we need to test that the whole system functions effectively. To do this should be easy, as all we need to do is compare the finished product next to the <B>Object</B>ives that we set out in the <B>Analysis</B>. There are several ways of testing a system, you need to know them all and the types of data that might be used.
At an early stage in a project you should consider how the system will be tested to see if it works correctly. There are three main test <B>Method</B>ologies that you need to be aware of, and able to choose between.
Consider the box to contain the program <B>Source Code</B>, you don't have access to it and you don't have to be aware of how it works. All you do is input data and test to see if the output is as expected. The internal workings are unknown, they are in a black box. Examples of Black Box testing would be if you were working as a games tester for a new console game. You wouldn't have been involved in the <B>Design</B> or coding of the system, and all you will be asked to do is to input commands to see if the desired results are output.
With white box testing you understand the coding structure that makes up the program. All the tests that you perform will exercise the different routes through the program, checking to see that the correct results are output.
A dry run is a mental run of a computer program, where the computer programmer examines the <B>Source Code</B> one step at a time and determines what it will do when run. In theoretical computer science, a dry run is a mental run of an <B>Algorithm</B>, sometimes expressed in pseudocode, where the computer scientist examines the <B>Algorithm</B>'s procedures one step at a time. In both uses, the dry run is frequently assisted by a "trace <B>Table</B>". And whilst we are here we might as well get some more practice in:
Complete the trace <B>Table</B> for the following code:
var a <- 5
var b <- 4
var count <- 0
while count < b
end while
Complete the trace <B>Table</B> for the following code:
var z <- 4
var high <- nums(0)
while z > 0
end while
Name the sui<B>Table</B> testing <B>Method</B>s for each of the following scenarios:
Black Box Testing as you don't have access to the internal workings of the program
Dry Run Testing as you have access to the source and this will allow you to find the offending line(s) of programming
Dry run test the following <B>Algorithm</B>s:
There are three types of test data we can use. What are they? The answer lies mostly in their name, let's take a look at this example where someone has created a secondary school registration system which lets students register themselves. We don't want people who are too young attending, and we don't want students who are too old. In fact we are looking for students 11–16 years old.
If you are testing data that has Typical, Erroneous and Extreme data, show tests for all three. Some tests might only have typical and erroneous, for example entering a correct password might only have a typical and an erroneous value. Some things might only have typical testing, such as if a button to a next page works or not, or if a calculation is correct.
Imagine that the following <B>Object</B>ives were set:
The maximum number of yellow cards a player can receive in a game is 2
Typical : 0,1,2 (most likely to list 1)
Erroneous: 3, -6
Extreme: 0,2
There should be no more than 15 minutes extra time in a game
Typical : 0,1m45,9m23 
Erroneous: -6, 15m01
Extreme: 0,15m00
The name of a team should be no longer than 20 <B>Character</B>s
Typical : Monster United
Erroneous: Monster and Dagrington League of Gentlefolk
Extreme: Moincicestier United (20 <B>Character</B>s!)
List the typical, erroneous and extreme data for the following:
 Typical : 5,16,18 
Erroneous: 21, -7
Extreme: 0 or 20 
 Typical : 28,56,32
Erroneous: 16, 86
Extreme: 21, 68
 Typical : GH24
Erroneous: G678
Extreme: AA00, ZZ99
 Typical : 12/07/1987
Erroneous: 31/09/1987, 31/02/1987
Extreme: 31/12/1999, 01/01/2001 (this is harder to specify, it might depend on the age range you allow)
Typical : brown, red, black
Erroneous: bicycle
Extreme: n/a (we're not here to judge people!)
 Typical : 28
Erroneous: 23
Extreme: n/a 
Typical : 24, 500
Erroneous: -9 
Extreme: 1 (notice no upper end, this is assuming that it wouldn't be a book without any pages!) 
Typical : 23rd, 16th
Erroneous: 30th (you might also mention leap years here)
Extreme: 1st, 28th or 29th (depending on leap years) 
When creating software, hardware, or any kind of product you will go through several stages, we define these stages in the System Development Life Cycle. There are many other models out there that you might be interested in learning more about, but for this course we are going to learn the model shown below.
Any System Development Life Cycle should result in a high quality system that meets or exceeds customer expectations, is finished within time and cost limits, works effectively and efficiently and is inexpensive to maintain and cost-effective to improve upon. For this chapter we are going to look at how a computer games firm, 'Electronic Crafts', would look at making a new computer game.
As this is called the Systems Development Life Cycle, it's quite usual that a company will then go back to the <B>Analysis</B> once it has evaluated a product. Think about some of the software products that you use, they probably have a version number or a year, and reuse code and <B>Design</B>s from previous years
With the Systems Development Life Cycle, you never just quit, you are always looking at ways to improve or surpass what you have created.
The Unit 3 exam, called Problem Solving, Programming, Operating Systems, <B>Database</B>s and <B>Network</B>ing, unit code COMP3, represents 30% of your final A-Level. The time allowed is 2 hours 30 minutes and there are 100 marks available.
This Unit comprises 6 subsections listed below:
Unit 3 definition list
Baud, bit rate, bandwidth, latency
Asynchronous data transmission
Start and stop bits 
Odd and even parity 
Handshaking 
Protocol 
Baseband and Broadband 
<B>Network</B>s<br>
Local Area <B>Network</B>s & Wide Area <B>Network</B>s
<B>Network</B> adapter
Topology (<B>Bus</B> & Star)
<B>Network</B> Segment 
Peer-to-peer <B>Network</B>ing & Server-based <B>Network</B>ing
Thin client computing & Web services
Wireless <B>Network</B>ing (Wi-Fi & Bluetooth)
Inter-<B>Network</B>ing 
<B>Router</B>s particularly, Gateways 
Common Gateway Interface (CGI)
Server-side scripting – the basis of dynamic web page content.
Practical experience of writing simple server-side scripts.
Accessing data from a DBMS using server-side scripts.
<B>Firewall</B>s
<B>Encryption</B> 
Digital Signatures and Digital Certificates 
Virus detection 
Computer Security Procedures 
Data is created by changes in a voltage in a circuit which is then sent down one wire. For one-way communication a single signal wire is needed but additional wires may be needed for grounding. For two-way communication two signal wires are required, one for each direction. This <B>Method</B> is usually used long distance, for example, transatlantic data transmission. The idea being that the setup would be cheaper as there would only be one wire to set up that handles the data. As the data is on one channel, and data is lost over the distance it travels, it is easier to recover the original signal.
Parallel data is preferred for short distance data transmission because the amount of data that can be sent is greater than serial data transmission. However in long range transmission, the data along a wire could get distorted by the voltages from the other wires parallel to the wire. This problem is known as skew. Another reason it is not used over long distances is that the cost of cabling is very high as many wires are required.
Baud Rate is the rate at which signals on a wire may change. This means that in a second, a signal could change a number of times which is <B>Record</B>ed as the baud rate. AQA define the baud rate as the number of signal changes per second. Therefore, 1 baud is defined as one signal change per second. Units for baud rate are per second (/s)
Bit rate is measured in bits per second (also written as bps or bits/second). It measures the number of bits that are sent down a channel per second. Baud and bit rate can be different but when the bit rate is equal to the baud rate, one bit is sent between consecutive signal changes. For example, if you had a dripping water tap, the bit rate and baud rate would be equal for that tap because there is a consecutive change between the tap dripping and water not dripping assuming that the tap would only drip one drop at a time.
There is a direct relationship between bit rate and bandwidth that you must know . They are directly proportional. The greater the bandwidth, the higher the bit rate. The bandwidth is usually double the bit rate so the relationship can be seen as 2:1 as a ratio.
In the context of data communications and electronics, latency is the time that is taken for data to be transmitted from the sender to the receiver. For example, when you're surfing the internet and you make a request, the time that it takes for your request to reach the server is the latency.
A start bit is used to signal the arrival of data and to temporarily synchronise the transmitter and receiver.
A stop bit is a <B>Character</B> in asynchronous data transmission that lets a receiver know that the byte being sent has ended. Stop bits are very important because this is the way most of our information is sent across the internet. Without a stop bit it is possible that a receiving computer will likely prompt an error as it may take in unintended data if the end of the intended data is not given.
Example:
data being sent - 001100
the receiving computer gets this information but does not receive any information to know when to stop reading incoming data and so it will keep reading incoming signals until the program crashes
data received - 00110010101001011001...
A "parity bit" is a bit that is added to ensure that the number of bits with the value 1 in a set of bits is odd or even. Parity bits are used in the simplest form of error detecting. For example, if a signal starts off with 3 occurrences of 1 it is in odd parity, once it arrives at its destination and only has 2 occurrences of 1 then the receiver knows there is a problem and will ask for the data to be re-sent
There are two variants of the parity bit, odd and even. 
When using "even parity", the parity bit is set to 1 if the number of 1s in a set of bits (not including the parity bit) is odd, making the entire set of bits (including the parity bit) even. For example 1001 0110 (4 bits = even)
When using "odd parity", the parity bit is set to 1 if the number of 1s in a set of bits (not including the parity bit) is even, making the entire set of bits (including the parity bit) odd. For example 1000 0110 (3 bits = odd)
In other words, an even parity bit will be set to "1" if the number of 1s + 1 is even, and an odd parity bit will be set to "1" if the number of 1s +1 is odd.
If an odd number of bits (including the parity bit) are transmitted incorrectly, the parity bit will be incorrect and therefore shows an error occurred during transmission. Parity bits can only be used to detect errors, they cannot correct any errors as there is no way to determine which specific bit has been corrupted. The data must be scrapped and re-transmitted.
It is usually a process that takes place when a computer is about to communicate with a foreign device to establish rules for communication. When a computer communicates with another device like a modem or a printer it needs to handshake with it to establish a connection. Much like humans greet each other by a handshake to establish a connection. 
Handshaking may be used to negotiate parameters that are accep<B>Table</B> to equipment and systems at both ends of the communication channel, including, but not limited to, information transfer rate, coding alphabet, parity, <B>Interrupt</B> procedure and other protocol or hardware features.
Handshaking makes it possible to connect relatively heterogeneous systems or equipment over a communication channel without the need for human intervention to set parameters. One <B>Class</B>ic example of handshaking is that of modems, which typically negotiate communication parameters for a brief period when connection is first established, and thereafter use those parameters to provide optimal information transfer over the channel as a function of its quality and capacity.
A typical handshaking process follows the following steps:
Baseband is a transmission medium used for a <B>Network</B> over short distances. Usually, a <B>Network</B> is used between several computers so data is sent simultaneously. However, a baseband system only allows one station to be sent at a time. It offers high performance for low cost.
Broadband is also a transmission medium used for a <B>Network</B> but it is a multichannel system which combines several data channels into one so that the bandwidth of the transmission can be shared between several channels. It is mainly used for long distance communication because long-distance wires are difficult to maintain and therefore it would be wasteful to use single channel wires.
A <B>Firewall</B> is a device or program that monitors and controls data traffic between the internet and a private <B>Network</B> (such as your <B>Network</B> at home). Every <B>Firewall</B> can be customised and assigned rules which determine which data packets are allowed through from the internet and which are not.
<B>Firewall</B>s can also be used to block data from certain IP addresses, domain names or port numbers. Many <B>Firewall</B>s also have the capability of being able to search individual packets for specific matches of text.
"Packet filtering -" 
"Proxy server -"
<B>Encryption</B> is used to hide sensitive messages from illegitimate recipients by using <B>Encryption</B> <B>Algorithm</B>s and an <B>Encryption</B> key to convert plain text to cipher text, illegible to those without the <B>Encryption</B> and decryption key. Private/Public key <B>Encryption</B> is when both parties have a pair of keys, one private and one public. The Public Key is kept in the open freely usable by anyone as is the <B>Encryption</B> <B>Algorithm</B>, however the Private Key is kept hidden.
 
Digital signatures are a way for the sender to prove to the receiver that the message did in fact originate from them. A digital signature is obtained through the following process: 
A Digital Certificate is a way of proving that the public key of the sender is authentic. Digital Certificates are only issued by a certification authority (CA). The certificates are encrypted into the message via the CA's private key, and can only be decrypted with the CA's public key.
There are a number to be aware of:
A virus is a small computer program attached to another program or file and is intended to cause harm to a computer. The first step that a computer performs when the program is executed is to copy itself onto the disk and hide itself. After being copied onto the disk the virus can reside in memory and reconfigure the system so it causes problems such as displaying unwanted messages, destroying or corrupting files or even wiping the entire hard disk. Viruses tend to replicate themselves and also try to spread to other computers. 
Anti-virus programs are used to detect and remove these viruses. Nowadays web browsers have built-in virus scanners which scan files that are available for download.
A worm is a malicious program <B>Design</B>ed to replicate itself in an attempt to spread across a computer <B>Network</B> such as the internet. The most significant difference between a worm and a virus is that a worm is a complete program on its own. Worms can disrupt <B>Network</B> traffic and damage data.
Spam is the flooding of irrelevant unwanted message (silly pointless annoying messages) these can either be by email, SMS or instant messaging. Email spam is usually considered junk mail and millions of spam emails are sent every day. Text messaging spam is also used by companies to advertise themselves. Spam is considered to be disruptive and a waste of <B>Network</B> bandwidth.
Phishing is the act of deceiving a user to give sensitive information about themselves. This may happen by the use of phishing emails or even phishing sites, these look like the site the user is trying to access but are not, they are intended to capture information from the user. The term phishing comes from fishing, where instead of catching fish, information is caught. 
Pharming is technique used to redirect traffic from one website to another, Phishing and Pharming are used in conjunction. Pharming is the process of redirecting users to a different location so that a phishing technique can imitate and capture information about the user.
Authentication, Authorisation, Accounting.
Verification of the user of the computer system. Forms of Authentication include passwords, biometric data, security tokens and digital signatures.
Specifying the access rights of different users to resources on a <B>Network</B>.
Keeping logs of user activity on a <B>Network</B>.
A local area <B>Network</B> is a group or <B>Network</B> of computers linked physically by cables. you should not think about the physical distance between the computers, more about the location of other computers within the <B>Network</B>.
A set of links that connect geographically remote computers and LANs.
A computer communicates on the <B>Network</B> through a <B>Network</B> adapter. A <B>Network</B> adapter plugs into the motherboard of a computer and into a <B>Network</B> cable. They convert data from the form stored in the computer to the form transmitted or received on the cable. Data is passed through electronics that calculate a checksum value, its own address and destination address. It is now known as a frame. The frame is transmitted a bit at a time onto the <B>Network</B> cable, with the address sent first, then data and lastly, the checksum. Each <B>Network</B> adapter card has a unique 48 bit hexadecimal <B>MAC Address</B>.
The structure of the connections that connect devices to a <B>Network</B>
To prevent collisions on a <B>Bus</B> <B>Network</B>, a set of rules can be used. An example of one of these sets of rules is CSMA/CD:
You should be able to compare local area <B>Network</B>ing with standalone operation.
A segment refers to a <B>String</B> of computers. 
<B>Segmentation</B> refers to non <B>Switch</B>ed Ethernet <B>Bus</B> <B>Network</B>s that are split to improve performance.
This a <B>Network</B> system where each workstation has equivalent capabilities.
Peer-to-Peer LANs
Good for less than 10 users where users are located in a close proximity and security isn't an issue. However provides a limited growth for future <B>Network</B> extensions.
Peer-to-Peer WANs
used to share files among a large number of users connected temporarily. E.g.: BitTorrent
Where resources, security and administration on a <B>Network</B> is carried out by dedicated servers.
Thin-client computing is when all of a <B>Network</B>'s procession comes from a central server. The thin-clients are computers used to connect to one central server to be able to form a <B>Network</B>. Some star formatted systems use thin-client <B>Network</B>s. Thin-client <B>Network</B>s do not require the client computers to have any hard disk storage and they often have very little processing power. They are often called dumb terminals because of this. A thin-client <B>Network</B> would be used on a small scale e.g. in a small office because a thin-client <B>Network</B> has very little bandwidth. The central server is the application server and can run applications like Word, multimedia and send these to different users terminals. Also, the central server can control user's login to see if the terminals are connected to the server.
Explain these terms and describe situations where these might be used.
Compare and contrast thin client computing (software as a service, AJAX, Web 2.0, etc.) vs rich client computing (client-server, peer-to-peer), web services as examples of ‘systems architectures’.
<B>Router</B>s and Bridges allow communication between computers on different segments.
A <B>Router</B> is a device that receives packets from a <B>Router</B> or a host and uses the destination IP address the packets contain to pass them to another <B>Router</B> or host. <B>Router</B>s are commonly connected to a <B>Network</B> of other <B>Router</B>s.
An example of how <B>Router</B>s are used:
If a host of a <B>Network</B> (<B>Network</B> A) in one country(country A) wants to communicate with a host on a <B>Network</B>(<B>Network</B> B) of another country (country B), it will have to send packets to the gateway <B>Router</B> on <B>Network</B> A; this will pass the packets to the
until the <B>Network</B> of country B is reached.
A bridge holds a <B>Table</B> of <B>MAC Address</B>es for each connected machine. Data packets received from one segment are only forwarded if they have a valid destination <B>MAC Address</B> on the other segment. This helps to reduce overall traffic. Note that bridges are similar to <B>Switch</B>es but have only two connections.
Like a Bridge a <B>Switch</B> has a <B>Table</B> of <B>MAC Address</B>es for each connected machine. Data packets received from one connection are only forwarded if they have a valid destination <B>MAC Address</B> on the other connection. Unlike Bridges, <B>Switch</B>es can have many connections.
<B>Hub</B>s broadcast any packets received to all other connections.
A device used to connect <B>Network</B>s using different protocols so that information can be passed from one system to another.
Gateways are used to connect LANs through to WANS like the Internet; in order to do this, they must translate the LANs frame into equivalent WAN frame and vice versa, this is because LANs use a protocol that is different from the protocols used on WANs like the Internet.
Define these and consider where and why they are used. In particular, consider how routing is achieved across the Internet and how local area <B>Network</B>s are connected to the Internet via gateways.
Subnetting is used to divide a <B>Network</B> into smaller logical <B>Network</B>s, e.g a LAN within a WAN. By dividing the address the responsibility for maintaining the <B>Network</B> can be split between the WAN operator and the LAN operator.
A subnet mask is used to identify which bits in an IP address specify its subnet, and hence which addresses it can send packets directly to, not via a <B>Router</B>. 255.255.255.0 is the <B>Network</B> mask for the segment 192.168.1
To this webpage
To this webpage
AJAX is an acronym for Asynchronous JavaScript and XML, technologies that can be used on the client-side to create asynchronous web applications. With AJAX, web applications can send data to, and retrieve data from, a server asynchronously (in the background) without interfering with the display and behavior of the existing page. Examples of this might be receiving a new email in your web based mail client without having to refresh the page manually, another example is a breaking news article appearing on a news site without you having to refresh the page. Web 2.0 sites make heavy use of AJAX and data is usually retrieved using the XMLHttpRequest API.
You can learn more about how AJAX works over at w3schools.
A server-side script can make a webpage dynamic. This means that content is generated when the web browser request is received rather than being static and displaying one screen. The webpage can handle requests such as HTTP requests to do something useful with data that a user has inputted. 
HTML stands for HyperText Markup Language and is a way of displaying a webpage on a browser by using tags to create <B>Object</B>s on the screen. The <B>Object</B>s on the webpage can be styled using Cascading Style Sheets or adding styles directly to a tag. The most recent version of HTML is HTML5 which is coupled with CSS3. The difference with HTML5 and HTML4 is that HTML5 has more tags that can create more complex <B>Object</B>s like date pickers and placeholder text in input boxes. However not all web browsers support HTML5 and those that do, they don't support all of the new elements that are in HTML5. With HTML5 when you declare <!DOCTYPE> for the webpage to tell the web browser what you are using, you only have to write <!DOCTYPE html> rather than adding URLs to framesets in w3 or having to declare as PUBLIC. HTML5 has made life easier for web <B>Design</B>ers.
<html>
</html>
PHP is a "recursive" acronym that stands for PHP Hypertext Preprocessor. It is a server-script that is run each time the page is reloaded and can handle MySQL and is how most websites are created. PHP can output text to a webpage. PHP <B>Interpreter</B>s are run on the web server so all requests are handled by the web server and then outputted as text that a web browser can display. Variables are created using the $ symbol.
The post request is a HTTP request where a HTML form can 'post' data to a page that can process the data using the server-side scripts such as PHP or JavaScript. 
<?php
?>
<form <B>Method</B>="post" action="page.php">
</form>
'<B>Database</B> Management Systems (DBMS)' are systems that can be accessed by web server extensions. A well known DBMS is a MySQL <B>Database</B>.
$connect = mysqli_connect("localhost", "username", "password", "<B>Database</B>name");
Wireless <B>Network</B>s are convenient ways that modern technology uses to create <B>Network</B>s with low costs as there are almost no wires involved. Wireless access points (WAP) allow devices to connect to such <B>Network</B>s. the <B>Network</B> can continue to run as a normal <B>Network</B>. There are two types of wireless <B>Network</B> <B>Method</B>s that AQA have said you need to be aware of; Wi-Fi and Bluetooth. These are both radio-based protocols that are used to create <B>Network</B>s that users can transfer data over.
Wi-Fi (also written Wifi or WiFi) is a trademark name for a technology that allows devices to wirelessly access a local area <B>Network</B> as well as data transfer. The Wi-Fi Alliance defines Wi-Fi as any wireless local area <B>Network</B> (WLAN) products that use IEEE 802.11 standards. The IEEE is the Institute of Electrical and Electronics Engineers. Wi-Fi uses a radio wave frequency range of 2.4 GHz to 2.5 GHz and 4.9 GHz to 5.8 GHz although allowed channels vary between countries. In Europe only 5.240-5.700 GHz of the 5 GHz frequency band is usable.
Devices connect to a Wi-Fi <B>Network</B> by means of a wireless <B>Router</B> or 'hotspot' which usually has an approximate range of 20 metres indoors and greater range outdoors. Because wireless is always less secure than wired, Wi-Fi is usually considered less secure than ethernet connection. Wi-Fi can be encrypted using either WEP, WPA or WPA2.
Bluetooth is a trademark name for a wireless technology with very short range. It can be used for data and media transfer between devices. The range of the radio wave frequency is 2.4 GHz to 2.485 GHz. The small range of Bluetooth (approximately 5 metres) means that the <B>Network</B> is called a Personal Area <B>Network</B> (PAN). However it can also be categorised under a wireless local area <B>Network</B> (WLAN).
Produce a data model from the given data requirements for a simple scenario involving two or three entities.
Be able to normalise relations to Third Normal Form.
Explain the concept of a relational <B>Database</B>.
Define the terms:
Learn about <B>Structured Query Language (SQL)</B> 
Use SQL to retrieve, update, insert and delete data from several <B>Table</B>s of a relational <B>Database</B> (see Teacher Resource Bank)
Data Definition Language (DDL)
Explain the term DDL. Use DDL to define a <B>Database</B> (see Teacher Resource Bank for commands/statements).
An entity relationship diagram is used at the <B>Analysis</B> stage to help the analyst to model and represent the entities involved in the problem domain. These models can then be developed into <B>Design</B>s for <B>Table</B>s and relationships in a proposed <B>Database</B> system.
Each instance of an entity can have one, and only one, related instance of another entity.
Each instance of an entity can have any number of related instances of another entity, however those instances are only have one related instance of the first entity.
Each instance of an entity can have any number of related instances of another entity, and each of those instances can have many related instances of the first entity. This is to be avoided within proper <B>Database</B> <B>Design</B>. 
Referential integrity means that for each new <B>Record</B> added to an entity there must be a related <B>Field</B> added to, or already existing in all related entities.
Tuple sometimes called a <B>Record</B>, a set of <B>Attribute</B> values, (a row of a <B>Table</B>)
<B>Attribute</B> a named column in a <B>Table</B>
<B>Primary Key</B> a <B>Attribute</B> that uniquely identifies a tuple
Relation a <B>Table</B>
Relational <B>Database</B> a collection of <B>Table</B>s
Composite Key where a collection of <B>Attribute</B>s uniquely identify a tuple rather than just one
<B>Foreign Key</B> An <B>Attribute</B> in one <B>Table</B> that is a <B>Primary Key</B> in another <B>Table</B>, often there to reference to said <B>Table</B> later
All of the data is held within a single <B>Table</B>. This is to be avoided within proper <B>Database</B> <B>Design</B>.
A <B>Database</B> is considered to be in first normal form if it passes the atomic data test, which means that all of the <B>Table</B>s in the <B>Database</B> are indexed with <B>Primary Key</B>s, and that the <B>Table</B>s do not contain any repeating groups of <B>Attribute</B>s.
To reach second normal form, a <B>Database</B> must already be in first normal form. In addition to that, the <B>Table</B>s must pass the partial key dependency test, which means that all of the <B>Attribute</B>s within a <B>Table</B> are related to the <B>Table</B>'s <B>Primary Key</B>.
To reach third normal form, a <B>Database</B> must already be in second normal form. In addition to that, the <B>Table</B>s must pass the non key dependency test, which means that only the <B>Attribute</B>s within a <B>Table</B> that have a direct relationship with the <B>Primary Key</B>.
While there are further levels of normalisation, these are used only in very complex and specialised systems. Knowledge of them is not required for the course.
Sometimes you might fall out with friends on Facebook so that you don't even want them to see your restricted page. You'd want to delete your relationship (it's actually likely that Facebook retains the connection but flags it as 'deleted', that isn't important here). The police might also find that a crook is in fact innocent and then want to delete their criminal <B>Record</B>. We need a DELETE command to do all of these things, to permanently delete <B>Record</B>s from <B>Database</B>s. Imagine that we find out that Geoff was framed and he is completely innocent:
DELETE FROM crooks 
WHERE name = 'Geoff'
DELETE FROM crooks
WHERE numScars >= 4 AND gender = 'female'
DELETE FROM crooks
WHERE DoB >= 1999
Data Definition Language (DDL) is a way to adjust the structure of a <B>Database</B>. You might have created <B>Database</B>s in the past using a GUI such as Access or even MySQL. DDL allows you to create <B>Database</B>s from pure code including the ability to:
You need to know what they all do (as listed above), though you only need to know how to implement the CREATE <B>Table</B> command. Let's look at how we could have made the crooks <B>Table</B> above:
CREATE <B>Table</B> crooks
ID <B>Integer</B> <B>Primary Key</B>,
NAME VARCHAR(16),
GENDER VARCHAR(6),
DOB DATE,
TOWN VARCHAR(20),
NUMSCARS <B>Integer</B>
An ALTER statement in SQL changes the properties of a <B>Table</B> in a relational <B>Database</B> without the need to access the <B>Table</B> manually.
ALTER <B>Table</B> crooks ADD convictions <B>Integer</B>
ALTER <B>Table</B> crooks DROP COLUMN convictions
Dropping a <B>Table</B> is like dropping a nuclear bomb. It is irreversible and is frowned upon in modern society.
DROP <B>Table</B> crooks
By running this line of code, the <B>Table</B> "crooks" will be removed from the <B>Database</B> with no chance of it being recovered unless backups have been previously made.
<B>Primary Key</B>s can be set after <B>Table</B> creation via the alter statement.
ALTER <B>Table</B> Persons
ADD <B>Primary Key</B> (id)
<B>Primary Key</B>s can also be set during <B>Table</B> creation
CREATE <B>Table</B> users
user_id int NOT NULL,
username varchar(255) NOT NULL,
password varchar(255) NOT NULL,
Address varchar(255),
<B>Primary Key</B> (user_id)
To set a <B>Primary Key</B> made up of two columns during <B>Table</B> creation you could do something such as this
CREATE <B>Table</B> users
user_id int NOT NULL,
username varchar(255) NOT NULL,
password varchar(255) NOT NULL,
Address varchar(255),
CONSTRAINT pk_UserId <B>Primary Key</B> (user_id,username)
Where the constraint name would be UserId and the <B>Table</B>'s <B>Primary Key</B> would be made up of the user_id and the username columns.
This could also be done after <B>Table</B> creation:
ALTER <B>Table</B> users
ADD CONSTRAINT pk_UserID <B>Primary Key</B> (user_id,username)
To set a <B>Foreign Key</B> or group of <B>Foreign Key</B>s during <B>Table</B> creation, you could do something like this:
CREATE <B>Table</B> FoodProduct
product_id int NOT NULL,
product_name varchar(255) NOT NULL,
ingredients varchar(1023) NOT NULL,
allergen varchar(511) NOT NULL
Where the <B>Primary Key</B> is "product_id" and all the other <B>Attribute</B>s are declared within the ( ) structure and are followed by a comma.
In our <B>Database</B> we will store information about 'things', or more technically, entities. To store data about things we use <B>Table</B>s. Each <B>Table</B> will store data about a particular thing. Let's look at two examples:
And looking at another example that you might be familiar with, a social <B>Network</B>ing site:
Now we have gotten to grips with recognising the main <B>Table</B>s we need to store in each <B>Database</B>, we need to recognise what <B>Field</B>s of data will be stored in each of these <B>Table</B>s. The data items to be stored are called the <B>Attribute</B>s. Taking the Criminal <B>Database</B> as an example:
Note that for each of the <B>Attribute</B>s we are listing the <B>Attribute</B> name and the <B>Field</B> type, when building a <B>Database</B> it is very important that we get the correct <B>Field</B> type to prevent errors when entering data. Let's take a look at another example from the criminals <B>Database</B>
We might also want to add new things to our <B>Database</B>, for example when we are adding new Criminal <B>Record</B>s or a new friendship link on Facebook. To add new <B>Record</B>s we use the INSERT command with values of the <B>Field</B>s we want to insert:
INSERT INTO crooks
VALUES (1234,'Julie', 'female','12/12/1994','Little Maplestead',67)
Sometimes we might not want to insert all the <B>Field</B>s, some of them might not be compulsory:
INSERT INTO crooks (ID, name, town) --specific <B>Field</B>s to insert into
VALUES (999, 'Frederick', 'Shotley')
Using the above data set, write an INSERT statement to create the following person:
Be careful, you must insert the <B>Field</B>s in the order they are specified in the <B>Table</B>
INSERT INTO crooks
VALUES (12, 'Gerry', 'male', '13/12/1987', 'Keele', 9)
Alternatively you could use the <B>Field</B> headings, but this is a little cumbersome:
INSERT INTO crooks (name, town, gender, numScars, ID, DoB)
VALUES ('Gerry', 'Keele', 'male', 9, 12, '13/12/1987')
Using the above data set, write an INSERT statement to create the following person:
INSERT INTO crooks (name, gender, numScars)
VALUES ('Kelly-Ann', 'female', 1)
You need to know three stages of Normalisation, a basic outline of the three stages is shown in the image below.
Normalisation is used to keep a <B>Database</B> as efficient as it can possibly be without any unnecessary duplication and no redundant data. When working with large volumes of data this can cause a lot of space and time to be saved as it's less data to process.
If a <B>Table</B> has a <B>Primary Key</B> it is said to be in First Normal form if the <B>Table</B> does not have repeating groups of <B>Attribute</B>s. All <B>Attribute</B>s within the <B>Table</B> need to be dependent only on the <B>Primary Key</B>.
For a <B>Table</B> to be in Second Normal form it must first be in First Normal (1NF) Form and then contain no data that is dependent on only part of the <B>Primary Key</B>.
For a <B>Table</B> to be in Third Normal Form(3NF) it must be in Second Normal form and contain No data that is not dependent on the <B>Primary Key</B>
e.g. (Remove columns that are not dependent upon the <B>Primary Key</B>.)
To illustrate this let's look at a product ordering system. Initially our <B>Database</B> looks like this: 
This is known as un-normalised form, UNF or 0NF.
To change this into 1NF we need to take out duplicated data. To do this we create a new <B>Table</B> to hold the products and move the product data to this <B>Table</B> along with the <B>Primary Key</B> which is the OrderNumber.
Every row is not now unique so we create a composite <B>Primary Key</B>, made up of the OrderNumber column and the ProductID column.
To put our <B>Table</B> into 2NF we need to separate out any data that is only dependent on one part of the <B>Primary Key</B>. This would be the ProductName and PriceEach as these only depend on the ProductID and not on the OrderNumber.
We now have two <B>Table</B>s as follows: 
Finally, to reach 3NF, we must remove non-key <B>Attribute</B>s with depend on other non-key <B>Attribute</B>s in the same <B>Table</B>. We can see that in the original <B>Table</B>, there are <B>Attribute</B>s for the customer which depend on the CustomerID <B>Attribute</B>, where CustomerName and CustomerAddress depend on CustomerID despite CustomerID not being a key in the <B>Table</B>. Therefore, we must separate out our customer details into a separate <B>Table</B> which has the <B>Primary Key</B> of CustomerID. We can then place CustomerID as a <B>Foreign Key</B> in the Order <B>Table</B>.
Our final <B>Table</B>s in third normal form are as follows:
 
<B>Database</B>s are very powerful tools that allow us to search and sort data at incredible speeds. An essential feature of a <B>Database</B> is making each <B>Record</B> unique. To make them unique we using <B>Primary Key</B>s.
Let's look at an example in the Criminal <B>Table</B>:
Which of these data items are unique?
There is a short cut to writing out <B>Database</B> <B>Table</B> <B>Design</B>s, where the underlined <B>Attribute</B> is the <B>Primary Key</B>. Note that <B>Primary Key</B>s are normally written first.
 Car(Registration number, Colour, Number of doors, Convertible)
NOT mobile number as they might share a phone with someone else.
However, things may not always be so clearly cut. Take this a <B>Table</B> of football players for example:
Which of these would be the <B>Primary Key</B>?
So what do we do? Before we make our <B>Database</B> <B>Table</B>s it's best to go through this process and we come to realise that we need to introduce another <B>Attribute</B> that is unique for each player. We might even invent one, a playerID:
Another way of solving these problems is to try and find a combination of <B>Attribute</B>s that together are unique. This is called a composite key. Take a look at this example for houses:
We could make a <B>Primary Key</B> up, but if you look carefully, we can use a combination of <B>Attribute</B>s. The house number and the road name combined seem to be unique. You can't have two 45 Belmont Close can you?.
Does that sound ok? What about if we were storing data on all the towns in the country and there was a 5 London Road in Manchester and a 5 London Road in Winchester. This would mean that the combination was not unique. We might try using the house number and post code instead, and this combination is always unqiue, this is our composite key:
Receipt(CustomerID, DateTime, Total, StaffID)
Match(TeamA, TeamB, Date, TeamAScore, TeamBScore, RefID)
Phone(ModelID, Colour, Weight, Internet)
You might argue that if this was for a particular instance of a phone instead of for a model of phone you'd need to introduce a unique value through serial number or the like
There aren't enough <B>Field</B>s here for us to find a unique one or combination. We could have two ginger cats weighing 1 kg with three legs called Phil. We therefore need to introduce a new unique value, CatID
Cat(CatID, Colour, Weight, NumberofLegs, Name)
The SELECT statement allows you to ask the <B>Database</B> a question (Query it), and specify what data it returns. We might want to ask something like "Tell me the name and ages of all the crooks". Of course this wouldn't work, so we need to put this into a language that a computer can understand: Structured Query Language or SQL for short:
This would return the following:
But suppose we wanted to filter these results, for instance: "Tell me the ID, name and ages of all the crooks who are male and come from Snape". We need to use another statement, the WHERE clause, allowing us to give the query some criteria (or options):
This would return the following:
Say the police knew that a crime had been committed by a heavily scarred woman (4+ scars), they want a list of all the scarred women:
This would return:
However, the police want to quickly sort through and see who is the most heavily scarred. We are going to use an ORDER command:
ORDER BY numScars sorts your returned data into DESCending (big to small) or ASCending (small to big) order
You can build even more complex SQL WHERE statements by combining ANDs and ORs. Maybe the police should have said that a criminal is either a woman, OR a man AND from Newcastle.
We spoke earlier about how <B>Database</B>s are great because they allow you to link <B>Table</B>s together and perform complex searches on linked data. So far we have only looked at searching one <B>Table</B>.
When you use a social <B>Network</B> such as Facebook you can often see a list of all your friends in the side bar as well as details from your <B>Record</B> such as your name and place of work. How did they find this data? They would have searched for all the relationships that involve your ID, returning the names of people involved AND returned values such as job title from your personal <B>Record</B>. This looks like using two queries:
--return relationship information—return personal <B>Record</B> information
It would be possible to do this, but it's far easier to use one query for both things.
Take a look at this example. The police want to know the name and town of a criminal (ID = 45) along with all the descriptions of crimes they have performed:
<B>Structured Query Language (SQL)</B> is used to perform function on a <B>Database</B>. There are four main functions that you should be familiar with: SELECT, INSERT, UPDATE, DELETE
To help us understand how these things work we are going to use a test data set. <B>Database</B>s are used in all areas of the computer industry, but for the moment we are going to use a dataset that keeps track of crooks in England, noting, names, gender, date of birth, towns and numbers of scars. Take a look at the crooks data <B>Table</B> below:
To select all the items from this <B>Table</B> we can use:
SELECT * FROM crooks
This would display all the results. But what if we just want to display the names and number of scars of the female crooks?
SELECT name, numScars FROM crooks
WHERE gender = 'female'
The result of this query would be:
You can practice your SQL skills using Access, MySQL (as part of XAMPP), MSSQL, SQLite etc. If you don't have this software easily available you might want to take a look at the SQLZoo site, which allows you to hone your skills in an online environment where you don't have to worry about accidentally deleting all your <B>Record</B>s! For the exam and probably for your projects you need to be very good at SQL, so get practicing.
http://filestore.aqa.org.uk/subjects/AQA-2510-W-TRB-COMP3QDUSQL.PDF
Badly formed SQL can offer crackers a way to read and edit data on your server through something called an SQL Injection attack. This involves an SQL statement in the code behind a web page being made up of one or more variables defined by user input. For example when you are searching for a users login information on an online shopping catalogue, the code behind the items being returned might be like this:
This may look absolutely fine if the user inputs codice_2 or something similar:
codice_3
But if the user is a criminal and guesses what your SQL statement looks like, they can "inject" some malicious SQL. For example instead of inserting codice_2, they might insert codice_5 instead. This would make make the server list every row as 1 always equals 1. The attacker now has access to all of your customers details which may include addresses and payment details.
Luckily for numeric values this is very easy to fix by using validation.
This means that the user input cannot contain anything that the SQL server would interpret as execu<B>Table</B> code. Stupidly, even big firms still suffer from SQL injections. 
For example when you are searching for a users name and password on an online banking site, the code behind the items being returned might be like this:
Here the attacker could enter codice_8 for the password and access to everyone accounts as the sql would be codice_9. 
However a better solution to this is to used parameterised queries. With parameterised queries the SQL is sent to the <B>Database</B> separately form the SQL and is added into the query after the <B>Database</B> has interpreted the instructions so cannot contain execu<B>Table</B> code.
For example when you are searching for an users name and password on an online banking site, the code behind the items being returned might be like this:
Here if the attacker entered codice_11 the <B>Database</B> would search for a user with name codice_12 and password codice_11
Make sure when <B>Design</B>ing your code you don't fall victim to this.
No system should ever be considered secure, however well you think you have coded it. One thing that people really don't like having criminals gain access to are passwords. You might be tempted to make a <B>Database</B> like this:
Let's ignore the fact that the password is rubbish, it is never a good idea to leave passwords as plain text. If the <B>Database</B> was cracked then the cracker would have access to all the plain text passwords and could use these to crack into other systems (people tend to use the same password in multiple locations). You should instead use a hash of the password through a system such as sha2. For more information about hashing see Hashing. This means that if the attacker has the hash it would take too long to work out the password to use it in most circumstances. 
However if you are planning to hack a large number of hashed passwords you can use a rainbow <B>Table</B> which is a precomputed hash <B>Table</B> of the passwords. These can be generated relatively quickly for short length passwords. Many are available online for common <B>Hash Function</B>s to certain lengths. This can be prevented by using salting. Salting is the process of adding a short random <B>String</B> on the front of the password and then storing it alongside the password. For example:
This may seem to not improve security but effectively prevents the use of rainbow <B>Table</B>s as you would have to construct the <B>Table</B> for each salt. 
<B>Database</B> aren't always perfect and there may be times that we want to change the data inside our <B>Database</B>. For example in Facebook if someone is annoying you and you limit their access to your profile, you'd update the access <B>Field</B> from 'normal' to 'restricted'. Or if one of our crooks gets an additional scar you'd have to update the numScars <B>Field</B>. Let's take a look at that example, where our crook Peter gains a scar on his right cheek. This was his initial state:
But we have a problem here, this statement updates all <B>Record</B>s to numScars = 8. This means that every crook will now have 8 scars!
We need to specify which crooks we want to update by using a WHERE clause, you saw it earlier in the SELECT example.
UPDATE crooks
SET numScars = 8
WHERE name = "Peter" --only updates those people who are called Peter
UPDATE crooks
SET DoB = '17/12/1939'
WHERE name = 'Geoff'
UPDATE crooks
SET town = 'Canary Wharf'
UPDATE crooks
SET DoB = '16/01/1984' ---be careful with dates, they might be using American format
WHERE name = 'Sheila'
AND gender = 'Female'
A number which you can count to using your fingers and toes
Understand that the role of the operating system is to hide the complexities of the hardware from the user. In addition, it manages the hardware resources in order to provide for an orderly and controlled allocation of the processors, memories and I/O devices among the various processes competing for them.
Define interactive, real time and <B>Network</B> operating systems and explain their operational <B>Character</B>istics.
Compare and contrast device operating systems (smartphone, PDA), embedded operating systems (car, aircraft), desktop operating systems, server operating systems.
There are several different operating system <B>Class</B>ifications you need to know. You need to be able to compare and contrast them, as well as to identify the correct system required for a given problem or situation.
In an interactive operating system, the user interacts directly with the operating system to supply commands and data as the application program executes and the user receives the results of processing immediately. The user is in direct two way communication with the computer.
Example: ATM.
A real time operating system will give guaranteed feedback within a predefined set period of time, therefore taking away the unpredictability of the operation being carried out. This allows for the system to be mathematically modelled to allow the time needed for operations to be carried out to be determined, even under the predicted maximum stress levels. It allows deadlines to be set on operations being carried so as to provide a "best of" result within the time period able to be given for an operation.
Example: If a real time operating system was used to control a plane's rudders (via a RT application) it would need to set deadlines on the calculations used to calculate rudder movements. Without these deadlines a calculations results may be returned too late and cause the plane to crash. 
One very important factor to remember about real time operating systems and applications is that "the right answer late is wrong". After all what is the point in having the correct answer to a planes rudder calculation if it comes too late and the plane has already crashed because the rudder angle was not changed earlier.
A layer of software is added to the operating system of a computer connected to the <B>Network</B>. This layer intercepts commands that reference resources elsewhere on the <B>Network</B>, e.g. a file server, then redirects the request to the remote resource in a manner completely transparent to the user.
Not all computers have operating systems. If a computer only needs to perform one task, then this can be done most efficiently with just one firmware program running all the time. It would be overkill to add an operating system, adding complexity where it isn't needed and increasing production costs.
Devices that carry out more than one task benefit from an operating system. Some of the benefits of an operating system are:
Mobile devices present their own limitations for the types of operating systems they can run. They have to be built with a consideration for the limited memory or processing power and also for the mobility of the device. They also need to be able to manage a <B>Network</B> connection, predictive text keyboard, smaller display, phone dialler and limited battery capacity. They may include embedded and real-time elements as well.
Your standard mobile phone (i.e. not a smartphone) will run apps in what is known as a sandbox. A sandbox provides strictly controlled resources for a guest program to operate in where <B>Network</B> access and the ability to read from the file system are usually not allowed.
Smartphones are able to run a complete operating system and provide a standardised interface and platform for app developers. The operating system must be able to support things like email and internet. We tend to take these things for granted on a phone these days, but smartphones today have more processing power than desktop computers 10 years ago.
Many pieces of everyday machinery contain computer systems, for example cars, washing machines and telephones. These systems are called embedded systems. An embedded system has a limited or non-existent user interface and is <B>Design</B>ed to operate completely, or mostly, independently from within other machinery. Embedded systems also have limited memory capacity. Operating systems for embedded systems are <B>Design</B>ed to work within the constraints of limited memory size and limited processing power.
All desktop computers have operating systems, the most common of these are Windows, Mac OS, and GNU/Linux. Desktop operating systems have to be able to support a wide range of tasks and manage many types of hardware and software. In order to do this they require large amounts of memory, multiple processors and large amounts of disk storage capacity. They also have the ability to read and write to optical disks and <B>Flash Memory</B> drives. Desktop operating systems also require real-time components for multimedia applications and are able to support a broad range of <B>Network</B> protocols.
Desktop operating systems are written in a layered or modular way so that they can be updated easily. They support complicated GUIs and because of this they can have slow load times due to a large memory footprint. Desktop operating systems provide a <B>Virtual Machine</B> so that users do not have to interact directly with the hardware. In a client-server system the client computers usually use a desktop operating system.
Server Operating System is an operating system that provides its <B>Network</B>ed clients some specific services.
Server Operating system doesn't have GUI because:
Client-server System is a system where services are requested by clients and these services are provided by other computers.
Multiuser operating system is the one in which more than one user can use the same system at the same time with each user interacting with the computer via a terminal. It is also called time sharing system. Example-windows, Linux, Mac, etc.
The <B>Virtual Machine</B> is presented by the Operating System to the user, hiding all the complexities of the hardware behind layers of OS software. The final layers of the operating system are the user Interface and the Application programming interface, which calls on the services of the Operating System.
Here are the layers of the OS which hide all complexities from the user, from the Hardware to the final layers of the User Interface and the API:
Not all machines should be expected to have exactly the same setup. The Application Programming Interface (API) makes it possible for the same piece of program to be used on different computers. It is the layer of the software that allows the application programs to call on the services of the OS.
Being the most fundamental of all system programs, Operating Systems are trusted with the job of controlling and sorting through the hardware, and this includes all the main components of the computer. To ensure that there is little confusion, the OS programs managing the key resources are giving relatively simple names depending on the resource they manage:
"Remember: Data is stored information, but Storage holds the information."
The operating system acts as an interface between the hardware and the programs requesting I/O. It is the most fundamental of all system software programs.
Responsibilities of the OS include:
There are two types of software:
The User Interface is the interaction between the User and the Machine, letting the user send commands with the expected results. Two forms of the Interface User are the Command Line Interface and the Graphical User interface.
The more primitive User Interface, the user would type in a line of command or a single word followed by pressing the Return key. The computer then willingly follows that exact command, informing the user of its progress. For example, the user may want to type in the command to print a document. The user will type the statement "Print", then the name of the Printer and finally the name of the file to be printed:
Pros
Cons
The GUI is made up of boxes or Windows which will display as an array of usually colourful tiny blocks called Pixels, and a group of pixels is a called an image. The maximum number of colours that can be used are called the Graphics. This User interface will display a Main window (also known as the Desktop) which then can be accompanied by more windows. GUI is the most common of the User interfaces, and the most user friendly, made up of event driven software. This type of UI is best for users lacking in computer coding skills, since GUI only needs you to make use of the mouse's events. There are still some people who prefer the use of a Command Line Interface to a Graphical User Interface.
Pros
Cons
(Note that you give the full name of both)
Sending text commands over the internet is very fast as very little data needs to be sent and received. Using a GUI would take up a lot of bandwidth.
Additionally, some commands might be faster to perform using a CLI than a GUI.
You can work out the time that an <B>Algorithm</B> takes to run by timing it:
Dim timer As New Stopwatch()
timer.Start()
For x = 1 to 1000000000
Next
timer.Stop()
' Get the elapsed time as a TimeSpan value. 
Dim el As TimeSpan = stopWatch.Elapsed
' Format and display the TimeSpan value. 
Dim formattedTime As <B>String</B> = <B>String</B>.Format("{0}:{1}:{2}.{3}", el.Hours, el.Minutes, el.Seconds, el.Milliseconds / 10)
Console.WriteLine( "Time Elapsed: " + formattedTime)
However, this isn't always sui<B>Table</B>. What happens if you run some code on a 33 MHz processor, and some code on a 3.4 GHz processor. Timing a function tells you a lot about the speed of a computer and very little about the speed of an <B>Algorithm</B>.
dim N as <B>Integer</B> = 7483647
dim sum as double= 0
for i = 1 to N
loop
console.writeline(sum)
optimised version
dim N as <B>Integer</B> = 7483647
dim sum as double = N * (1 + N) / 2
console.writeline(sum)
Finite State Machines in unit 3 are exactly alike as you have learnt from unit 1. They are just slightly more complex with a few more states. To recap your memory, visit the unit 1 page here.
Reverse Polish notation is an alternative way of writing mathematical expressions.
You will already be familiar with infix expressions where the operator is between two operands. E.g. 4 + 5 where the numbers 4 and 5 are the operands and + is the operator. The operators you will need to be familiar with are + (addition), - (subtraction), * (multiplication), / (division) and ↑(exponent).
When we write expressions in infix notation it can be confusing as to which operation should be performed first. For example, in the expression 4 + 5 * 6 we only know that the multiplication operation should be performed first because we have learnt the BIDMAS (or equivalent) rules. A computer does not automatically know this and would have to be programmed with the rules in order to carry out these operations correctly.
RPN is a way of getting round this and provides a way to write expressions without the need for brackets. This makes it much easier for a computer to evaluate the expressions. RPN places the operator after the operands it is to operate on. E.g. 54 + 20 would be written as 54 20 + in RPN.
Q: Write the infix expression "x + y" in Reverse Polish notation<br>
A: "x y +"
Q: Write the infix expression "(x - y)*7" in RPN<br>
A: "x y - 7 *"
Q: Write the RPN expression "x 2 ↑" in infix form<br>
A: "x"
Q: Write the RPN expression "x y + x y - *" in infix form<br>
A: "(x + y)*(x - y)"
Understand the need for and <B>Character</B>istics of a variety of 
programming paradigms.
<B>Object</B>-oriented programming
Recursive Techniques
Abstract Data Types / Data Structures
Be familiar with the concept of a list, a tree, a queue, a stack, a pointer and be familiar with the data structures and <B>Method</B>s for representing these when a programming language does not support these structures as built-in types.
Distinguish between static and dynamic structures and compare their uses.
Use of free memory, the heap and pointers
Be aware of a graph as a data structure to represent more complex relationships. Explain the terms graph, labelled graph, unlabelled graph, vertex, edge, digraph and arc. Know how an adjacency matrix and an <B>Adjacency List</B> may be used to represent a graph.
A tree is a connected undirected graph with no cycles. A rooted tree is a tree in which one vertex has been <B>Design</B>ed as the root and every edge is directed away from the root.
Be familiar with a simulation as a computer program or <B>Network</B> of computers that attempts to simulate a model of a particular system.
Know that computer simulations can represent real and imaginary situations. Know that simulations allow users to study or try things that would be difficult or impossible to do in real life. Be familiar with simple simulation techniques involving queues.
= Standard <B>Algorithm</B>s =
You should be able to recognise and use trace <B>Table</B>s on code that does the following:
A binary tree can be defined recursively as
Node - a part of the tree holding some data
Branches - connections between nodes
Root - the node that has no parent, i.e., is at the top of the tree
Leaf - a node that has no subtrees, i.e., is at the bottom of the tree
Parent - a node that is connected to the root of a subtree
Level - all the nodes that are at the same depth in the tree, i.e., there are the same number of branches to get 'back to' the root, are at the same level. The root is at level 0
Child - the root of a subtree that is connected 'upwards' to its parent
Sibling - the next node at the same level
Thinking of any particular binary tree, how many searches will it take to find a certain item?
Thinking of any particular binary tree, how many searches will it take to find a certain item (in the best and worst cases) if the tree has "n" nodes?
Does the number of searches (in both cases) differ depending on whether the item is in the tree or not?
Does the number of searches (in both cases) depend on the structure of the tree?
What is the worst case?
What is the best case?
A binary tree has "n" items in it, and takes "s" searches (in the worst case) to find an item. If another n items are added to the tree how many searches will it need to find an item (in the worst case) if the tree is perfectly balanced, i.e., each node (apart from the leaf nodes) has two subtrees.
A perfectly balanced binary tree is one where every node, has 0 or 2 subtrees. The leaves have 0 subtrees, and the 'internal' nodes each have 2.
Queue - FIFO
Stack - LIFO
A graph traversal <B>Algorithm</B> aims to 'explore' every vertex.
If the <B>Algorithm</B> is searching for a particular vertex (eg. the exit to a maze) then it considers whether each vertex is the one it is looking for.
After <B>Evaluation</B>, if it has not found what it was looking for, the <B>Algorithm</B> adds every vertex adjacent to the current one onto a 'list' of vertices to visit next.
The type of structure used to store this 'list' of vertices determines how the <B>Algorithm</B> moves through the graph.
These <B>Algorithm</B>s also have to keep track of the state of each vertex:
Simulations model real and imaginary situations. They may be used to test scenarios that wouldn't be feasible in real life for cost or time reasons. Many computer games could be considered simulations.
You should know how to simulate simple queues.
In Computer Science an abstract data type (ADT) is a mathematical model for a certain data types or structures. This doesn't mean that the ADTs can't be programmed, but that we must first understand them mathematically before we can implement them. ADTs are generally complex things that you have functions and procedures to interface with.
Several of the ADTs we are going to look at will be 'dynamic', this means that they can change in size at run time, taking up more or less memory depending on the what is needed
<B>Binary Search</B> locates the position of an item in a sorted array.
A quick way to remember how this search works is to imagine searching for words beginning with 'S' in a dictionary. You know that the dictionary is in alphabetical order but you don't yet know if there are any words beginning with 'S' in it, nor do you know where the 'S' section begins and ends.
how efficient is it? how many searches for x number of items? what is the equation? give an example. Why is it better than a <B>Linear Search</B>. Can you use it on ordered lists or unordered lists?
How to work out the maximum number of searches (n) on a x sized array:
For example, if we had a 3 item array
"Note:" This code assumes 1-based array <B>Indexing</B>. For languages that use 0-based <B>Indexing</B> (most modern languages), "min" and "max" should be initialized to 0 and "N"-1.
"Note 2:" The code above does not return a result, nor indicates whether the element was found or not.
"Note 3:" The code above will not work correctly for empty arrays, because it attempts to access an element before checking to see if codice_1.
Given a 256 item sorted list, what is the maximum number of searches needed to find an item?
Given a 1000 item sorted list, what is the maximum number of searches needed to find an item?
A list is a number of items in an ordered or unordered structure. A list can be used for a numerous number of things like storing items or deleting and adding items. But for the programmer to perform the different tasks for the list, the program must have enough memory to keep up with changes done to the list. There are different sort of lists which are linear list and linked list. Also, the list can be referred to as an abstract data type.
Linear lists can comprise of almost anything. Think of the lists that you use in every day life: Shopping lists, homework lists, lists of hottest celebrities. Below are three separate example lists from a pad of paper made to write shopping lists:
You can see above that different lists take up different amounts of space.
To save paper what would be needed would be a sheet that would expand when more items were needed to be written down, and contract when less items needed to be written down. This might sound trivial but this is a real computer science issue, the following code declares a list of enemies killed in a shooting game
dim killedList as <B>String</B>(11)
If the player wasn't very good and only killed one other player, then the list would be sitting there with 11 empty spaces, wasting all that space. On the other hand, if the player was incredibly good and they killed hundreds if not thousands of enemies, the list would only show the first 12. What is needed is a list that can grow and shrink, so that we only use the space that we need to. What is needed is a Dynamic Data Type, a data type that changes in size at run time.
Criticisms of a linear list:
A linked list is a solution to the problems inherent to linear lists. For the exam you should know:
Linked list over linear list/Benefits of a linked list:
The concept of a linked list can be explained by a simple analogy to real-world post office boxes. Suppose Alice is a spy who wishes to give a codebook to Bob by putting it in a post office box and then giving him the key. However, the book is too thick to fit in a single post office box, so instead she divides the book into two halves and purchases two post office boxes. In the first box, she puts the first half of the book and a key to the second box, and in the second box she puts the second half of the book. She then gives Bob a key to the first box.
Now imagine if Alice's code book was even bigger. It won't make any difference to her system, she just adds another key
Now imagine that Alice is the world's chief code breaker with an enormous code book, it doesn't matter how big the book is Alice can still apply her technique, ripping the book into four parts. But what about someone else already using box 104? Well because Alice includes a key to the next box, it doesn't have to use consecutive boxes, it could skip one, or twenty if need be.
No matter how large the book is, this scheme can be extended to any number of boxes by always putting the key to next box in the previous box.
In this analogy, the boxes correspond to "elements", the keys correspond to "pointers", and the book itself is the "data". The key given to Bob is the "head" pointer, while those stored in the boxes are "next" pointers. This is how a linked list works.
We hopefully understand the principles behind the Linked List abstract data type, we now need to know how this abstract data type is stored in a computer. When storing a linked list on a computer you must use:
There are two ways to represent a Linked List using node and pointer notation:
Or using an address <B>Table</B> (both lists are the same):
The example above contains 5 nodes, but only 4 of them are in the linked list. Let's follow the points and see what data we have:
If you look closely you'll notice that address 4 is never linked, once we get to node 3, Bures, the pointer points to null. This means the end of the list.
Let's take a look at a more complex example
Following the pointers for this we get:
As you can see it doesn't really matter what order the items are in terms of memory address, it's all about the pointers to tell us the order of the data and what data is in the linked list. Also the use of the head pointer means that the data might not start where you expect!
What does the following linked list store:
Insert the correct pointers into this linked list (remember the Head Pointer!), to create the following list:
Give a node pointer diagram for the following:
Green[*]->Red[*]->Purple[*]->Yellow[*]->null
To add another item to the end of a linked list is really quite simple, all you do is place the new item in some spare memory (taken from the heap) and adjust the last pointer in the current list from pointing to null, to pointing to the new item. Let us take a look at an example of inserting 'Chappel' into a list of settlements in East Anglia:
This seems simple enough, but what if we want to insert something in the middle of a list. Let's look what would happen for a linear list so we can see how amazing linked lists truly are. Let's insert 'Jadd' into a list of names:
It took 3 moves before we could insert our new value. Imagine what would happen if we were insert a value in the middle of a linear list of 1000 elements, it would take 500 move downs before we could insert a new item. What a terrible use of processing time!
With linked lists things are much easier. Because we use pointers all we need to do is to change the pointers around to quickly insert a new element, take a look at the same example of adding 'Jadd' to a linked list of names.
Notice that we didn't 'move' anything, we just changed the pointers. This might not seem to be much faster than the linear list, but imagine you were dealing with a list of 1000 items, you'd only have to change 3 pointers instead of moving 500 nodes. It's a much faster <B>Method</B>.
You can also see this visually in this example of inserting 37 into a list of 12 and 99:
Show the resulting linked list for inserting J into the following alphabetised linked list:
Show the resulting linked list for inserting 78 into the following ordered linked list:
You should now be familiar with how linked lists work and how to insert elements into linked lists, but what 
To again prove the point that linked lists are amazing, take a look at this example where we are deleting Ethelbert from our ordered list of people. We can't just take them out as that would leave a gaping hole in our list, we need to shift everything up
It took 4 moves before we could consider the item deleted and list re-ordered. Imagine what would happen if we were delete a value in the middle of a linear list of 1000 elements, it would take 500 moves up before we could consider the item deleted and list re-ordered.(Again) What a terrible use of processing time!
With linked lists things are much easier. Because we use pointers all we need to do is to change the pointers around to 'skip over' the deleted node.
Take a look at the same example of adding 'Jadd' to a linked list of names.
Notice that we didn't need to 'move' anything, we just changed a single pointer. but imagine you were dealing with a list of 1000 items, you'd only have to change 1 pointer instead of moving 500 nodes. It's a much, much faster <B>Method</B>.
Show the pointers on the following data after removing P
Show the following <B>Table</B> after removing L and G, in that order:
Show the following list after inserting 23 then removing 14
When you delete an item from a linked list where does it go?
Describe the steps to delete an item from a list
We know that linked lists allow for dynamic data structures, structures that change size at run time. This means that if we want to make a data structure that can shrink and grow in size at run time, it is a good idea to use a linked list. Examples include:
You might read in the news about the police confiscating criminals computers to search for data. You might also think that the criminals must be pretty stupid to not delete all their incriminating data before they are caught. Well it's not as simple as that. The way that a computer file system works is very similar to the linked lists you have read about above. When you add a folder or a file, it doesn't have to sit next to all the other data in memory, using pointers the data can be scattered throughout memory. And most importantly, when you 'delete' something, you only delete the pointer to it. It is still there in memory, just with nothing pointing to it. Take a look at the following, a hard disk of a criminal:
On hearing the police downstairs knocking on the door, the criminal runs to his computer and deletes the 'Stolen Documents' folder.
But all that is happening in the operating system is the equivalent of the following (the data structure is a lot more complicated in reality):
The data is still there, all that has been done by deleting the data is to change the pointers. With special software you can restore it, catching the crook.
The best way to 'delete' data is to shred your hard disk, and many firms and governmental organisations will have metal shredders for this very purpose.
We have mentioned that linked lists are dynamic data types, allowing memory used to change at run time. To achieve this we use the Heap:
But what happens when we delete something, you have seen the pointers changing, but you haven't seen the space being reused
How do you maintain the free space?
Remember how pointers work and how you know that you have reached the end of the list.
Easy to sort (just swap pointers)
Easy to insert/delete items (just change the pointers)
A pointer is a data type whose value refers directly to (or "points to") another value stored elsewhere in the computer memory using its address.
Pointers are incredibly important computing concepts as we need pointers to create many of the ADTs (Abstract Data Types) we are going to talk about. Some languages don't allow you to directly manipulate them, but all languages use them. For this section of the book you need to be familiar with the concept of pointers as we'll be using them heavily when we talk about linked lists, queues and stacks.
Quick examples of pointers might include the next free memory location in an array, or the location in memory that an array is stored at.
Let's take a look at how pointers are used in the C programming Language.
We are going to deal with two variables:
We are also going to meet two key <B>Character</B>s:
Assume that codice_3 is located at address 0x8130 in memory and codice_7 at 0x8134; also assume this is a 32-bit machine such that an int is 32-bits in size. The following is what would be in memory after the following code snippet is executed:
By assigning the address of codice_3 to codice_7:
</syntaxhighlight >
yields the following memory values:
Then by dereferencing codice_7 by coding:
<syntaxhighlight lang="C">
the computer will take the contents of codice_7 (which is 0x8130), 'locate' that address, and assign 8 to that location yielding the following memory:
Clearly, accessing codice_3 will yield the value of 8 because the previous instruction modified the contents of codice_3 by way of the pointer codice_7.
What would the following output, where codice_15 writes a line to the screen:
int q = 89;
int *next = NULL;
next = &q;
cout « *next;
q = 23;
cout « q;
You should have experience of programming solutions to problems. This experience is probably in a language such as: VB.NET, PHP, Python, Java or Pascal and you should be able to quickly understand what code like this would do:
dim name as <B>String</B>
dim age as <B>Integer</B>
console.writeline("please insert your name")
name = console.readline
console.writeline("Hello, " & name & " please insert your age")
age = console.readline()
console.writeline("Well, well " & name & " it looks like you are " & age & " years old")
So far you have been using two types of programming paradigms or set of concepts defining how a language works, these are called Procedural-orientated programming and Structured programming techniques. Taking a look at the example above, structured languages move from the program line by line, starting at 1, then 2, then 3. We have also made use of procedural paradigm features such as when the code meets a procedural name such as codice_1 on line 5, then the program jumps off, executes the code corresponding to codice_1 and returns to execute line 6. In this course you will be learning the following types, there are more
Structured programming techniques involve giving the code you write structures, these often involve writing code in blocks such as:
It also involves breaking down problems into smaller problems until routines can be written that execute single tasks. The routines operate on data passed to them through parameters and these routines can be re-used and are often packaged into libraries to save time in development. 
dim x as <B>Integer</B>
x = 7
If x = 2 then
else
end if
console.writeline(x)
Sharing the same features as structured programming techniques, Procedural-oriented programming implement procedures/subroutines to execute common functionality
dim x as <B>Integer</B>
x = 7
x = doubleIt(x)
console.writeline(x)
In <B>Functional Programming</B> programs define mathematical functions. A solution to a problem consists of a series of function calls. There are no variables or assignment statements, but instead there are lists and functions that manipulate these lists. An example of a <B>Functional Programming</B> language is Haskell.
A logic program consists of a set of facts and rules. A knowledge base is built up about a specific subject and an inference engine uses the knowledge base to answer queries which are presented in the form of a goal. Logic programming is often used for artificial intelligence systems.
Event Driven programming refers to your standard Windows Form idea, the program waits in a loop until an event(e.g. the click of a button, or a keystroke). The program then runs the code associated with this event and then returns to its loop, providing that the code did not instruct it to close.
If more than one event occurs, code is queued by the program and run in the order the events were triggered.
<B>Object</B>-oriented programming takes the techniques used in structured programming further and combines routines and the data they use into <B>Class</B>es. The data items stored for a <B>Class</B> are called <B>Field</B>s and the routines that operate on these <B>Field</B>s are called <B>Method</B>s.
To use a <B>Class</B> a programmer can declare instances of the <B>Class</B>, which are called <B>Object</B>s. This is known as instantiation.
A new <B>Class</B> can be based on an existing <B>Class</B> and it then inherits all the <B>Field</B>s and <B>Method</B>s of the existing <B>Class</B>. The programmer can then declare other <B>Field</B>s and <B>Method</B>s that are specific to the new <B>Class</B>. The new <B>Class</B> is known as a sub<B>Class</B> or derived <B>Class</B> of the existing <B>Class</B> and the existing <B>Class</B> is known as a super<B>Class</B> or parent <B>Class</B>. 
One of the main uses of computers is to simulate real life scenarios. You might have made a spreadsheet at school to simulate the amount of money made by a shop, or driven a formula one car on your console at home. Some of the most powerful computers in the world are used to simulate complex phenomena including
If you ever watch the weather forecast all the predictions are made by software simulating weather patterns. If you ever wonder why there aren't so many nuclear tests any more, there is no need as computers can simulate what happens.
With such powerful computers simulating models you might question why we are so bad at predicting the weather and how simulations can give the wrong results. This may be because the model being used is set up in completely the wrong way, but it may also be a result of chaos theory. Chaos theory states that any tiny differences in the initial starting conditions (such as those due to rounding errors in numerical computation) will have a huge effect on how the system performs in the long run. Rendering long-term prediction impossible in general. This can be seen in the inability of weather forecasts to get long term forecasts correct. This is also known through the butterfly effect, where Philip Merilees stated ""Does the flap of a butterfly’s wings in Brazil set off a tornado in Texas?""
Entities
Create a binary tree for the following data input:
Create a binary tree for the following major city input:
Describe the format of floating point numbers, including the concept of mantissa and exponent and the need for normalisation.
Only Two’s Complement representation of mantissa and exponent needs to be covered (IEEE standard does not need to be covered).
Minifloat representations are not expected to be recalled.
Explain the limitations of representing real numbers in a computer system, and how errors occur.
As you know, the number system we normally count in is base 10, and the number system that computers use, binary, is base 2. Hexadecimal is a base 16 number system. In hexadecimal, the numbers 0-9 are used, just like in denary, but the letters A-F are also used to represent the numbers 10-15. The <B>Table</B> below shows the numbers 0-16 in denary, and their binary and hexadecimal equivalents:
You may notice from the <B>Table</B> that one hexadecimal digit can represent exactly 4 binary bits. Hexadecimal is useful to us as a shorthand way of writing binary, and makes it easier to work with long binary numbers.
Since 4 binary bits are represented by one hexadecimal digit, it is simple to convert between the two. You can group binary bits into groups of 4, starting from the right, and adding extra 0's to the left if required, and then convert each group to their hexadecimal equivalent. For example, the number 110110011110101 can be written like this:
0110 1100 1111 0101
and then by using the <B>Table</B> above, you can convert each group of 4 bits into hexadecimal:
6 C F 5.
So the binary number 0110110011110101 is 6CF5 in hexadecimal. We can check this by converting both to denary. First we'll convert the binary number, since you already know how to do this:
By multiplying the columns and then adding the results, the answer is 27893.
Notice that the column headings are all 2 raised to a power, formula_1, formula_2, formula_3, formula_4, and so on. To convert from hexadecimal to denary, we must use column headings that are powers with the base 16, like this:
formula_5
formula_6 (You should memorize the values A-F)
formula_7
formula_8
Totalling them all up gives us 27893, showing that 0110110011110101 is equal to 6CF5.
To convert from denary to hexadecimal, it is recommended to just convert the number to binary first, and then use the simple <B>Method</B> above to convert from binary to hexadecimal.
A computer works purely in binary. That means that it only uses ones and zeros, and there's no - or + symbol that the computer can use. The computer must represent negative numbers in a different way.
We can represent a negative number in binary by making the most significant bit a sign bit, which will tell us whether the number is positive or negative. The column headings for an 8 bit number will look like this:
Here, the most significant bit is negative, and the other bits are positive. You start with -128, and add the other bits as normal. The example above is -67 in denary. -1 in binary is 11111111.
Note that you only use the most significant bit as a sign bit if the number is specified as signed. If the number is unsigned, then the msb is positive.
To find out the value of a two's complement number we must first make note of its sign bit (the most significant, left most bit). If 0 then the number is positive, if 1 then the number is negative.
To find the value of the negative number we must find and keep the right most 1 and all bits to its right, and then flip everything to its left. Here is an example:
We can now work out the value of this new number which is:
How about a more complex example?
So we know how to work out the value of a negative number that has been given to us. How do we go about working out the negative version of a positive number? Like this, that's how...
Take the binary version of the positive number
So now we can see the difference between a positive and a negative number
When it comes to subtracting one number from another in binary things can get very messy.
An easier way to subtract Y from X is to "add" the negative value of Y to the value of X
To do this we first need to find the negative value of Y
Now try the sum again
Which comes out as
Up until now, we have only been working with whole numbers, or <B>Integer</B>s. We need a way to store real numbers on a computer system.
First, we should have a look at one of the ways that we can represent fractions in denary:
As you can see, the column headings have been extended to formula_9 and formula_10. We can do the same thing in binary with the column headings formula_11, formula_12, and so on. The number 12.75 in binary is therefore:
Notice that for the same number of bits after the point, the binary number is less accurate. It can only take 4 different values, whereas the denary number can have 100 different divisions with two digits.
If you study other subjects such as Physics or Chemistry, you may come across Floating Point numbers like this
The first bit defines the non-zero part of the number and is called the Mantissa, the second part defines how many positions we want to move the decinal point, this is known as the Exponent and can be positive when moving the decimal point to the right and negative when moving to the left.
formula_14
If you wanted to write out that number in full you would have to move the decimal point in the exponent 34 places to the left, resulting in:
Which would take a lot of time to write and is very hard for the human eye to see how many zeros there are. There for, when we can accept a certain level of accuracy (6.63 = 3 significant figures), we can store a many digit number like planks constant in a small number of digits. You are always weighing up the scope (or range) of the number against its accuracy (number of significant bits).
The same is true with binary numbers and is even more important. When you are dealing with numbers and their computational representation you must always be aware of how much space the numbers will take up in memory. As we saw with the above example, the non floating point representation of a number can take up an unfeasible number of digits, imagine how many digits you would need to store.
formula_15 in binary? (don't worry this question is rhetorical)
A binary floating point number may consist of 2, 3 or 4 bytes, however the only ones you need to worry about are the 2 byte (16 bit) variety. The first 10 bits are the Mantissa, the last 6 bits are the exponent.
formula_17
Just like the denary floating point representation, a binary floating point number will have a mantissa and an exponent, though as you are dealing with binary (base 2) you must remember that that instead of having formula_18 you will have to use formula_19
Fixed point binary allows a computer to hold fractions but due to its nature is very limited in its scope. Even using 4 bytes to hold each number, with 8 bits for the fractional part after the point, the largest number that can be held is just over 8 million. Another format is needed for holding very large numbers.
In decimal, very large numbers can be shown with a mantissa and an exponent. i.e. 0.12² Here the 0.12 is the mantissa and the ² is the exponent. the mantissa holds the main digits and the exponents defines where the decimal point should be placed.
The same technique can be used for binary numbers. For example two bytes could be split so that 10 bits are used for the mantissa and the remaining 6 for the exponent. This allows a much greater scope of numbers to be used.
There are several stages to take when working out a floating point number in binary. In fact it is much like a disco dance routine - known on this page as the Noorgat Dance, Kemp variation (but you wont be tested on name but it should help you to remember)
Lets try it out. We are given the following 16 bit floating point number, with 10 bits for the mantissa, and 6 bits for the exponent. Remember the decimal point is between the first and second most significant bits
The first action we need to perform is the sign, find out the sign of the exponent
The second step in the Noorgat dance is the slide, we need to find the value of the exponent, that is the last 6 bits of the number
The third step in the Noorgat dance is the bounce that is moving the decimal point of the Mantissa the number of positions specified by the slide, which was one position to the right. Like so:
The fourth step is the optional flip. Check back to the sign stage and see if the Mantissa is negative. It isn't? Oh well you can skip past this stage then as we only flip the number if the mantissa is negative.
The fifth and final step is the swim. Taking the mantissa on its own we can now work out the value of the floating point number. Start at the centre and label each number to the left formula_27 and so on. The each number on the right formula_28 and so on.
When dealing with Floating point numbers in binary you must make sure that the first two bits are different. That is:
And most definitely NOT
This is because we must make sure the space we are using is being used the greatest efficiency. For instance if we take a denary floating point number such as
If we were to rewrite it as:
Then you can see the representation takes up an extra 2 <B>Character</B>s, the two extra 0's, even though it represents exactly the same number. This may be accep<B>Table</B> when you are not worried about how many <B>Character</B>s a number makes up, but in binary and with computers the space that numbers take up is very important, and we need the most efficient representation we can. With a fixed number of bits, a normalised representation of a number will display the number to the greatest accuracy possible. You must make sure that your normalisation does not change the sign of the mantissa. Taking a binary floating point number:
We can see that the number starts with formula_37. We need to change this to formula_30 for it be normalised. To do this we need to move the decimal place one position to the right, and to retain the same number represented by the unnormalised number we need to change the exponent accordingly. With a movement one place right to normalise the number we need to change the exponent to move the decimal point one place left to compensate. Thus negating one from the current exponent.
To make sure you have normalised it correctly, check that
Lets try a more complicated example:
To get the mantissa normalised we need to move the decimal point two places to the right. To maintain the same value as the original floating point number we need to adjust the exponent to be two smaller.
Now check that the new normalised value has the same value as the original.
Help is available here
Help is available here
Help is available here
This page contains questions to assist the reader in understanding the course material. These questions should not be taken as an indication of examination questions, and the reader should make reference to previous exams to get an idea of these.
Help is available here
Help is available here
Help is available 
here
High-level languages are usually problem-oriented. This means that most (but not all) high-level languages are written to solve problems in specific areas. As a result there are lots of different high-level languages available to the programmer - some sources on the Internet list over 2,000 of them. This can make the process of selecting the most sui<B>Table</B> language a daunting task.
There are several things which a programmer can use to select a sui<B>Table</B> language. These include:
No programmer can have a good knowledge of all the current computer languages currently on the market. Existing languages are always being upgraded and added to and new ones are being developed to cope with new situations.
High level languages can be <B>Class</B>ified by the way in which they are organised. This <B>Method</B> of organisation is beter known as a paradigm of which there are a recognised number.
An imperative is a command that must be obeyed and that is exactly how an imperative language works. Such a language consists of a long list of instructions that the computer will carry out. It will always carry out exactly the same process as long as exactly the same variables are inputted. The variables allow the user to exercise control over the programme but it will still be executed in a similar way.
Some examples of imperative languages include:
A declaration is where a statement is made. In the context of programming languages, with a declarative you give facts and rules to the computer which can then be queried to give data back.
<B>Object</B>-Orientated programs consist of a number of interacting <B>Object</B>s. The <B>Object</B>s each have properties and behaviours, much like physical <B>Object</B>s. This similarity to the physical world is often used when modelling an existing system, or theorizing about the action of the program. The <B>Object</B>s are similar to procedural programmes in that they have variables, <B>Method</B>s and functions.
A key difference between an <B>Object</B> and a section of linear code is that the variables, <B>Method</B>s and functions may have restrictions placed on their use. By not allowing direct access to the state but instead carrying out any changes itself the <B>Object</B> can ensure the <B>Consistency</B> of its own state. This property is called <B>Object</B> Encapsulation, it is one of the primary reasons that <B>Object</B> orientated programming is better suited to complex problems than linear code. In linear code it is common to store the state of the system in a series of global variables, accessible by any part of the program. <B>Object</B> encapsulation allows each <B>Object</B> to be reasoned about without having to consider the problems of possible side-effects from code in another <B>Object</B>.
<B>Object</B>s have two parts, the state of the <B>Object</B> and the behaviours. The state of the <B>Object</B> is stored in a number of variables while the behaviour is defined within the <B>Method</B>s and functions. An <B>Object</B> is defined by a ‘<B>Class</B>’. The ‘<B>Class</B>’ is a definition of the variables needed and the code for the <B>Method</B>s. When an <B>Object</B> orientated program is running only a single copy of the <B>Class</B> is required in memory, but multiple sets of state may be created. These sets of state are referred to as <B>Object</B>s as the <B>Compiler</B>, <B>Interpreter</B> or runtime environment hides the sharing of <B>Class</B> information.
When an <B>Object</B> orientated program starts there are no <B>Object</B>s, so how are <B>Object</B>s created? The program <B>Loader</B> is given an initial <B>Class</B> to load into memory and an initial <B>Method</B> to then start processing. This first <B>Method</B> is then responsible for creating further <B>Object</B>s, which may create more <B>Object</B>s still.
<B>Object</B> orientated programmes also lend themselves to having one or more concurrent flows of processing within the collection of <B>Object</B>s.
Instantiation, <B>Class</B>es, <B>Inheritance</B>, multiple <B>Inheritance</B>, <B>Polymorphism</B>.
<B>Object</B>-Oriented programming takes the idea of physical real life <B>Object</B>s such as "chairs" and "people" and uses this concept within a programming language. It sets the basic foundation as the "<B>Object</B>" which can be assigned variables (e.g. a name, a persons age) and <B>Method</B>s (e.g. a <B>Method</B> to call to return the name stored within the <B>Object</B>). These <B>Object</B>s are then used together to build up a program.
In contrast to functional and <B>Object</B> oriented languages a declarative language such as prolog contains assertions about the problem domain, often in the form of tuples. The language runtime is most often interactive and allows queries to be entered. The language then uses the declarations to deduce the answer.
Data Structures relates to Data <B>Algorithm</B>s and Data Restructring for defining good data base management systems.
<B>Algorithm</B> is the step wise representation without any application of any particular logic .e.g.
in the programme to add 3 numbers
step1-start
step2-take numbers m1, m2, m3,temp.
step3-take m1=1,m2=2,m3=3.
step4- add the three numbers.
step5-temp=m1+m2+m3(value of addition goes to temp)
step6-print temp.
step7-stop
Python is a free multiplatform programming language. Its original purpose and strengths were as a scripting language to automate the administration of Unix systems. Both the core language and the standard <B>Library</B> have since been extended for many other purposes, including web, <B>Database</B>, interactive and graphical applications.
The reference implementation of Python, CPython, runs almost everywhere, and is well supported for Linux, Unix, Mac OS X and Windows. Many free text editors offer syntax highlighting, code completion, <B>Class</B> navigation, debugger integration and other tools. Therefore students can pursue their interest easily at home, work or at computer clubs.
The main implementations (CPython, Jython and IronPython) are <B>Open Source</B> and free-of-charge. CPython is included as standard in most Linux distributions.
As of 2012, Python is one of the two main languages that Google offers, alongside Java, for its customer APIs. Though not as popular in industry as Java and VB, it has been adopted in various <B>Field</B>s of employment.
Python is interpreted, so trial-and-error experimentation and debugging can be fast. The standard runtime also includes an interactive console with access to the executing program image.
Python has a wide range of data types, both built-in and in its standard <B>Library</B>, though there can be some quirks and inconsistencies among them. For example, some types are mu<B>Table</B> and others are immu<B>Table</B>.
Python's significant whitespace makes incorrect nesting of block structured statements easy to spot.
CPython's <B>Virtual Machine</B> is a bytecode <B>Interpreter</B> and execution of Python can be much slower than say, execution of Java on its HotSpot <B>Virtual Machine</B> with just-in-time compilation.
Python's significant whitespace can make it easy to break a working <B>Method</B> with the space bar or tab key.
Python uses variables without declaring datatypes, this can be confusing when trying to teach them.
When using <B>Class</B>es, python doesn't use the keywords public and private to specify access to <B>Attribute</B>s and <B>Method</B>s. They are possible, but may confuse students.
When you read about python you will probably learn that there are two different versions out there. AQA allows you to use either but which one is most sui<B>Table</B> for you? A quick summary:
2.7 is s<B>Table</B>, end-of-life, no further updates, but solid and widely deployed, with a vast array of libraries and learning resources.
3.x is the future - handles multi-lingual text correctly, many improvements, but some libraries not yet converted.
Some tutorials written for python 2.7 won't work in python 3.x as there are small changes in the language such as the codice_1 statement in Python 2.x being replaced with the codice_1 function in Python 3.x:
print "hello world" #python 2.7
print("hello world") #python 3.x
You can install both and they'll play nicely together, but when choosing what language to pick you might be wise to check out the resources that you have available to your students.
You can get a por<B>Table</B> version of python that can be run directly from a USB, available in 2.7 and 3.x versions.
If you want to use Microsoft Visual Studio you can get IronPython which is free and integrates python 2.7. Alternatively you can get Python Tools for Visual Studio which is free and works with existing <B>Installation</B>s of Python 2.x and/or 3.x. This gives you syntax highlighting, Intellisense, debugging, code folding, type hints, and more in much the same way as Visual Studio works for other languages.
Python comes pre installed on the Raspberry Pi with development tools and lots of supporting learning resources.
Although some users encourage learners to use Python's built-in codice_3 as an array, the standard <B>Library</B> includes the codice_4 module which some teachers may prefer. See, for example, 
Check which array the examiners prefer.
Since Python doesn't have the concept of explicit declarations, or PRIVATE and PUBLIC keywords, the syntax for defining <B>Class</B>es differs quite a lot from the generally accepted AQA syntax, e.g., the VB.NET <B>Class</B>
<B>Class</B> MediaFile
is a reasonable match to the June 2010 COMP3 question:
MediaFile = <B>Class</B> 
The Python version looks something like this:
<B>Class</B> MediaFile
Python can be used to build anything from websites to games using pygame (v2.7). Blender has a python scripting engine (3.x) meaning that it is possible to create projects involving 3D animation. Python also has a decent RAD (Rapid - Application - Development) tool in the form of Glade and PyGTK. Python's origins as a scripting language mean that it can be used to glue together Unix programs to make an application.
<B>Open Source</B> <B>Library</B> code can be imported, as teaching examples or to extend the practical project, from PyPI http://pypi.python.org/pypi , with package management tools built into Python.
To ease the generation of some documentation, students may be introduced to the codice_5, a form of embedded documentation supported by Python <B>Source Code</B>. A number of tools are available for generating readable documents from <B>Source Code</B> containing doc<B>String</B>s, including codice_6 (in the standard <B>Library</B>), codice_7, codice_8 and codice_9.
For website creation, Python is one of the alternative 'P's in LAMP. (Like Perl and PHP, Python integrates well with Linux, Unix, Apache HTTP Server and MySQL.)
If you're already proficient in another programming language, the official tutorial will get you up to speed at speed. Even if you're not a programmer, this fast-paced, no-frills introduction will get you programming in Python quickly, with a reasonable degree of mental pain!
Other Python books at Wikibooks are listed under .
Useful printed books are as follows:
Please note, that the AQA Computing practical has since been updated, the proportion of marks allocated to the technical solution has been significantly increase to 42/75 (56%), compared to the 20/75 (27%) on the old specification.
As such anyone on the current specification will not need to do the following documentation: 
The following subsections are also no longer required:
This chapter aims to give you the skills to complete your A2 Computing project. Unlike the rest of the course this unit is entirely based on coursework submitted in May. This is great because if you work hard enough then you can make sure you get some really good marks, you have access to the mark scheme after all!
Your project involves making a complex programming project that will likely involve data processing, and then writing a report about it. You have to make a program for a real user, this is very important, you can't just make them up. It doesn't have to be incredibly complicated, but you need a degree of complexity in order to write a good report. You can write a computer game but they can be an awful lot of work (2–3 years with a team of 40+ people for the latest console games) and it's often difficult to find a real life user and a real need.
Over the course of the project you will be creating a report. This is really important and lots of people spend so much time coding that they forget to complete the write up. The write up is worth nearly 70% of the mark and will take you through a <B>Waterfall Model</B> of system development. There are many other forms of system development out there and you might find yourself completing sections of the course not necessarily in the order given, the important thing is that you make it a cohesive whole and complete everything.
Please use the links below to get you started and note where all the marks are awarded, you might create a brilliant bit of code but if you don't complete your writeup your grade will suffer.
All the programming you have done so far has been with the command line. This is great if all you want is text on a screen, but you probably want to display some graphics. There are several places you can get started:
Here we are going to look how we can very quickly display graphics in VB.NET and make some simple games. To display graphics we are going to use the GDI+ <B>Library</B> of tools. DirectX is much more powerful, but for our needs GDI+ is a simple way to get started. GDI+ allows you to draw both vector and bitmap graphics to the screen. There are a couple of functions that you need to be familiar with:
This code runs when the form is first loaded
This code runs on the event of clicking a key on your keyboard
You need to have added a timer to your project and named it tmrBall. This code runs on each tick of the timer.
This code draws the items on to the screen
Public <B>Class</B> frmGame
End <B>Class</B>
Before you start making your project you need to know what you are going to make. This is where your <B>Analysis</B> comes in useful and it's also worth 12 marks, that's 16% of the overall project! We'd better get started.
Hopefully by now you have some idea of your user and what they want you to do, we need to codify (write it down) it all so we can start getting some marks. The exam board has been very kind and if you check out the mark scheme they even provide a list of things that you need to include in your <B>Analysis</B>. We're going to take these and use them as our headings.
This should be done first. You have an idea on the sections that you need to present so you should put together some questions for your main user to get the answers you need to start putting this together. From your research you need to know the following:
A structured interview might do the trick and you need to note down all the responses to each of your questions. You should try to understand the current situation and the problem and it is recommended you perform and evidence at least two of the following <B>Method</B>s and explain why you used each:
Once you have finished presenting your research you need to summarise what it said and explain why you used each research <B>Method</B>.
Make sure that all information on users, current system problems, proposed system features etc. comes directly from your research, otherwise it looks like you haven't done your research properly 
You need to introduce your problem, a quick two paragraphs of what the problem is and how a computer might solve it. For example mention how the current system is paper based, slow and people are always losing things, the computerised system would be faster, secure and allow them to run reports and calculate things. But don't mention any languages or <B>Database</B>s at this point, we will decide that at the end of the <B>Analysis</B>.
Describe the current system, what it does and how it currently stores its data. Describe the flaws in the current system, is it slow, secure, easy to query, easy to use, can it have multiple people use it at once, is it easy to access?
Back up your description using as many resources as you can, including interviews, observations and pictures. This will prove to the marker that your project has a real client.
In some instances your system will involve only one user, the person you are writing it for. In most cases it will involve more than one person. You need to recognise all the users, big and small, of your system.
For example if you were making a maths revision website you have the maths teacher as your main user, but who else is going to use the system? The students of course! You would then need to write how each of these user groups would use the system and how some users would have more access than others. The teacher would be able to change the tests and see the results of all their students, they should be able to add and delete student users. The students should be able to take tests and only see their results.
For example if you were making a stock control system then the system administrator should be able to add/delete/update and re-order items of stock, run reports and add/delete/update users and suppliers. The general shop floor staff should only be able to sell items and print out receipts. The customers will have no direct use of the system.
You should also mention for each user the skills they possess. For example if they use a Mac all the time then an interface similar to an OS X interface would be useful. If they use Microsoft Office 2010 then an interface similar to that software suite would be sui<B>Table</B>.
Summarise your research findings, what do each of your users want you to do? For example:
The teacher needs me to create a system that
The students need me to create a system that
Limitations are slightly harder to list. You need to write down what your system won't be doing for reasons of time, complexity, or user preference. These might include the system not storing user log in details as these will be managed by LDAP or, a system not enforcing spin on a pool ball, as that specific feature isn't needed by the teacher and the developer not having enough time to implement it.
In most cases you'll use a <B>Database</B>, but you could also use a file-based system or xml.
By now you should have mentioned a couple things that your project will need to store and process (this should have come from your interviews). Where are you going to get this data from?
For example the current system might say:
The new system would then look like (notice that there might be some more <B>Attribute</B>s):
An important thing to think about when building any system is how much data you will need to store and how much processing is required. This should come directly from your research and will influence how you complete your project and what sort of hardware you will need to use. For example if you only have one person sitting an online test at one time, you only need a simple computer. If you are looking to have hundreds of people using your system at once then you will need a very fast computer and probably a web based solution.
For example:
Like a dictionary describing all the words you can use in a sentence, this will <B>Record</B> all the pieces of data that you want to store and process in your system. You will need to provide the following information for everything you will store data on:
If you are storing a <B>Database</B> make sure that you have stored data on all the <B>Field</B>s that will be in your <B>Database</B>, for example the data above is storing data on a student in a school. What data will you need to store for your system to work?
If you are making a program, you will want to list all the variables that your program will store whilst it is running. For example, if you were creating a program to tally the score someone achieved in a quiz, you should list the variable that will store this score.
Warning: A very common mistake is to mis-size your <B>Field</B>s. For example you are making a markbook system where you will store the age of students. The ages are between 11 and 16, so why not make the age 16 in length? The answer is because length sixteen allows you to store the age "9999999999999999 years", and this is impossible to have a student (let alone a human) that old. The length should be a more sensible 3. While the expected numbers are two digits long it is conceivable that the software may be extended to be used for older students one day and so the length should be set to cover this contingency. Do not repeat the "year 2000" problem where developers stored the year as only two digits causing millions of pounds to be spent fixing it when the year "ticked over" to zero again. 
There are many ways that you can draw data flow diagrams, so if your teacher tells you one way and the way you read here is completely different, don't worry. The important thing is that you show how data moves through the current system, where it is stored, where it will be processed and how you plan it to move through the new system. It is called a data flow diagram after all! For these examples we are using the Gane Sarson <B>Method</B>.
There are four main components that you need to be aware of:
Using the descriptions we can see the diagram above means the following: 
You need to produce four data flow diagrams, two showing the current situation and two showing the proposed system. For each you must show the following diagrams:
You can make them using a word processor but it's far easier to use specialist software. You can try to use dia or Open ModelSphere, which are both free. Alternatively you can use Microsoft Visio.
In software and systems engineering, a use case is a list of steps, typically defining interactions between a role (known in UML as an "actor") and a system, to achieve a goal. The actor can be a human or an external system. For example in a system where a user wants to invite some people to a party on a social <B>Network</B>. Person:
When thinking about how you are going to save data on your system you might decide to use a <B>Database</B>, if this is the case you must include an E-R Diagram. If you aren't using a <B>Database</B> explain that there is no need to complete this section. You need to recognise your main <B>Table</B>s. There should be at least 3 <B>Table</B>s and relationships between them. The <B>Table</B>s don't have to be normalised at this stage but the relationships should be described in a little detail.
For each <B>Class</B> that you are using describe:
For example, the <B>Attribute</B>s of a monster <B>Class</B> might contain:
you also need to note the <B>Method</B>s that the monster <B>Class</B> would use:
This is the most important part of your <B>Analysis</B>, because this is how you are going to check if your end system meets all your user needs. You need to outline three sets of <B>Object</B>ives that are all SMART and numbered:
As far as possible all your <B>Object</B>ives should be SMART. But what does SMART mean?
As you can probably recognise, several of the incorrect <B>Object</B>ives above fail to meet multiple SMART criteria. Test yourself, which of these <B>Object</B>ives are SMART enough to get you started on a good project:
Get these numbered <B>Object</B>ives signed off by your client and put evidence in your writeup. This might involve copying an email into the document.
There are several ways that you could solve the problem at hand you need to list at least 3 different options. For each of them you need to mention positive and negative things and then argue out your chosen solution.
For example. If I was tasked with making a stock control system I could use the following things (with a lot more detail!)
From the choices that you suggested pick the best one and explain why. This is going to be how you are going to solve this problem!
In this section you need to justify that the techniques you used to write your <B>Analysis</B> were correct and made sure that you managed to get all the <B>Object</B>ives of the new system. Go back to the questionnaires, interview and observations. Include them here and explain how this made sure that you could produce a comprehensive <B>Analysis</B>.
Now you have completed your <B>Analysis</B> you need to start making your project. You should have some idea of how you are going to make your system and you now need to start acquiring all the skills you will need to complete this project. Get yourself a text book about the programming language you have chosen and make sure you can perform some simple tasks using it. At this point it would be a good idea to write a quick list of skills that you will need to learn.
Whilst you are getting those skills, head over to <B>Design</B>
Once you have completed everything else it is time to finish the project, and that means writing the appraisal. This section is relatively easy to get marks in so give yourself time to do it properly.
Way back in your <B>Analysis</B> you wrote down a set of <B>Object</B>ives, copy them into you appraisal. For each <B>Object</B>ive state if you met it and how it went. For example:
You are aiming to meet all of your <B>Object</B>ives, but don't be afraid to mention those that you didn't meet and why you didn't meet them.
Part of any completed project involves you showing the work to your target user. You might choose to sit them down and demonstrate it, then <B>Record</B> their feedback directly, or you might choose to send them a copy and ask them to email you any responses. The important thing here is that you get feedback from your user that is definitely theirs. Try and ask them for things that they would like you to improve upon. The letter / email that you receive from them should be about half a page to a page long, listing at least the following:
Now you have the feedback, was it good was it bad, does it make you think you met all your <B>Object</B>ives? What would you do differently next time?
To get full marks you are going to have to think of some ways to improve your project. Saying something like: "I would make it better" is not good enough. What does that even mean? "I would add more levels" is equally naive unless you mention how this would make the system better. These extensions must be SMART!
You need to mention 3-4 things that given another few months you would implement in your system. Think big but not too big, the things you mention should be achievable and you need to show that you have thought out how you would make that change. For example:
"I could edit my program into an online system so I only need to update the code in one place instead to having to replace the program on each machine when a new version comes out. To do this I would rewrite my system in PHP with a MYSQL <B>Database</B> back end."
This section should be where you are going to plan out your entire system before you build it. It doesn't always work out this way and you might find yourself coming back and changing things as you actually code your project. It is not recommended to write the <B>Design</B> before you have done some coding. From your <B>Analysis</B> you should have an idea of what you are going to produce and have sourced some text books to get you started. Complete a couple of simple example programs before writing your <B>Design</B>, this way you'll have a better idea of the capabilities of the language you are using. And remember, don't be afraid to come back and change things!
To get full marks you should aim to write something about all of the following. Some projects won't require all sections, for example you might not have a <B>Database</B> and therefore have no need to include SQL. It's always best to check with your teacher about what you need to include.
To give a clear idea of how we are going to complete our project it's a good idea to use an IPSO chart. IPSO stands for Input, Process, Storage, Output. Every project should have information under these headings. An example is below:
Let's take a look at an example:
When you <B>Design</B> your system you need to split it into smaller components. Like this book having different chapters about different things, your project should have different parts (modules) that do different things, but when they are combined they make up a complete whole.
There are two ways to split your project into modules, one is code based and the other is form based. Ideally, your project should be using both <B>Method</B>s. 
If your program has lots of different functions and uses a website or an application you probably have different pages to perform different tasks. You are also able to navigate from one page to another starting at your main menu. You need to show the different forms/pages that you use and how you would get from one to another:
Even better than this you could draw a nice diagram on how everything links together.
If you are writing a very complicated coding project then you might be using modules of code, some modules that build off other modules. You might also be using <B>Class</B>es and you need to show the <B>Class</B> <B>Inheritance</B> diagrams
Incredibly similar to your <B>Analysis</B>. If you haven't made any changes since then and it is normalised, just copy the data into here. You'll have to do a little more work in a second on the validation areas. Write down how the values are to be stored while the program is running and what data needs to be stored long-term, is the data to be stored in <B>Database</B> <B>Table</B>s or files?
If you are saving anything to text files or XML files mention here how those files are organised.
If you are using <B>Record</B>s or structures in your code mention them here and how they work.
If you are getting the user to input data you will definitely need to validate the data that they insert. For example if you are getting them to fill in a new customer <B>Record</B> you will have <B>Field</B>s such as Title, First Name, Date of Birth, Number of toes. You want them to input data such as:
And what will happen if they type in the following:
Well it'll probably break your system, we need to prevent them from entering garbage into our system. If we allow rubbish data our calculations won't work, our reports will be wrong and the data will be useless. Remember this rule:
Garbage In, Garbage Out
To prevent garbage being input we are going to validate, that means check, each item of data that a person inputs into the system. We can do this in many ways
Most of these validation checks are built into <B>Database</B> packages, so if you create a <B>Database</B> and then use a development suite to create the forms, the validation will be built into the forms automatically. If you don't have this privilege, you'll have to hard code it. That of course will come in the Technical Solution stage. Let's take a look at our original garbage data, did we manage to use validation to stop all the nonsense getting into our <B>Database</B>?
For your report you need to write a <B>Table</B> like the one above, though you can omit the last two columns.
When you are trying to enforce a format to data being input, you might want to use validation notation. For example if you want to specify that a <B>Class</B> name must be a two digit number followed by three letters, for example 12PKP, You could write:
Or even more simply:
The regex expression equivalent could be:
or
If you are making a <B>Database</B> then you need to include an E-R Diagram. You should show the diagram and explain what each of the relationships mean. For example:
If you are making a <B>Database</B> you need to write about the SQL that you use to SELECT, INSERT, UPDATE and DELETE things from your <B>Table</B>s. In some cases you might also be writing the code behind making the individual <B>Table</B>s, the data definition language. In fact those headings are exactly what you need to use.
When you are querying your <B>Database</B> you might get some unexpected errors, where a query fails to run when it doesn't appear to have any problem with it. This may be due to using a resevered word in your query. SQL has a lot of reserved words, words that have special meanings, and if you use one of these in a query it won't treat it as a <B>Field</B> name. For example:
SELECT Username, Password FROM tblUsers
This might bring up an error as codice_1 is a reserved word in SQL. To get by this problem you might want to change your <B>Field</B>names to something a little more sensible or put the <B>Field</B>name in square brackets:
SELECT Username, [Password] FROM tblUsers
There are many other reserved words out there, so be careful:
PERCENT, PLAN, PRECISION, EXISTS, PRIMARY, PRINT, PUBLIC,
BACKUP, FOREIGN, READ,FREETEXT, FROM, REFERENCES, BULK, 
FULL, RESTORE, GROUP, IDENTITY, RULE, SAVE, INDEX, SELECT, 
STATISTICS, KEY, <B>Table</B>, NATIONAL, <B>Database</B>, UNION, DELETE, 
DISK, ON, USER, PASSWORD
Different <B>Database</B>s have different sets of reserved words, you can find a good list here
Note: If you are not using a SQL server (for example, using MySQL with PHP) you may need to use `backticks` instead of square bracket notation.
This section should list all the SQL you have written that returns selections of <B>Record</B>s. You should describe in plain English where the SQL is used and what it does and then include the SQL with any annotations that you need. For example:
English Description:
This SQL statement selects the details (ID, Name, Price, Description) of a product which has been selected by the user. So that the user can view the product detail on the preview screen before buying the product
SQL:
This section should list all the SQL you have written that inserts new <B>Record</B>s into your <B>Database</B>. You should describe in plain English where the SQL is used and what it does and then include the SQL with any annotations that you need. For example:
English Description:
This SQL statement adds a new high score along with the date the score was achieved for a users account.
SQL:
This section should list all the SQL you have written that updates an old <B>Record</B> with new details. You should describe in plain English where the SQL is used and what it does and then include the SQL with any annotations that you need. For example:
English Description:
This SQL statement updates the date of birth of a user, after they have updated the form that launches when they first log into the program.
SQL:
If you have <B>Design</B>ed your <B>Database</B> <B>Table</B>s using a program such as Open ModelSphere you can then define the code behind making your <B>Table</B>s which you can then feed into MySQL or MSSQL to create your <B>Database</B>. Get some credit for this and list your DDL. For example, the command to create a <B>Table</B> named employees with a few sample columns would be:
This is quite easy if you remember the hardware section of Unit 2. You must recommend how your system will be distributed to and then run by the user.
You need to start off by calculating how much space the program will take up to distribute and how much space it will take up when it is running.
Distributing your software will require that you transmit the data to the user somehow. This could be through a CD-ROM, USB drive, DVD-ROM or internet connection. Why would you pick each? Which would be most sui<B>Table</B>? Think about security, speed, having a backup, size of files to transmit.
Running the system will in most cases require the user to be able to write new files to your system, saving high scores, new purchases etc. How big will the system feasibly get? You need to recommend something that will allow the user to read and write to, something that is secure and reliable, and something that will be big enough and fast enough to handle everything. A CD-ROM would not be sui<B>Table</B> here, why? Hard Disks could be sui<B>Table</B>, why?
You will be asked to provide examples of <B>Design</B>ing your code. If you have lots of code then pick the 6-8 most interesting examples. For each bit of code try to include the following:
For example with a log in screen you could write the following:
This code takes the username and password input by the user and then checks them against the login details stored in the login file.
var userName = Textbox.username
var password = Textbox.password
load the accep<B>Table</B> login names and passwords from the text file and store it into var accep<B>Table</B>Logins
If userName and password are in accep<B>Table</B>Logins Then
Else
End If
If you have used <B>Object</B> Orientation in writing your program (highly recommended to get in the top mark band) you need to describe it here. You must mention the following:
In all projects you will have some form of user interface, in nearly all cases this will be a GUI. This section actions you to show and explain the <B>Method</B>s that you are going to capture data (inputs), and the ways you are going to display/print out data(outputs). Notice in each case it says sample, so you don't have to show how every form/printout will look, 4 examples of each should suffice. You could hand draw each, or draw them using an arts package like inkscape, alternatively you could <B>Design</B> them in a package like Visual Studio and use the <B>Design</B> views of the form. DO NOT use screen shots of the final code running, we need to see your <B>Design</B>s.
This section needs to show the <B>Design</B>s of your forms / interfaces. Don't be afraid to include early screen shots of forms in <B>Design</B> view. Remember we are not marking this section on working code, but on the <B>Design</B> ideas behind each form / interface. You must mention your reasoning:
You can do this by annotating each screen shot.
This might be one or more of several things:
Using the same rationale as the previous section you must complete annotated versions of these.
Security and integrity are slightly different things.
Security means preventing unauthorised people accessing areas of your work. This might include students accessing each others marks for a test, customers accessing other customers' details, students accessing the marks to a test or anything that conflicts with the data protection act. To do this you need to implement security systems such as usernames and passwords, access rights and restricted areas. You might have certain buttons and areas that only appear for certain users. If they are restricted users there will be parts of your system that they won't see, and for the admin user, they should be able to see everything.
Integrity is making sure that your data doesn't 'corrupt'. This means making sure that certain bits of data always take on the correct format or don't violate certain rules. For example, if you had a date of birth, you wouldn't want people to be inserting their name in that <B>Field</B>. How do you do this? With validation rules. Write about them here. You might also want to make sure that your <B>Database</B> maintains its referential integrity. This will prevent people linking to <B>Record</B>s in other <B>Table</B>s that don't exist. Talk about how you would do this.
You don't want unauthorised people gaining access to your data. This might include stalkers trying to find out personal details stored on your system, students trying to cheat etc. You might recommend that the end user keeps data in secure locations or behind operating system passwords. Or that there is a main password to get into your system.
You should also mention how the system will be recovered in the circumstance that it becomes corrupted or lost. Mention the <B>Method</B> by which you will recover the system/reinstall etc.
There are several different ways that you could test your system. This section asks you to consider each and mention how you are going to test your system with regard to each. Don't just describe each, you must talk about how you will use them to test your system.
In this mode you don't care about the code behind what you are testing, you just know what results should come about from particular data inputs. This is useful for complex sub routines that have multiple possible inputs. For example testing a search <B>Algorithm</B>. If you do come across any problems then you will have to find and fix them. For that we use...
In this you are going to test as many routes 'through' your code as you can. This means looking at your code and trying to come up with tests that will test every logical statement that you have written. For example if you have an if statement that checks if a password is correct or not, put a test in place to see if it works when the correct password is inserted AND when an incorrect password is inserted. Things you should include:
This is a great way to find and fix problems. You should try to pick two or three of your most complex pieces of code to perform a trace <B>Table</B> upon. By using this you prove that the code works.
So now it's time to start thinking about what sort of project you are going to make. This is an important decision as this will drive the rest of this coursework.
Projects that I've marked in the past have included:
You have probably noticed that there is a lot of talk about <B>Database</B>s and data manipulation. An easy way to tackle this project is to build a data processing system, i.e. a stock control system or a revision game, with a <B>Database</B> in the back-end to store data. This is a strong sort of project and a way to getting top marks. However, you don't have to do something like this. If your code is complex enough then you don't have to store any data and the parts of the write up that talk about <B>Database</B>s, you can skip. You might not be encouraged to make games, but if it is a game with a <B>Database</B> or revision system behind it, or showing clever simulations of A-Level standard mathematics then you need to talk to your Computing teacher.
Every system you make must involve data processing. This means taking data and adding, updating, deleting, interpreting and displaying it. This is very easy with a <B>Database</B>, but you must get beyond the defaults of add, edit, delete, that something like Access gives you. Think about using complex queries and fancy ways to present your results. It could also be an XML file storing seating plans or student <B>Record</B>s, editing/deleting/adding questions to a revision game and <B>Record</B>ing the scores of different users. Whatever you do you must have data processing at the heart of it.
Using a form of SQL (e.g MySQL) or similar (e.g MariaDB) is a good choice over Access because it easily integrates with a lot of programming languages. Also SQL is on the COMP3 sylla<B>Bus</B> so you will need basic SQL knowledge anyway.
To get top marks the system has to be complex but what does that mean? There are a few things that you need to do and a few more things you need to do to stand a chance to get top marks. AQA's marks scheme says, to get in the top band for complexity, you need at least one of the following:
If you can use more than one of these, you'll guarantee yourself these marks. Also having more will give you more to write about in your later sections. However, don't be too ambitious because you don't want to spend all your time on the coding or not finish the program. 
If you're using a <B>Database</B> it can be harder to tell if your project is going to be complex. AQA has a document on this, but in short your <B>Database</B> will need to be fully normalised and high volumes of data will get you more marks. If you can, try to implement one of the points above and you will get the marks. 
Never create something in Access alone, you need to show real coding. Even if Access would be a simpler solution this will not allow you to get marks for a complex project. Always check with your teacher about complexity
You probably have a few ideas running through your head already but you now need to find a user. Users aren't necessarily going to find you so if you are a member of a local sports club, church, drama society etc. try and think how a data processing system could help them out. For example, you could keep track of the members of a choir, which sessions they attended and whether they have paid their subscription. If you know someone who runs a small <B>Bus</B>iness could you write a system to keep track of when staff were on duty, how much stock they have, how many sales they make? Is there an area in your school / college that could be improved? Ask your teachers, maybe they still need to write reports manually, maybe they would want a revision tool for their subject, maybe they would like web based system to book out rooms, maybe they want a program writing that could simulate projectile motion to demonstrate something in <B>Class</B>. Once you have found your user keep hold of them, they are going to be key to you completing every part of this project.
If you're having trouble finding a user, try asking some of your teachers at school. If you want to do a simulation, your maths or physics teachers may be helpful.
Do the following sound complex enough? If not, how would you make them complex? Remember to check with your teacher about complexity.
Once you have a user and a problem how are you going to solve it? You aren't a multi-billion pound IT firm and you probably don't have much more than a years programming experience. You have got to be realistic about how you are going to solve this problem. Here are a couple of questions you need to start thinking about, write down your answers
Write all of this down somewhere, it's going to come in useful for your ../<B>Analysis</B>/!
Having written this text book, I've come to discover that Quality of Writing is something that people find very important. If it isn't well written and presented then you are going to find it very hard to read and you probably wouldn't recommend it to your friends. It's exactly the same with your coursework, but if you don't present your work very well then you are going to lose marks and get your teacher very cross. Overall this section is only worth 3 marks, but these are also the 3 easiest marks in the entire Unit. If you follow the guidelines below then you are almost guaranteed to get them.
This seems pretty obvious. A lot of schools/colleges have agreements that promote the use Microsoft Office and Word, check to see if you can get a cheap copy of that. Alternatively you can any implementation of OpenOffice, like download LibreOffice or other free Word alternatives, like AbiWord. 
If you want to be really clever and write something in LaTeX then feel free, but it's probably not worth the effort right now.
You get given marks for having footers on your work. This needs to include the following:
Your Name | The title of the Project | The page number
P Kemp | My Amazing Fruit Stall <B>Database</B> | 12/97
This is pretty obvious and should be easy enough to do as spelling mistakes are normally highlighted with little red squiggly lines. However, as you can see to the right there are some errors that your spell checker can't pick up. You have to proof read it!
Before every draft you hand in, and especially before your final deadline, proof read your work. This means sitting down and reading through everything you have written. You will be amazed at how many little mistakes you made without realising it. Even better, get a friend or member of your family to read it. If they can understand it then you are sure that the examiner will be able to understand it and you will get all the marks that you deserve.
DO NOT rely on your teacher to proof read your work, they have a lot to mark and might get annoyed with you. It is far better to ask them to give you ideas on how to improve your technical work than asking them to explain the difference between 'they're', 'there' and 'their'!
When students are in years 7 and 8 they have great fun with word art and making their titles look very fancy. You don't get any marks for having fancy titles.
If you have never used Heading styles before, now is the time to learn. By using styles such as Heading 1 and Heading 2 it will allow you to automatically create a <B>Table</B> of contents! Imagine that, no need to count the page numbers. 
It is essential that the marker can navigate their way through your report. To help them with this we are going to add a <B>Table</B> of contents at the front of the document. Doing this manually can take a long time, but if you use headings then your can automate the entire process. Remember if you change any text you will need to update your contents page to show the new layout. The last thing you should do before printing is to update the contents page!
Look at the videos above to see how it is done.
A very common mistake when writing reports is to mess up the layout. This can involve having headings at the bottom of the page and the text accompanying that text on the next page (Widow) or having the text slipping onto the next page (Orphan). This makes it very hard to read.
Widow end of paragraph at the top of a page:
Orphan line of paragraph at the bottom of a page:
To make sure that your text is nice and tidy you need to make sure that if you have a Widowed header, you make sure that it starts off on the next page. You can do this by using lots of carriage returns, but an easier and tidier way is to use page breaks. You may not have used these before, they are a great way of making sure that everything is well laid out.
First of all find the ¶ button. This shows us the formatting of the page.
Next find a heading that you want to <B>Switch</B> to the next page, put the cursor in the front of the title and press "CTRL+Enter"
A page break should appear and things should be a little neater.
So your project works and you have a lot of screen shots to show that your testing works. However the screenshots are so small that you can't read the data entered or the error messages. This means you are going to lose marks as your evidence of testing doesn't show any testing! Make sure that you crop unneeded parts of the screen out of your images. Use the crop button.
Imagine that once you have delivered your project to your user they want to pay someone else to make improvements on it. This is very common in industry where IT projects can be decades old (The IBM CICS product was first released in 1969, it's still going strong). So that other people can take over your project you need to provide them with decent documentation so they can understand what everything does. For this you need to make your System <B>Maintenance</B>.
The first thing a person inheriting an old system would like to see is a brief overview of all the components, that is what we are providing here.
You need to include some examples of your most complicated <B>Algorithm</B>s and how you built them. It's recommended that you include as much evidence of your coding skill as possible but in some cases this will be very difficult as you will have produced so much code that it's impossible to fully describe all of it. Ten complex pieces of code should suffice.
For each piece of code include 3 sections
For example:
Plain English
This piece of code works out the average price of a selection of chocolate bars. To do this I should first of all use SQL to find all the chocolate bars from the Products <B>Table</B>. I will then add all the prices together and divide the total by the number of chocolate bars to get an average price.
Pseudo Code
Real Code
For each Module and Form that you create you should have code sitting behind it. This section will give the marker an overview of the different coding components of your project, keep in mind variable datatypes and their 'bit' capacity i.e using a <B>Character</B> instead of a <B>String</B>.
For example:
Module Sweet Form
This Module calculates a variety of statistics and presents reports for all the sweets and chocolate stored in the <B>Database</B>
This is where you provide the marker with all of your code. As we mentioned earlier it should be quite easy to understand already as you used sensible names, indentation and comments. This section is going to allow the marker to see all that hard work, with a little annotation where anything isn't 100% clear. If you have included this in your technical solution, then please provide a link.
If you have used a program to make your <B>Database</B> <B>Table</B>s then show them in <B>Design</B> view, making sure that people can see the data types.
If you have used DDL copy it here.
System Testing is worth 12% of your overall mark, it is also very easy to get top marks if you follow all the guidelines. You should have made a test plan in your <B>Design</B>, we are now going to follow the plan and provide evidence to show that our system works (or doesn't!).
You might have implemented some things in your technical solution that weren't covered by your initial test plan, don't leave them out, add them to this test plan.
If you didn't manage to complete all of your functionality your test plan might test for things that don't work. Don't worry, this is testing after all. Show the feature not working and explain why. If you can use a trace <B>Table</B> and show how you fixed the issues
Ideally you need to show screenshots for every test that you perform.
Let's get started.
So what are typical, erroneous and extreme data? The answer lies mostly in their name, let's take a look at this example where someone has created a secondary school registration system which lets students register themselves. We don't want people who are too young attending, and we don't want students who are too old. In fact we are looking for students 11–16 years old.
If you are testing data that has Typical, Erroneous and Extreme data, show tests for all three. Some tests might only have typical and erroneous, for example entering a correct password. Some things might only have typical testing, such as if a button to a next page works or not, or if a calculation is correct.
Describe what you are expecting to see, this is what your result screen shot should show happening. If you are showing the result of calculating something then describe the data going into it and if possible include a screen shot of this data in you evidence.
Explain whether it passed or failed, if it fails you need to explain what went wrong, if it works explain that it works.
This is where you need to link to your screen shots to prove that you completed these tests. Without these screen shots you lose marks. A few hints:
You should include at least 2 trace <B>Table</B>s covering some of the more complex elements of your code to prove that the code performs as you are expecting it to. Trace <B>Table</B>s lend themselves to loops. So if you have a loop then make a trace <B>Table</B> to prove it works. This section should include:
You will need to try and test all of your system, here are a few pointers to help you make sure everything has undergone a thorough test:
If you have written a particularly complex program there is an awful lot of testing to do. You don't have to show every test, but you do have to give a good sample including screen shots and trace <B>Table</B>s.
This is the real thing, where you get marked on the code that you have written. Notice that the program without any writeup is worth only 31% of the overall unit. However, you need this section to complete the other parts of the project and this section will almost certainly take you longer than any other section of this Unit. Below are a couple of quick tips on getting top marks in this section plus some links to programming help guides:
In the good old days students could get a decent mark by making a project in Access and using wizards to do all the functionality. This is no longer the case and if you do that you will get a very low mark. You must write your own code and sub routines. Handing in page after page of automatically generated code will get you no marks. Write your own <B>Algorithm</B>s and take credit for it!
Make sure that all your <B>Database</B> <B>Table</B>s are normalised. If they aren't you will lose marks in the ../<B>Design</B>/ Section and your project will be very hard to get working. A quick way to test this is to see if your E-R Diagram only has 1-Many relationships. If you use anything else then you will be running into trouble.
If you are building your own code <B>Class</B>es make sure that you don't allow users direct access to any variables and that they use the appropriate get and set routines. Don't make everything public! If you can, use <B>Inheritance</B>. By implementing these things you'll find the exam much easier.
Make sure that the datatype you use are sensible. You will get marked down for using the wrong datatypes in your <B>Database</B> <B>Table</B>s and variables.
For example:
If you are <B>Record</B>ing the total number of chocolate bars in a shop you don't need to use a Long or Float, you can only have whole numbers of chocolate bars and it is unlikely you'll have over a few million items. Use an <B>Integer</B>!
If you are using variables to store things they must have a name that makes sense so you know what it does when you read its name in your code. 
For example:
If you are <B>Record</B>ing the total number of chocolate bars in a shop you don't want to use a name like variable1. What does variable1 mean? Use a sensible name such as NumChoc.
If you are creating subroutines to process things in your code make sure you give them a sensible name so that people know what they are doing when they see them in the code.
For example:
If you have written a piece of code to calculate the average price of a chocolate bar then don't call it FunctionA(), what does FunctionA() mean?! Call it ChocAverage().
If you are using lots of variable names and function names, stick to a single style for naming them. If you use lots of different conventions things are going to look ugly. Wikipedia guidance
For example:
Long variables can be very hard to read and much easier for you to make mistakes when writing them, try to shorten things where possible.
For example:
When you are using forms and lots of variables at the same time it can sometimes get very confusing whether you are talking about a variable price or the text box that stores the price. Get past this using prefixes:
A lot of programming environments help to indent your code automatically and you should be able to find one for the language you are using. Indenting helps people to quickly read and understand your code as it clearly shows the structure of functions, procedures, selection and iteration statements.
For example the following is very hard to read:
If you indent it, it becomes much easier to read:
Some of the best written code doesn't need comments because if you have structured it correctly and used all the proper naming conventions it should be pretty easy to read. However for the code you are writing you should put some comments to explain what each section does.
You need to provide all the code that you have written. For each of your forms provide:
For each of your modules/<B>Class</B>es provide:
For any <B>Database</B> <B>Table</B>s you have made, provide screen shots in <B>Design</B> view of mySQL or Access
When you get a piece of new software they often give you a user guide on how to configure the program, run the main features and fix any errors. This is what we are doing here. Even if your program isn't as complicated as you would like, you can still get top marks here with relative ease. Don't leave this section to the last minute!
This should look like a real user manual that someone would get if they bought your program. It needs to be appropriate, for example, if your program was a game for training receptionists called "Jane's tame receptionist game" it should have pictures of the game or Jane and be set out professionally. It would not be sui<B>Table</B> to have a picture of your face or a picture of your house on this page. Take a look at some manuals your teacher might have, or that you might have got, for example, with a mobile phone, be sensible!
This should be a separate mini contents page just for your User Manual.
Briefly explain what your program does and what it is for, a picture or two wouldn't do any harm.
This might include details on the required hardware and software configuration. For example:
You should then describe in detail and using screen shots the steps required to install the product. If you have written your own installer (There is one built into VS2010 or you can use NSIS - Nullsoft Scrip<B>Table</B> Install System) then show the individual steps, otherwise talk them through it step by step with screen shots. For example:
Take the user through 3 highly detailed and complex tasks that your system can perform. Step by Step using screen shots to show what to do. For example:
DO NOT just screen shot each form and talk about what it does. What we require is a step by step guide to achieve something
4 screen shots explaining the functionality of different parts of your system, using arrows and text boxes to describe. For example:
When you have been building your system, especially around the validation rules, if your user inputs incorrect data or tries to do something that the system doesn't allow, the system should not break. It should provide a simple to read error message, certainly not a computer generated memory dump! This section requires that you show at least 3 error situations then a step by step guide and explanation of how to fix the error. Errors might include:
VB.NET is an industry standard development platform. It offers a simple syntax that is easy to learn by beginners, yet offering the latest programming constructs and functionality.
VB 6.0 has a long history and lots of support in terms of teaching resources and available code. There are also Development Environments freely available. However, as of March 2008 VB6 has entered Microsoft's "non-supported phase" and no further development is being made on the language or the official development environment. VB 6.0 is largely looked down upon within Universities and thought by many not be be a good way to introduce programming.
VBA is a variant of VB 6.0 and is commonly used in Microsoft Office applications; especially Excel. This can be useful for automating tasks and creating programs/games within Excel.
VB.NET is a fairly new language built upon the .NET framework. This means it offers interoperability with languages such as C# and F#. The Development Platforms, Microsoft Visual Studio (Windows only) and Mono (cross platform), are being actively developed and the language is fully supported by Microsoft. VB.NET allows for easy <B>Object</B> Orientation and tools to create websites, console applications and phone applications. Many academics look down upon VB.NET, but it is unclear whether this might be a hang-over from their hatred of VB 6.0.
The code written for each is not compatible with the other. Microsoft provides a converter from VB 6.0 to VB.NET but it is not perfect.
Visual Basic.NET is currently the most popular language amongst centres running AQA A-Level Computing and all code in this wikibook is provided in VB.NET (there are plans to add python soon).
A free version of Visual Basic 2010 Express is available from Microsoft.
The multi-platform Mono project
COMP1 requires the student to sit an exam based around a command line program published by AQA. There are very few command line tutorials for VB.NET and the best currently available are:
Another way to start learning VB.NET is by starting with Microsoft Small Basic as it is a simplified version of VB.NET: both these <B>Compiler</B>s are available free. I would recommended that only a few weeks are spent using this since there a number of differences, e.g., Visual Basic.NET uses "Console" where Small Basic uses "TextWindow".
Small Basic comes with a Tutorial (PDF) which is an introduction to programming and the language. Reference Documentation is also available and displays all the built-in <B>Object</B>s with their Properties and Operations. Microsoft has also written a comprehensive curriculum. It has the feature to graduate to the full version and converts any Small Basic programs in the process. One of the language's most useful features is that it can publish any program online at a click of a button, providing a shortened URL, but Silverlight is needed for this. Silverlight is proprietary software and only officially works with Windows and OSX. SmallBasic is not available for Linux and there are no open-source alternatives (Like Mono and Xamarin Studio) and this may cause problems with students who do not use a Microsoft based system.
To complete the COMP3 theory exam students should have experience of programming many of the <B>Algorithm</B>s described. VB.NET allows for <B>Object</B> orientation with a few minor quirks.
The COMP4 project requires that students undertake a project of their own. VB.NET offers the ability for students to build console apps, forms, websites or phone apps. Students should not use Visual Basic for Applications.
Microsoft has made video tutorials available on its Beginner Developer Learning Center which increase in complexity through three tiers. The first tier introduces the Visual Studio programming environment. The second tier focuses on the key features of the language through forms. Finally the third tier follows the development of an RSS reader, this can be useful for COMP4 projects.
They also have an introduction document in the MSDN <B>Library</B>.
Home and Learn also offers useful tutorials on building a forms application, Visual Basic .NET Programming for Beginners.
The general wikibooks VB.NET article may also be useful.
Useful printed books are as follows:
Thanks for helping out!
This is a book about A-Level Computing. It aims to fit in with the Cambridge International AS and A Level Computing sylla<B>Bus</B> but is not endorsed by . It should be useful as a revision guide or to find alternative explanations to the ones in your textbook. If you haven't heard of an A-Level then this book probably won't be of much interest to you but you can find out about them at Wikipedia.
If any part of this book is unclear or even wrong then please post a comment on the discussion page or simply fix it yourself! In particular, please say if the book assumes any knowledge or skills which not all A-Level Computing students have.
You will meet several coloured boxes, here are their meanings:
"What the specification says you must learn for each chapter"
"Example questions and how to solve them"
"Topics that aren't examined but you might be interested in"
There will be a lot of concepts that you need to be familiar with, definitions are highlighted like so:
The book is split into the four sections. Each section is split into chapters with each chapter covering the topics for that section.
Hardware components are often categorised as being either input, output, storage or processing components. Devices which are not an integral part of the CPU are referred to as being peripherals. Peripherals are usually used for either input, storage or output (such as a hard disk, keyboard or printer). A device does not necessarily have to be outside the same physical box as the CPU. The best example of this is the hard disk, which is a peripheral even though it is not usually housed within the main case.
Output devices take data from the computer system and convert it to a form that can be read by humans. For instance a monitor creates a visual electronic display to output information created by the processor to the user.
Processing devices are the components responsible for the processing of information within the computer system. This includes devices such as the CPU, memory and motherboard.
Storage devices are components which allow data to be stored within a computer system. This includes devices such as hard disk drives and compact disk drives.
How many different hardware components can you list? Label each one with the labels "input", "output", "processing" or "storage" as appropriate.
Software components of a computer system have no physical presence, they are stored in digital form within computer memory. There are different categories of software, including "system software", "utilities" and "applications software". Software can also be described as being either "generic" or "bespoke".
System software is the software used to manage and control the hardware components and which allow interaction between the hardware and the other types of software. The most obvious type of system software is the computer's operating system but <B>Device Driver</B>s are also included within this category.
Utility software is software such as anti-virus software, <B>Firewall</B>s, disk defragmenters and so on which helps to maintain and protect the computer system but does not directly interface with the hardware.
Applications software (also known as 'apps') are <B>Design</B>ed to allow the user of the system complete a specific task or set of tasks. They include programs such as web browsers, office software, games and so on. They are usually the reason you bought the computer system in the first place and aren't concerned with the management or <B>Maintenance</B> of the system itself.
Any individual software package, whichever of the above types it falls into, can be either generic (or 'off-the-shelf') or it can be bespoke (custom-built). Generic software is mass produced with the intention that it will be used by a wide variety of different users in a range of different situations. Bespoke software is created for a specific purpose which will be used in a known environment.
Often generic software is used when there is a package available that meets the needs of the user. Because it is used by many more people the cost of creating it is spread over a greater number of people or organisations and so the cost to the individual is much lower. It also has the advantage that it is available immediately there's no waiting time involved while the software package is <B>Design</B>ed, created and tested. Bespoke software has the advantage that it can be tailor made to exact specifications but it significantly more expensive and will take time to create.
Create a <B>Table</B> to show what software packages of each type are installed on your computer.
The operating system is the main item of system software and without it no computer will work. All applications software runs within the operating system and does not directly interface with the hardware.
The operating system controls the system's hardware and stores and retrieves information from the system's memory. All hardware operates in a slightly different way and it is the operating system that hides this complexity from the applications software. Without this buffer between the hardware and applications every application would need to be written to work with all possible hardware combinations. Instead the applications are written to work with a particular operating system, which works with the hardware.
The operating system:
Operating systems can be categorised by how they process data: either in real-time or in batches as well by whether they are single-user of multi-user. Whether or not an operating system allows for multi-tasking is also an important <B>Attribute</B> of an operating system. For managing <B>Network</B>s containing many machines it is also necessary to have another type of operating system; a <B>Network</B> operating system.
The big advantage of computers is that they are fast. They are not clever or magical but often appear to be because they can do so many simple things in a very short amount of time. Even a quite basic modern processor can perform several billion operations per second. The slowest part of any computer system is the Human operating it. In reality this means that a computer spends much of its time waiting for instructions from a Human. In the early days of computers when computer systems were more expensive this inefficiency was a big problem. Batch-processing was used as a means to overcome it.
By grouping processing requests together into batches computers can be used more efficiently by removing the slowest part of the system; the user. These days when computers are cheaper it is sometimes more desirable for operating systems to run in real-time.
Batch processing is still used in computer systems where there are large amounts of data to be processed, such as in bank mainframes which process millions of customer <B>Record</B>s. Real-time processing is more common in systems where responsiveness is important such as when running simulations.
A single-user operating system is one which allows a single user to access it at any one time. Although there may be different users with different access rights only one user can use the system at once. The desktop PCs, laptops, <B>Table</B>ts and so on that you will be used to using operate this kind of operating system. By contrast a multi-user operating system allows several users to access it simultaneously. An example of this type of operating system is known as a thin client system, which consists of a single powerful computer and several dumb terminals. The dumb terminals simply provide an interface with the server which is where all processing takes place.
A user interface, also sometimes called a human-computer interface, comprises both hardware and software components. It handles the interaction between the user and the system.
There are different ways of interacting with computer systems which have evolved over the years. There are five main types of user interface:
Command line interfaces are the oldest of the interfaces discussed here. It involves the computer responding to commands typed by the operator. This type of interface has the drawback that it requires the operator to remember a range of different commands and is not ideal for novice users.
Graphical user interfaces (GUI) are sometimes also referred to as WIMP because they use "Windows", "Icons", "Menus" and "Pointers". Operators use a pointing device (such as a mouse, touchpad or trackball) to control a pointer on the screen which then interacts with other on-screen elements. It allows the user to interact with devices through graphical icons and visual indicators such as secondary notations. The term was created in the 1970s to distinguish graphical interfaces from text-based ones, such as command line interfaces. However, today nearly all digital interfaces are GUIs. The first commercially available GUI, called "PARC," was developed by Xerox. It was used by the Xerox 8010 Information System, which was released in 1981. After Steve Jobs saw the interface during a tour at Xerox, he had his team at Apple develop an operating system with a similar <B>Design</B>. Apple's GUI-based OS was included with the Macintosh, which was released in 1984. Microsoft released their first GUI-based OS, Windows 1.0, in 1985.
[[File:Trisquel GNU Linux 3.5 screenshot - Office.jpg|550px|center|Screenshot of a graphical user interface used by the [[w:OpenOffice.org|OpenOffice.org]] software package.
A menu driven interface is commonly used on cash machines (also known as automated teller machines ( ATM's), ticket machines and information kiosks (for example in a museum). They provide a simple and easy to use interface comprised of a series of menus and sub-menus which the user accesses by pressing buttons, often on a touch-screen device.preferably if one has knowledge on UML modeling can be a good example to <B>Design</B> architecture of the machine. 
[[File:Bankomat 050421.jpg|400px|center|ATM machine with menu drive interface.]]
A form-based interface uses text-boxes, drop-down menus, text areas, check boxes, radio boxes and buttons to create an electronic form which a user completes in order to enter data into a system. This is commonly used on websites to gather data from a user, or in call centres to allow operators to quickly enter information gathered over the phone.
[[File:Form.png|center|An example of a form based user interface.]]
A natural language interface is a spoken interface where the user interacts with the computer by talking to it. Sometimes referred to as a 'conversational interface', this interface simulates having a conversation with a computer. Made famous by science fiction (such as in [[w:Star Trek|Star Trek]]), natural language systems are not yet advanced enough to be in wide-spread use. Commonly used by telephone systems as an alternative to the user pressing numbered buttons the user can speak their responses instead.
This is the kind of interface used by the popular [[w:iPhone|iPhone]] application called [[w:Siri|Siri]] and [[w:Cortana|Cortana]] in [[w:Windows|Windows]].
[[File:Pranavmistry.jpg|thumb|left|Pranav Mistry demonstrating the Sixth Sense device]]A recent innovation in user-interfaces is the gesture-driven interface. This is an interface which is controlled by a human making physical gestures which are then detected by the computer. The idea was discussed at the [[w:TED (conference)|TED conference]] by [[w:Pranav Mistry|Pranav Mistry]] who invented the [[w:SixthSense|Sixth Sense device]]. This uses cameras to detect human motion which it uses to determine what the user wants to do.
Other examples include the increasing use on touch-screen devices (such as mobile phones and <B>Table</B>t computers) of gestures such as 'pinching' to zoom in and out. Some [[w:games consoles|games consoles]] are starting to use gesture driven interfaces. The [[w:Wii|Wii]] was the first such console which used a hand-held controller to detect gestures. More recently the [[w:Xbox|Xbox]] introduced a system similar to SixthSense which uses a camera to detect motion.
Utility software includes programs which perform functions which help operate and maintain a computer system. This includes disk formatters, automated backup software, hardware <B>Device Driver</B>s, anti-virus software, <B>Firewall</B> software and other similar types of software.
2.1 /<B>Algorithm</B> <B>Design</B> and problem-solving/
2.2 /Data representation/
2.3 /Programming/
2.4 /Software development/
Basic process flow:
Start - Fetch - Decode - Execute - Check for <B>Interrupt</B> - No - Check for more instructions - No - Return to previous instruction? - No - End 
Operating system is made out of 4 components:
The Scheduler 
1.1 /Number representation/
1.2 /Communication and Internet technologies/
1.3 /Hardware/
1.4 /Processor fundamentals/
1.5 /System software/
1.6 /Security, privacy and data integrity/
1.7 /Ethics and ownership/
1.8 /<B>Database</B> and data modelling/
Client Side Server Model
Server:
Is a powerful computer running a server program managing the requests of the client
Client
Are PCs or workstations which users run application. Clients rely on servers for resources such as files and devices 
Client Side Server Model
"It is a distributed communication framework within a <B>Network</B> amongst clients and servers.
Server
Is a powerful computer running a server program managing the requests of the client
Client
Are PCs or workstations which users run application. Clients rely on servers for resources such as files and devices
Web servers 
Application of Client server model
When a bank customer accesses online banking services with a web browser (the client), the client initiates a request to the bank's web server. The customer's login credentials may be stored in a <B>Database</B> , and the web server accesses the <B>Database</B> server as a client. 
An application sever interprets the returned data and provides the output to the web server. Finally the web server returns the result to the client web browser for display
Software Utilization
"Software programs usually run off both the Server and the Client.
Creation/modification of the <B>Database</B> structure using this language - written in SQL
Query and <B>Maintenance</B> of data done using this language – written in SQL 
Principles of ethics and ownership: 
The physical parts of a computer system that you can see and touch such as the keyboard,mouse and mouse are called hardware.There are four main categories of computer hardware:
An input device is hardware component that allows you to enter the data or instruction into the computer. There are many manual/automatic input devices. Most widelu used input devices are:
keyboard
Keyboard is the most commonly used input devices. The basic mechanical keyboard relies on springed keys being pressed down to complete an electrical circuit. This circuit then transmits a binary signal to the computer to represent the key pressed.
scanner
Here are the steps that a scanner goes through when it scans a document:
The document is placed on the glass plate and the cover is closed. The inside of the cover in most scanners is flat white, although a few are black. The cover provides a uniform background that the scanner software can use as a reference point for determining the size of the document being scanned. Most flatbed scanners allow the cover to be removed for scanning a bulky <B>Object</B>, such as a page in a thick book.
A lamp is used to illuminate the document. The lamp in newer scanners is either a cold cathode fluorescent lamp (CCFL) or a xenon lamp, while older scanners may have a standard fluorescent lamp.
The entire mechanism (mirrors, lens, filter and CCD array) make up the scan head. The scan head is moved slowly across the document by a belt that is attached to a stepper motor. The scan head is attached to a stabilizer bar to ensure that there is no wobble or deviation in the pass. Pass means that the scan head has completed a single complete scan of the document.
The image of the document is reflected by an angled mirror to another mirror. In some scanners, there are only two mirrors while others use a three mirror approach. Each mirror is slightly curved to focus the image it reflects onto a smaller surface.
The last mirror reflects the image onto a lens. The lens focuses the image through a filter on the CCD array.
The filter and lens arrangement vary based on the scanner. Some scanners use a three pass scanning <B>Method</B>. Each pass uses a different color filter (red, green or blue) between the lens and CCD array. After the three passes are completed, the scanner software assembles the three filtered images into a single full-color image.
finger print technology 
Fingerprint recognition or fingerprint authentication refers to the automated <B>Method</B> of verifying a match between two human fingerprints. Fingerprints are one of many forms of biometrics used to identify individuals and verify their identity.
Retina scanner
Retina scanner is used to <B>Record</B> the pattern of blood vessels at the back of someone eyes.
Number Representation
Binary:
Hexadecimal:
Two’s Complement:
Let's say you want to convert -35 into Binary Twos Complement. First, find the binary equivalent of 35 (the positive version)
Now add an extra bit before the MSB, make it a zero, which gives you:
Now 'flip' all the bits: if it's a 0, make it a 1; if it's a 1, make it a 0:
This new bit represents -64 (minus 64). Now add 1:
If we perform a quick binary -> denary conversion, we have: -64 + 16 + 8 + 4 + 1 = -64 + 29 = -35
To find the value of the negative number we must find and keep the right most 1 and all bits to its right, and then flip everything to its left. Here is an example:
We can now work out the value of this new number which is:
To find the value of the negative number we must take the MSB and apply a negative value to it. Then we can add all the heading values together
Image Representation:
Sound Representation:
1) Fetch:
First step the CPU carries out is to fetch some data and instructions from the main memory which is stored temporary memory areas called registers
The CPU makes use of a vital hardware path called <B>Address <B>Bus</B></B>. The CPU places address of the next item to be fetched on the <B>Address <B>Bus</B></B>
Data from this address moves from the main memory into the CPU by traveling in the data <B>Bus</B>
2) Decode:
The CPU needs to make sense of the instruction
The CPU is <B>Design</B>ed to understand a specific set of commands called the "instruction set".
The CPU decodes the instruction
3) Excute:
Data processing takes place
The instruction is excuted
The CPU sets itself up to begin another cycle once more
This page contains a number of tips or hints that will be useful for the examinations:
Many people know from their own experience that it's not easy to install an Apache web server and it gets harder if you want to add MySQL, PHP and Perl. XAMPP is an easy to install Apache distribution containing MySQL, PHP and Perl. XAMPP is really very easy to install and to use - just download, extract and start.
At the moment there are four XAMPP distributions:
To install XAMPP you only need to download and extract XAMPP, that's all. There are no changes to the Windows registry (not true if you use the Windows installer version of XAMPP) and it's not necessary to edit any configuration files. It couldn't be easier!
To check that XAMPP is working some sample programs are included, there is a small CD collection program (written in PHP using MySQL) and a small guest book software (written in Perl) and several other demonstration utilities.
If you decide that XAMPP isn't needed any more just delete the XAMPP directory and it's completely removed from your system.
However if you use the Windows installer version of XAMPP it's recommended to use the uninstall feature. As every installer the installer will make registry entries to remember the install.
Ref: http://www.apachefriends.org/en/xampp.html Accessed 2/3/2011
The distribution for Linux systems (tested for SuSE, RedHat, Mandrake and Debian) contains: Apache, MySQL, PHP & PEAR, Perl, ProFTPD, phpMyAdmin, OpenSSL, GD, Freetype2, libjpeg, libpng, gdbm, zlib, expat, Sablotron, libxml, Ming, Webalizer, pdf <B>Class</B>, ncurses, mod_perl, FreeTDS, gettext, mcrypt, mhash, eAccelerator, SQLite and IMAP C-Client.
The distribution for Mac OS X contains: Apache, MySQL, PHP & PEAR, SQLite, Perl, ProFTPD, phpMyAdmin, OpenSSL, GD, Freetype2, libjpeg, libpng, zlib, Ming, Webalizer, mod_perl.
The distribution for Solaris (developed and tested with Solaris 8, tested with Solaris 9) contains: Apache, MySQL, PHP & PEAR, Perl, ProFTPD, phpMyAdmin, OpenSSL, Freetype2, libjpeg, libpng, zlib, expat, Ming, Webalizer, pdf <B>Class</B>.
The distribution for Windows 2000, 2003, XP, Vista, and 7. This version contains: Apache, MySQL, PHP + PEAR, Perl, mod_php, mod_perl, mod_ssl, OpenSSL, phpMyAdmin, Webalizer, Mercury Mail Transport System for Win32 and NetWare Systems v3.32, Ming, FileZilla FTP Server, mcrypt, eAccelerator, SQLite, and WEB-DAV + mod_auth_mysql.
The aim is to create a text book which will support the new A level course (OCR Level 3 Advanced subsidiary GCE in Computer Science H446).
Content for A Level:
1.1. The <B>Character</B>istics of contemporary processors, input, output and storage devices
/1.1.1 Structure and function of the processor/
/1.1.2 Types of processor/
1.1.3 Input, output and storage
1.2. Software and software development
1.2.1 System software
1.2.2 Applications generation
1.2.3 Software Development
1.2.4 Types of Programming Language
1.3. Exchanging data
1.3.1 Compression, <B>Encryption</B> and Hashing
1.3.2 <B>Database</B>s
1.3.3 <B>Network</B>s
1.3.4 Web Technologies
1.4. Data types, data structures and <B>Algorithm</B>s
1.4.1 Data Types
1.4.2 Data Structures
1.4.3 <B>Boolean</B> Algebra
1.5. Legal, moral, ethical and cultural issues
1.5.1 Computing related legislation
1.5.2 Ethical, moral and cultural issues
2.1. Elements of computational thinking
2.1.1 Thinking abstractly
2.1.2 Thinking ahead
2.1.3 Thinking procedurally
2.1.4 Thinking logically
2.1.4 Thinking concurrently
2.2. Problem solving and programming
2.2.1 Programming techniques
2.2.2 Computational <B>Method</B>s
2.3 <B>Algorithm</B>s
2.3.1 <B>Algorithm</B>s
This book aims to inform about the current content of the OCR A-Level Computing H446 Specification. It is not endorsed by OCR and is simply a collection of notes on the topic. This WikiBook may not contain completely accurate information, however it is intended as to be similar to a revision guide and as such the information contained within it may have been simplified to aid understanding.
= <B>Table</B> of Contents =
Unit 1.1 The <B>Character</B>istics of contemporary processors, input, output and storage devices
Unit 1.2 Software and software development
Unit 1.3 Exchanging data
Unit 1.4 Data types, data structures and <B>Algorithm</B>s
Unit 1.5 Legal, moral, cultural and ethical issues
Computer systems are made up of Hardware, Software, and Applications. "Hardware" refers to the physical components of a computer, such as the monitor, keyboard, mouse, hard drive and system board. "Software" refers to the set of instructions that directs the hardware to accomplish a task. The best known example of software is a computer's operating system, which provides a way for the user to interact with the hardware. Software uses hardware to perform four basic functions: input, processing, storage, and output. An "application" is specialized software that performs a certain function, such as word processing or media reproduction.
There are several topics in this unit:
<B>Boolean</B> Algebra had very little practical use until digital electronics and computers were invented. Digital computers use the binary number system, which has only two stats, 0 and 1. <B>Boolean</B> algebra is ideal for this <B>Table</B>
<B>Boolean</B> Equation: An equation that expresses a <B>Boolean</B>'s output Q in terms of <B>Boolean</B> inputs X,Y and Z etc.. To which one or more <B>Boolean</B> functions, such as OR, AND and NOT, are applies, more in the Logic gates section.
Logic Gate
NOT 
AND 
OR
The three logic gates above and the simpliest form of Logic Gates
NAND Function
A NAND function is a <B>Boolean</B> function which is simply a combination of the AND function and the NOT function.
NOT AND is abbreviated to NAND.
A NAND can be written in the form of
NOT A.B or A.B with a line over the top.
With the line above meaning not IMPORTANT: The line is NOT dotted !!!
This module requires students to analyse a real current system and develop a new one. There are several stages in this coursework:
Please note that these categories may bear different names. For example, 'Implementation' maybe known as 'Programming'.
In 2009, this coursework is worth 40% of the A2-Level, and overall, 20%.
According to the current (2009) specification for the course, downloadable from the OCR website, the Project Unit F454 is worth 40% and the exam F453 is worth %60.
<B>Arithmetic Logic Unit (ALU)</B> - A vast array of logic gates, this component deals with basic arithmetic such as binary addition or subtraction. It is capable of many complex mathematical functions, for example sine, cosine and floating point division.
<B>Control Unit (CU)</B> - A component which co-ordinates the various units within the processor, and controls the flow of data throughout it.
Registers located in the processor:
<B>Bus</B>es are a collection of wires through which data is transmitted from one part of a computer to another. These typically include:
This cycle describes the standard steps needed for processing to take place.
= Factors Affecting CPU Performance =
The performance of a CPU can be affected by 4 different quantities:
The <B>Clock Speed</B> of the processor is the number of FDE Cycles it can perform per second, for example 3.4 GHz is 3,400,000,000 cycles per second. The higher the <B>Clock Speed</B>, the greater the number of FDE Cycles that can occur each second, hence higher <B>Clock Speed</B>s improve performance.
<B>Cache Memory</B> is memory which is built directly into the CPU. It is far faster to access than RAM, as it is much closer to the registers that require the data, and it also operates at a similar speed to the CPU, so has very little lag comparative to retrieving data from RAM. It contains multiple levels of cache which differ in size and distance from the CPU, Level 1, 2 and 3 cache. Level 1 is closest to the CPU and is the smallest, whereas Level 3 is furthest from the CPU and is the biggest. The reason all the cache isn't simply made Level 1 is cost- faster memory is more expensive.
Frequently used data such as parts of the OS are stored in the cache, allowing the processor to run faster as it doesn't have to rely on slower fetches from the RAM as often.
A multi-core processor is one which contains multiple distinct processing units within a single CPU. Each core can operate independently of the others, and will each have their own low level cache, as well as sharing a high level cache. Different cores can run different applications at the same time during multitasking, allowing more actions to occur each second.
However, multiple cores do not always improve processor performance; if a core is processing an instruction which is dependent on the outcome of another instruction, being processed by another core, it will have to wait until that core returns a result before the instruction can finish processing. This can cause hanging, where a core is wasted while it waits for the result of another instructions execution.
<B>Pipelining</B> is a process that can be used to improve the performance of a CPU. It operates in such a way that whilst the processor is decoding an instruction, the next instruction can be fetched from memory. This works best in code where the next instruction is not dependent on the instruction before it- when code branches, the CPU will have decoded the wrong next instruction and so will have to 'clear the pipes' by getting rid of the current fetch and decode steps.
There are 2 main architectures that our sylla<B>Bus</B> is concerned with - Von Neumann and Harvard:
This architecture has a single control unit. It works sequentially through instructions, and stores instructions and data together in the same memory unit.
This architecture is almost identical to Von Neumann, however it stores data and instructions in separate memory units. The CPU is also capable of reading an instruction and performing memory access at the same time, even without a cache. This is because there are separate <B>Bus</B>es for the data and instructions. It is possible to use <B>Pipelining</B> in <B>Harvard Architecture</B>.
This is a modified form of <B>Harvard Architecture</B>. It relaxes the strict separation of data and instructions, but still lets the CPU access more than 2 memory <B>Bus</B>es.
= RISC and CISC Architectures =
<B>Reduced Instruction Set Computing (RISC)</B> and <B>Complex Instruction Set Computing (CISC)</B> are different <B>Design</B> strategies for CPUs.
RISC is based on a smaller instruction set. This results in higher performance when combined with a microprocessor architecture capable of executing the instructions using fewer cycles per instruction. These instructions perform simple tasks, as a result of this more complex actions require the combination of numerous instructions. This means that a more complex task may take many more FDE cycles to complete. Its simple <B>Design</B> means it requires less power and generates less heat, and as such is used in por<B>Table</B> devices.
CISC is a <B>Design</B> where a larger and more complex instruction set is permitted. The <B>Design</B> is such that single instructions can execute several low level operations (e.g. load from memory, store to memory or an arithmetic operation), or are capable of multi step operations or addressing modes within single instructions. These instructions may take multiple FDE cycles and may have a variable format. It is also capable of multiple addressing modes (e.g. Indexed, Intermediate, Direct or Indirect). As a result of this more complex <B>Design</B>, the CISC architecture tends to generate more heat due to extra power requirements, making it less por<B>Table</B>. They also tend to be more expensive, and can cause programs to run slower due to their extensive circuitry. However, they make the life of a programmer easier as fewer instructions have to be written to accomplish the same task.
Graphics Processing Units (GPU's) are specialist processors <B>Design</B>ed for graphics rendering, often in 3D. They tend to run in SIMD (Single Instruction Multiple Data), as much of the processing requires the same action to be performed to multiple pieces of data. For example, rotating an <B>Object</B> may require performing the same mathematical function to all of its vertices. GPU's are increasingly being used in other <B>Field</B>s, such as physical system modelling, audio processing, password cracking and machine learning.
There are several different types of processor available to use in various different systems:
This is an additional processor working alongside the main CPU. It is <B>Design</B>ed, and indeed optimized, to be used for a specific task, and improves the processing speed by executing concurrently with the main CPU. An example of this could be a maths <B>Co-processor</B>, or a floating point accelerator.
A Scalar CPU is one which performs computations on a single number or set of data at one time. Most modern-day computers have scalar CPU's. They are known as Single Instruction Stream Single Data Stream processors, or SISD for short.
An Array CPU (Also known as a Vector CPU) is one which allows a single instruction to simultaneously operate on multiple data locations. Applying the same calculation to several pieces of data is very quick. It is known as a SIMD processor, Single Instruction Multiple Data. Examples of their use include weather forecasting and airflow simulations.
A parallel processor uses independent processors to work on the same program. The process in question is split into tasks, each of which may be processed by any of the processors. The processors are all coordinated by a complex operating system. Programs must be specifically written for parallel processing, otherwise some processes cannot be completed until others have finished, as they depend on the outcome of the current process. 
Primary storage is <B>Volatile Memory</B>, <B>Design</B>ed for fast access by the CPU. It consists of the Registers, Cache and RAM. Usually small, it runs at incredibly high speeds (the cache runs at almost processor speed).
A very fast form of <B>Volatile Memory</B>, it is made up of many store locations, each of which stores a binary number, and is identified by a unique address.
<B>Non-<B>Volatile Memory</B></B> that can only be read from, not written to. It is often used to store the BIOS of a computer, and is used during the boot sequence.
Another form of high speed <B>Volatile Memory</B>, <B>Cache Memory</B> is <B>Design</B>ed to operate close to the speeds of processor. It is very small and holds the most frequently accessed data, in order to reduce the time the processor is waiting for data and instructions.
Also known as the Backing Store, secondary storage is <B>Non-<B>Volatile Memory</B></B> used to permanently store data such as the operating system and the users files.
Uses a material that can be magnetised, each small section is magnetised to be north or south to indicate that the bit is 1 or 0. <B>Magnetic Storage</B> has high capacity and is quick to access data (when not fragmented) but has moving parts which will eventually fail.
Examples include: Hard disk drives, magnetic tape
Optical media use a laser to determine if pits on the disk reflect or don't reflect indicating if the bits are 1 or 0. Optical media are cheap to purchase but have lower capacity compared to other types of storage and are slow to access data.
Examples include: CD, CD-ROM, CD-R, CD-RW, DVD
<B>Flash Memory</B> uses electrons which can be trapped in gates to indicate if the bit is 1 or 0. <B>Flash Memory</B> is generally more expensive per GB but it operates at much higher speeds and uses less power as it has no moving parts.
Examples include: USB memory drives, SD cards, solid sate drives
In some cases, if the machine runs out of primary memory, it needs a way to expand it in order to accmodate more information or programs. This is done through <B>Virtual Memory</B> as the physical hardware cannot be expanded. This is when a portion of the secondary storage is reserved to store items that were in the RAM. As data is needed it is copied from this area into the RAM and if it has not been needed for a reasonable portion of time it is copied to the secondary storage. The entire process is called <B>Paging</B>.
<B>Paging</B> has advantages in so far as it allows the computer to keep functioning even when the RAM has been filled; however, it also has its downsides as reads from the secondary storage into the RAM take significantly longer than just reading from the RAM. This means that the computer can seem slow and unresponsive to some tasks as the data is read between sources. Additionally, if this read and write process happens a lot, the secondary storage will constantly be read from which can delay the system even more as the disc is constantly looking for the files it requires. This effect is called "Disk Thrashing".
This is the concept of storing data "in the cloud". The actual process of data storage is transfer across the internet to an offsite server, which holds the data, and is available for access from anywhere. It can be used for automatic backups or file sharing, and often has very large storage capacities. <B>Virtual Storage</B> can allow you to reduce costs as it prevents you needing a large server to store large amounts of data. A disadvantage of this is that you can no longer control your own security, so could be more vulnerable.
= Operating Systems =
In the early days of computing, if a program needed any inputs or outputs, it would need to contain specific code to handle communication with <B>Input and Output Devices</B>. Short subroutines were developed to carry out these basic tasks. Eventually these subroutines were joined together to make an Input Output Control System (IOCS). As the IOCS became more complex, it turned into an Operating System. As more programs began to be written in high level code, <B>Translator</B>s were needed, which were then also incorporated into operating systems.
All operating systems provide the following functionality:
There are several different types of operating system:
The user of a multitasking operating system is given the impression that the system can carry out more than one task at a time. This can be achieved by giving each task a very short time period with the CPU while rotating through different jobs, or by using multiple cores to run tasks concurrently.
This operating system allows for multiple users to access the same system at the same time. This is achieved by giving each terminal a time slice and rotating through each terminals requests to the CPU. The CPU can differentiate between different users data and programs by storing them in different areas of its main memory. Flags prevent time slices from terminals with no task wasting the CPU's time, and priorities can increase the size or quantity of time slices a terminal is given.
This OS uses many different locations to store files and process data. The file access can be sped up using this system, as more than 1 file command is able to occur at any one time.
With a Real Time OS, the data processed or the action taken at the time of input is quick enough to then affect the next output. It is defined as online, as the user can communicate directly with the processor. It is normally used when an immediate response is required, for example a nuclear power station. A real time OS is guaranteed to give an output in a given time period (normally a short one).
This is similar to a real time OS, although not as immediate. It only allows pre-defined, structured transactions. Each transaction is usually short and the processing activity for each transaction is usually programmed in advance. It is largely used in <B>Database</B>s.
This OS is extensively used in industry, as it allows for mass production and continuous process systems. It can provide automation, which reduced the requirement for staffing. It may make use of a feedback or a continuous loop. The controls may be continuous (e.g. a cruise control system) or a sequence of discreet events (e.g. a sprinkler system). The sensors in this system do not directly control the outputs, they are all controlled and coordinated by the CPU.
An <B>Embedded OS</B> is usually developed for a single task. It is usually device specific and operates on low powered CPUs and RAM. They can be found in TV's, washing machines etc. They are optimized for their task, so can run faster because they are simpler than a general OS.
Memory needs to be managed in order for it to be used efficiently; there are two main <B>Method</B>s, <B>Paging</B> and <B>Segmentation</B>.
With the physical process of <B>Paging</B>, memory is split into equal sized sections, known as pages. The programs are then allocated the correct number of pages for their size. Pages are of a fixed size, so some programs may have excess memory that they do not require.
<B>Segmentation</B> is a logical process, where the memory is split into sections which reflect the size of the program - these divisions are known as segments. This relies heavily on the OS and <B>Linker</B>'s and <B>Loader</B>s. In this way, programs are less likely to have excess memory space allocated.
When there is not enough RAM to store all the running programs, an area of the hard drive will be assigned as '<B>Virtual Memory</B>'. Programs that have been inactive for the longest will be stored here, then loaded back into the RAM when needed. This allows a computer to multi-task using more, or bigger, programs than would normally be possible.
The BIOS stands for Basic Input Output System. It is a small program stored on a ROM chip on the motherboard. It runs before the OS starts up, and is used to ensure the health of a computer system. The first thing that occurs when a computer turns on is a reset signal is sent to the CPU by the power supply, which tells the CPU to begin executing code from the ROM chip. This then runs a series of checks known as POST (Power On Self Test) which include:
Once these checks are completed, the system will boot the OS using the boot<B>Loader</B> to load the OS's <B>Kernel</B> into memory. If these checks fail, the BIOS will use beep codes to inform the user of the error. Beep codes are specific to manufacturers so they are usually documented in their instruction manual.
<B>Device Driver</B>s are small programs which accompany a piece of hardware associated with a computer. They are <B>Design</B>ed to inform the operating system about how to communicate with the peripheral devices.
A <B>Virtual Machine</B> is a piece of software that allows a computer to emulate another machine. An advantage of a <B>Virtual Machine</B> is that it can be backed up and duplicated. You can even run more than one <B>Virtual Machine</B> on a single physical machine.
A <B>Virtual Machine</B> can be used to emulate another OS. This can allow a developer to test programs on multiple platforms, or can be used to run software that isn't supported on the host OS. Apple OSX, Ubuntu and Windows can all be virtualised. Whole <B>Network</B>s can also be made up of <B>Virtual Machine</B>s, which is often used by <B>Bus</B>inesses and schools as it provides a cheap solution for providing many people a machine to work on.
Intermediate code is halfway between <B>Object</B> code and machine code. It is faster to run than <B>Source Code</B> but is also highly por<B>Table</B>, as it can run on many different platforms by using a <B>Virtual Machine</B> to read it.
An <B>Interrupt</B> is a signal sent to the CPU which is generated by source such as an I/O device or a system software routine, which causes a break in the execution of the current routine. There are various different types of <B>Interrupt</B>:
An <B>Interrupt</B> is detected by checking the <B>Interrupt</B> register at the end of each FDE cycle. The system will compare the priority of the currently running task to the priority of the <B>Interrupt</B> - if the current task has the higher priority, the current task will continue running. However if the <B>Interrupt</B> has the higher priority, the <B>Interrupt</B> Service Routine (ISR) begins. It copies the contents of the CPU registers to a stack, then runs the <B>Interrupt</B> until it is completed. Next, the <B>Interrupt</B>'s flag in the <B>Interrupt</B> queue is reset, and the system checks for any further priority <B>Interrupt</B>s before restoring the contents of the registers from the stack. During storage, <B>Interrupt</B>s are stored in a queue, and their position in the queue determines their importance to the system, user and current job. Priorities are in place to allow the system to decide between an <B>Interrupt</B> and the current task. It allows the system to choose between <B>Interrupt</B>s, if two occur at the same time. It ensures that the most urgent task is performed first, and efficient use of the processor. Notably, one <B>Interrupt</B> could <B>Interrupt</B> another if a higher priority <B>Interrupt</B> was triggered before a lower priority <B>Interrupt</B> was finished executing.
There are 3 different levels of <B>Scheduling</B>:
There also 2 different types of <B>Scheduling</B>:
<B>First Come First Serve</B> (FCFS) - The first job to enter the running queue is the first to enter the running state. This <B>Algorithm</B> favours longer jobs.
<B>Shortest Job First</B> (SJF) - Sorts the jobs in the ready queue in ascending order of the time needed.
<B>Round Robin</B> (RR) - Each job is given a maximum amount of processor time (a time slice). After this time it will return to the queue. Once the job is finished, it leaves the queue.
<B>Shortest Remaining Time</B> (SRT) - The ready queue is sorted on the amount of expected time left. This favours shorter jobs as longer jobs may never be started.
Multi Level Feedback Queues - A number of different queues are used, each with a differing priority. The <B>Algorithm</B> can move jobs between the queues depending on their behavior.
The purpose of <B>Scheduling</B> is to ensure all jobs are processed, and change priorities where necessary. It ensures as many jobs are processed in the shortest amount of time, whilst maximising the number of users and the system response times. Its key goal is to utilise the processor efficiently.
<B>Closed Source</B> programs are ones where software is compiled and provided to the user, without revealing the <B>Source Code</B>. This prevents users altering the code for personal gain or malicious use. It is usually sold commercially, meaning it is thoroughly tested and usually has free support associated with it.
The <B>Source Code</B> of <B>Open Source</B> software is openly available to download. This means anybody is able to modify the code as they wish and help develop the software further. The most well known <B>Open Source</B> project is Linux, which was the basis for the Android OS. It is often free, however some companies will provide free software but charge a support fee. <B>Open Source</B> projects tend to be produced by armies of volunteers, coders and testers. They can lack the polish and thorough testing of <B>Closed Source</B> programs, which could leave them feeling slightly clunky. However, if there are many people willing to contribute to them, they will receive regular updates and any flaw of one volunteer can be made up by another.
A utility is a relatively small program which has a single purpose, usually involving system <B>Maintenance</B>. Examples include Antivirus, Antispam, <B>Firewall</B>s, Backups, Disk Defragmenters, Compressors and File Managers.
<B>Translator</B>s convert <B>Source Code</B> to <B>Object</B> code, whilst detecting errors in the <B>Source Code</B>.
Programs written in a high level language (such as Python, Basic, C++ or Ruby). These languages allow a halfway house between natural language and machine code.
Once a program has been converted into machine code it is called an <B>Object</B> program, composed of <B>Object</B> code. There is a one-to-one relationship between <B>Object</B>/machine code and assembly code. Each <B>Opcode</B> has a machine and assembly code equivalent. The only exception to this rule is labels, which are created on the fly, as actual locations replace labels in translation.
<B>Interpreter</B>s translates and runs a single line/statement of code at a time. An <B>Interpreter</B> will report an error when it translates a line that contains an error, and will then stop interpretation and indicate the position of the error. Each time the program is run the <B>Interpreter</B> must be present. The program will run slower due to the translation taking up time and some lines being translated many times, for example if they are in a loop. <B>Interpreter</B>s are often used in program development so that bugs and errors can be found without compiling the program for each test.
An <B>Assembler</B> converts a low level program into machine code prior to its execution. It reserves storage for instructions and data, and replaced mnemonic <B>Opcode</B>s with machine codes. Symbolic addresses are replaced with numeric addresses, and it creates a symbol <B>Table</B> to match labels and addresses. It will also check the syntax and give error diagnostics.
<B>Compiler</B>s translate whole high level programs as a unit and create an execu<B>Table</B> program. This protects the program from malicious use or modification. The compiled program is architecture specific, and during compilation the <B>Compiler</B> may report many errors in the <B>Source Code</B>, some of which may be spurious. During compilation the program is optimised, which will improve its speed and reduce its size. Once the execu<B>Table</B> is created, the <B>Compiler</B> is no longer required.
There are several stages of compilation, as outlined below:
Libraries contain pre-written code which can be accessed and run by programs. They allow developers to use pre-written and pre-tested code, that is often <B>Design</B>ed to handle complex tasks such as graphics or cryptography, which often require a certain level of expert knowledge.They are accessed and used through an Application Programming Interface (API).
<B>Library</B> routines are examples of these pieces or pre-written code.They are pre-compiled and error free, and as such are ready to use, reducing work and time required when programming. They can be used multiple times, and many have been written in a different source language. It allows the programmer to make use of other peoples expertise, meaning you won't end up 'reinventing the wheel' unnecessarily.
The purpose of a <B>Linker</B> is to include the code used from any libraries into the final program. They can be either static or dynamic; static <B>Linker</B>s incorporate the code directly into the execu<B>Table</B>, which can dramatically increase its size. Dynamic <B>Linker</B>s link to the code only when it is run, as it is stored on the programs computer, thus reducing the size of the execu<B>Table</B>.
<B>Loader</B>s are simply responsible for loading a program into memory, and are part of the operating system. It handles the addresses when the program is run.
The <B>Spiral Model</B> centres around handling risk. It uses four stages, each of which forms a quarter of the spiral which is looped through:
The <B>Spiral Model</B> handles risk well and is suited to large projects, but requires skilled risk assessors and managers, which can be expensive.
This is a well known model, consisting of a sequence of stages, each of which only begins once the previous stage is completed. It is possible to traverse back through the model to a previous step if necessary. The stages involved are:
The problem must be carefully identified before the analyst can start the process of <B>Design</B>ing and building a system. This is because:
This study uses TELOS (Technical, Economic, Legal, Operational & <B>Scheduling</B>) to ensure that the project can be completed:
Other factors could include social or environmental effects.
This study results in a Feasibility Report, which details the users requirements, the existing software and hardware, the current systems scope, the major data processing functions and processes, a cost-benefit <B>Analysis</B> and a conclusion with recommendations.
The <B>Analysis</B> involves understanding the current system, the requirements of the new system, proposing the new system and a specification for the new system.
This technique involves finding out as much as possible about the function of the current system. It can be done in multiple ways:
All the inputs, processing and outputs must be <B>Design</B>ed for the new system. This can include screen <B>Design</B>s and printed reports. It requires the type of system to be defined, for example a batch or real time system. The software installed must also be considered, and the HCI (Human Computer Interface).
This results in a <B>Design</B> specification, which details the function of the system and may include its <B>Algorithm</B>s, <B>Design</B>s, screen layouts or data storage <B>Method</B>s.
Includes the thorough testing component of the system, using different approaches:
This covers how the system will be installed. This includes any hardware purchases, staff training, data file creation, the changeover <B>Method</B>, and future <B>Maintenance</B>.
There are two types - user and technical.
There are 3 main <B>Method</B>s of conversion/changeover used:
3 main types:
This model uses prototype systems, which lack the total functionality of the final system. This could include screen mock-ups or a partially working system. This can be shown to the user for feedback and comments, from which improvements can be made. Each build-evaluate cycle adds improvements until the product is finished and the final prototype becomes the finished system. It is well suited to projects where requirements are unclear at the outset, and is likely to result in a product have excellent usability due to the feedback loop of prototyping. However, it is not suited to creating efficient code, and it does require the involvement of the end user.
The agile <B>Method</B>ology is a collection of <B>Method</B>ologies which cope well with changing requirements. The software is produced in an iterative manner, and features can be added in each iteration.
XP puts an emphasis on the coding. A representative customer becomes a part of the team and provides "user stories" (requirements), devises tests and answers programmers questions. Iterations are short , and it produces "working versions" - the code will be used in the final product. The order of the user stories must be decided when programming, and code is written by programmers in pairs (<B>Pair programming</B>). One programmer codes while the other evaluates the code written, and they swap regularly. Code is refactored to make it more efficient and a clear set of standards are used during development. Programmers work no more than 40 hours a week. The final code quality is likely to be very high, however this <B>Method</B> requires a close-knit team and the customer must constantly commit a staff member to the developers.
A low level language is one who's programming statements are geared towards a particular CPU family, such as the x86 family of processors. They are almost, but not quite, machine code. An example of a low level language is <B>Assembly Language</B>. Chip makers, such as Intel or ARM, provide programmers with an <B>Assembly Language</B> with which to code their particular CPU. The language is CPU specific and makes direct use of its internal registers. Mnemonics are used as programming code, such as "MOV" or "ADD" and make use of <B>Opcode</B>s and operands. An <B>Opcode</B> indicates the action the CPU must take, while the operand hold the address or the data to be operated on. There are many different memory modes that can be used, and labels are used as reference points, to allow the code to jump from one part to another.
Low level languages are excellent for close control of the CPU, for example many <B>Device Driver</B>s are written in a low level language. Their programs can be very efficient if well optimised and written. They can however be difficult to use as the programming commands can be quite obscure. A good assembly programmer must know a lot about the internal structure of the CPU, about its specific registers and memory management <B>Method</B>s. Low level languages also produce the least por<B>Table</B> <B>Source Code</B>.
A procedural language operates in a step-by-step manner; specific instructions are coded for the computer to carry out in a "do this, then this, followed by this" format. It is one of the most common programming paradigms in use. They are an example of 3rd generation languages, which make writing code easier by allowing people to easily read and understand it. This is achieved by naming variables and using functions/subroutines. Examples of procedural languages include FORTRAN, COBOL, Pascal and C.
Procedural languages are excellent for general purpose programming, and there are many resources available on well tried and tested <B>Algorithm</B>s. They offer a good level of control without knowing the intricacies of the CPU, and provide <B>Source Code</B> which is por<B>Table</B>. However, for a programmer to get work they must often specialise in a language - the requirements of a C programmer will be different to those of a COBOL specialist. To get a good quality program, the programmer must be very precise and knowledgeable about the programming instructions required, so a fully debugged and working program takes longer to construct than a 4th generation language. They are not as efficient as low level <B>Source Code</B>, and are poor at handling fuzzy conditions, which can be found in areas such as AI (Artificial Intelligence).
<B>Object</B> orientated languages make use of the idea of <B>Class</B>es and <B>Object</B>s. A program written in OOC will be made up of a number of these <B>Class</B>es and <B>Object</B>s, which are manipulated through their internal <B>Method</B>s. Before <B>Object</B> orientated programming (OOP) was created, procedural languages such as C treated data and programming instructions that act upon the data as separate things. This made it very easy to write faulty code, such that one part of the program would overwrite data at the incorrect time.
OOP uses the idea of self-contained <B>Object</B>s, which contain both the programming routines and the data being processed. The program is <B>Design</B>ed as a collective of <B>Object</B>s which interact through the use of their public <B>Method</B>s. <B>Object</B> <B>Class</B>es may be used in other programs. OOP's tend to be more reliable, as <B>Object</B>s are self-contained & so are easier to program. There are no hierarchical structures as in the traditional top-down <B>Design</B>.
The benefits of an OOP are they make it easier to write working code; a <B>Class</B> can be fully tested & released for other coders in the team to use. <B>Class</B>es can be treated as black boxes, as other coders don't need to know how it works internally, just how to manipulate it through its <B>Method</B>s. There are many <B>Design</B> patterns already available which solve common programming tasks. A coder can pick up a pattern for a UI for example, and begin coding straight away. <B>Class</B>es can easily be used in multiple projects as they can be reused. The code is also por<B>Table</B>, as it only requires the CPU specific <B>Compiler</B>.
Drawbacks of OOP include its steep learning curve, as becoming proficient in an OOP language can be difficult, as it requires a different way of thinking about problems to a standard programming language. This complexity requires skill to create efficient and flexible <B>Class</B>es. They are also not as efficient and compact as low level language coding.
This is when a <B>Method</B> is defined more than once within a <B>Class</B>, for use in different situations. It may occur when different types or quantities of data are being put into an <B>Object</B>. The supplied parameters determine what <B>Method</B> is used.
<B>Overloading</B> is when calling one <B>Method</B> will have a different effect depending on the data supplied to it.
For example: 
Alternatively, <B>Overloading</B> can act differently depending on the type of data given:
A specialist form of <B>Overloading</B>, which allows for very general <B>Object</B> structures which can be used for a variety of data types.
<B>Polymorphism</B> is when multiple <B>Object</B>s act consistently when the same <B>Method</B> name is called on them.
For example:
<B>Data Encapsulation</B> is the combining of properties and <B>Method</B>s for an <B>Object</B>. Assigning and retrieving <B>Object</B> property values are only done using <B>Method</B>s to access the data.
Encapsulation - Where technical details of <B>Method</B>s or properties are hidden within the <B>Object</B>, and data can only be changed by using the appropriate <B>Method</B>s. Ideally all <B>Method</B>s & properties of an <B>Object</B> will be encapsulated. It is the pattern of making <B>Attribute</B>s in a <B>Class</B> private, but allowing them to be changed and accessed through public <B>Method</B>s.
<B>Data Encapsulation</B> is one of the key advantages of <B>Object</B>-oriented code. It means that once you've written code that works, you can guarantee that it is not the source of any future problems as, since only its public <B>Method</B>s (which you've rigorously tested) can be used to change its <B>Attribute</B>s, it will never go wrong. There is something very appealing about being able to create something useful and package it away such that it will always work.
This form of language tells a computer what to do, but not how to do it. An example of this type of language could be Prolog or SQL. They are concerned with facts, rules, making queries or asking questions. They are typically used in AI, logic based and knowledge based systems, or expert systems.
These languages are concerned with providing answers to problems purely by applying calculations to input data. They don't change anything other than the input data provided at that point. They have no "side effects" unlike procedural languages. In functional languages, calculations are referred to as functions. They are used extensively in mathematical environments including engineering, finance and <B>Network</B> engineering.
<B>Lossy Compression</B> reduces the size of a file by removing certain data. The original file cannot be recovered from the compressed version as the removed data is lost. It is typically used for sound and video files, where the change will not necessarily be noticed. For example, in a sound file the compressor could clip off high inaudible frequencies, or a video/image file could have is resolution lowered or its colour range reduced.
<B>Lossless Compression</B> uses redundant data present in files to reduce their size. There are two main <B>Method</B>s:
The best known dictionary encoder is the Lemple-Ziv-Welch (LZW) encoder. It works by examining the file and creating a dictionary, for example:
""Tom Jones survived the jungle. Tom is in the jungle.""
Each word in the sentence can be given a number: 
This long sentence can then be converted to: ""1234516745"" Where each number corresponds to a word in the sentence.
This form of encoding replaces large runs of the same pieces of data with a single data value/quantity. For example, if there are 100 red pixels in a row in an image, this could be encoded as R100. The technique is found in TIFF and BMP files and works best if the data is in long sequences.
<B>Lossless Compression</B> is not often as effective as <B>Lossy Compression</B> when trying to reduce file sizes. Lossless is the only option for files such as text files or execu<B>Table</B> programs, where any loss of data would destroy their functionality.
<B>Encryption</B> is the process of scrambling data in such a way that only the intended recipient can decrypt it. There are two main types, symmetric and asymmetric:
In symmetric <B>Encryption</B>, the same key used to encrypt the message is used to decrypt it. This requires both the sender and recipient to store the key safely. It is very quick to encode and decode, however it is easier to crack as if the key is shared it is likely to be easier to obtain.
This <B>Method</B> uses two separate keys - one key encrypts the message while the other decrypts it. A single public key is known by both, but when the <B>Encryption</B> <B>Algorithm</B> is implemented a second compatible private key is also used. To decrypt the message, the public key is applied alongside the private key again, which allows the message to be revealed. This approach is far safer, however does require more processing power. The keys used are typically very large random numbers, which are unlikely to be guessed.
<B>Asymmetric <B>Encryption</B></B> uses the principle that some mathematical operations are relatively easy to perform, however very difficult to undo. Examples of this are finding the modulus of an exponential and multiplying together two prime numbers.
These <B>Algorithm</B>s have two uses - they can provide a quick way to generate memory addresses for storing <B>Record</B>s in <B>Database</B>s, and also used to store and check passwords. They are commonly used in <B>Network</B> and online transactions. Hashing <B>Algorithm</B>s are one-way functions so it is very easy to covert a plain-text value into a hash but very difficult to convert a hash back to plain-text. This makes it useful for storing passwords, but not encrypting data.
Once a user enters a password, it is hashed and stored on a server. Each time after this, when the user attempts to login, the hashing <B>Algorithm</B> is applied to the entered password and the result is compared to the stored hash. If the hashes are the same the correct password has been entered, otherwise the login is rejected. The hashes cannot easily be converted back to their original passwords, but brute-force attack techniques could be employed by hackers in an attempt to guess the original password.
// e.g. User A enters: password123
sha256($password); // SHA-256 is a one-way hashing function
// ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f
To secure the password even further, a salt can be added during the hash. A salt is a random <B>String</B> that is appended to the password before hashing when it is first stored. This <B>String</B> is then stored so that when the user enters their password again, the same salt can be appended to the password and the check is performed similarly to above. This is advantageous because many people use common passwords like 'password' and by adding a salt, these will not all end up with the same hash. If someone were to gain access to your hashes, seeing that many were the same would narrow down the passwords they'd have to try for those users to just common passwords, allowing them to brute force their way past the password.
// e.g. User B enters: password123
// Random salt: wuphAT=5renE
sha256(sha256($password).$salt);
// a3a0f0c8ce9208fa3d122778b437e0287c70fd829ad07f6672143d114cb244c2
<B>Database</B>s are in use by almost all organisations today. They allow for data to be quickly retrieved, updated and filtered. They allow certain users access to data to be restricted (i.e. users can only see what they are permitted to see), which is good for security as well as focusing on work. They also reduce the likelihood of inconsistencies or errors.
Historically, data was stored in separate files. They were typically stored in serial or <B>Sequential File</B>s as data was stored on magnetic tapes, which had to be written to or read from in sequence.
<B>Record</B>s in a <B>Serial File</B> are stored one after another. This was the only way to store data on a long thin medium such as tape. The file could contain as much or as little data as necessary, but each <B>Record</B> had to have the same structure. To locate a <B>Record</B>, the whole file had to be searched from start to finish. For a large file this could be a lengthy process.
<B>Record</B>s in a <B>Sequential File</B> are stored one after another, but in a certain order. This makes searching for a specific <B>Record</B> much easier. I can however create problems, such as in a days <B>Library</B> transactions. There is no particular order to follow (values such as book number, borrower number or date borrowed) other than chronological, which would be unhelpful.
This means that at intervals, the data must be sorted. This involves writing the data to another file and is only a partial solution. Searching through the file is still time consuming and cannot be done until the sorting is complete.
<B>Indexing</B> allows <B>Sequential File</B>s to be searched more quickly by producing a separate index file. The data is divided into categories, which are linked to a position in the file where the category starts.
Even with all these techniques, there are still inefficiencies due to searching and sorting. Simple <B>Database</B>s in these formats are flat-file <B>Database</B>s.
A fixed length <B>Field</B> is one where each <B>Field</B> is always the same number of bytes long. This allows the software to count bytes in order to count <B>Field</B>s. This is an easy <B>Method</B> to program and is quick to search and easy to calculate the file size for a planned <B>Database</B>, but storage space can be wasted as not all values will use the allocated space for the <B>Field</B>.
Each <B>Field</B> is delimited by a unique identifier, such as a comma. This allows for a much smaller and more flexible file.
A key <B>Field</B> of a <B>Record</B> can be transformed to create a disk address. This allows a device to go straight to a certain part of a disk and start there. This <B>Method</B> works very well with sparse <B>Database</B>s.
In a relational <B>Database</B>, data is stored in separate <B>Table</B>s. Each <B>Table</B> stores data about a specific entity. There are certain rules a relational <B>Database</B> should abide by:
<B>Table</B>s in a relational <B>Database</B> are linked by relationships. Relationships between <B>Record</B>s are produced by setting the value of a <B>Foreign Key</B> <B>Field</B> to that of the <B>Primary Key</B> of the desired <B>Record</B> in another <B>Table</B>.
A <B>Secondary Key</B> allows a relation to be searched quickly, by linking similar items with a non-unique key. For example, a postcode is not unique to a single house, but it can be used to quickly find a house in a neighborhood.
Data is stored in separate <B>Table</B>s to avoid data redundancy. It is not however always obvious how to separate out entities in a <B>Database</B>, so the process of <B>Database</B> normalisation is used.
Normalisation is the process of <B>Design</B>ing a relational <B>Database</B> to be the most effective, making it more efficient and useful. It centres around reducing redundant data and ensuring data dependencies. It is a collection of steps which gradually leads to a normal form.
Benefits of normalisation:
There is data redundancy and may have complex data structures within a single <B>Attribute</B>.
Each <B>Field</B> only contains one piece of data for that <B>Attribute</B>. For example, a subjects <B>Field</B> in a students <B>Table</B> only includes one subject.
To convert from UNF to 1NF:
1NF and has no partial dependencies (no <B>Attribute</B>s are dependent on part of a composite <B>Primary Key</B>).
To convert from 1NF to 2NF:
2NF and contains no non-key dependencies (where an <B>Attribute</B> is dependent on the value of another <B>Attribute</B> which isn't the key).
"All <B>Attribute</B>s are dependent on the key, the whole key, and nothing but the key."
To convert from 2NF to 3NF:
These diagrams demonstrate the relationships between entities:
The DBMS is a piece of software which manages data stored in secondary storage. The DBMS acts as an intermediary between applications accessing the <B>Database</B> and the data stored in the <B>Database</B>.
The DBMS deals with:
The DMBS also has protective and <B>Maintenance</B> roles, including:
To maintain referential integrity, the DBMS ensures <B>Foreign Key</B>s correspond to the <B>Primary Key</B> of a <B>Record</B> in the linked <B>Table</B>. This can be enforced by preventing <B>Record</B>s from being deleted if they are referenced by <B>Record</B>s in other <B>Table</B>s or by cascading and deleting <B>Record</B>s referencing the one being deleted.
A view of the actual data storage. This is only the concern of the DBMS system engineers, as it shows how data items are stored on the disk.
This looks at the construction of <B>Table</B>s, queries, reports and software which will deliver the functionality of the <B>Database</B> to users of the system.
This is the outward appearance of the <B>Database</B>, and the user interface for the end user.
This is a language <B>Design</B>ed to manage data in the <B>Database</B>. It can be used to access, insert and change data and has the ability to create, modify and delete <B>Table</B>s and relationships in a <B>Database</B>.
Retrieving values of specific <B>Field</B>s from a <B>Table</B>
SELECT name, city FROM customers;
Returns the value of "name" and "city" columns for each <B>Record</B> in the "customers" <B>Table</B>.
Retrieving a set of <B>Record</B>s using a condition
SELECT * FROM customers WHERE country = "Mexico";
Returns all columns for <B>Record</B>s in the "customers" <B>Table</B> where the "country" <B>Field</B> is Mexico.
Retrieving a set of <B>Record</B>s using multiple conditions
SELECT * FROM customers WHERE country = "Germany" and city = "Berlin";
Returns all columns for <B>Record</B>s in the "customers" <B>Table</B> where the "country" <B>Field</B> is Germany and "city" is Berlin.
SELECT * FROM customers WHERE city = "Berlin" or city = "Munich";
Returns all columns for <B>Record</B>s in the "customers" <B>Table</B> where the "city" <B>Field</B> is either Berlin or Munich.
Deleting <B>Record</B>s from a <B>Table</B>
DELETE FROM customers WHERE name = "Jordan";
Deletes all <B>Record</B>s from the "customers" <B>Table</B> where the "name" <B>Field</B> is Jordan.
Inserting <B>Record</B>s into a <B>Table</B>
INSERT INTO customers (name, country, city) VALUES ("Matt","England","London");
Inserts a new <B>Record</B> into the "customers" <B>Table</B> with "name" of Matt, "country" England and "city" London.
Deleting a whole <B>Table</B>
DROP <B>Table</B> customers;
Deletes the "customers" <B>Table</B> and all its <B>Record</B>s.
Retrieve linked <B>Record</B>s from multiple <B>Table</B>s
SELECT name, cost FROM customers JOIN orders ON customers.id = order.customer_id;
Returns the customer name and order cost for all <B>Record</B>s in the "orders" <B>Table</B>.
ACID is a set of rules which protect the integrity of a <B>Database</B>, they describe the properties a transaction must conform to. A transaction is a single logical operation performed on a <B>Database</B>.
These are the four basic functions of persistent storage:
A <B>Network</B> is simply a collection of connected computers and devices. These devices are known as nodes, and are most commonly computers, but can include printers, scanners and secondary storage devices. Each device must be connected to the <B>Network</B> via a <B>Network</B> Interface Card (NIC) or equivalent circuitry which is built into their motherboards. Every device connected to the <B>Network</B> must have a means of being uniquely identifiable, so that messages intended for that device reach it. <B>Network</B>s are incredibly common now, due to the desire to share data and communicate efficiently. A centralised location for data storage is ideal for users who all need access to the same data.
Even with the modern day internet there are many organisations which still use their own private <B>Network</B>s. The advantage of a private <B>Network</B> is that it gives complete control to the owner. There is control over:
There are however large downsides to owning a private <B>Network</B>; they require a team of specialist staff, particularly for a large private <B>Network</B>, to maintain it as well as ensure its security. Due to the dependence on these <B>Network</B>s their downtime must be kept to a minimum and various <B>Method</B>s are used to ensure any risks are minimised:
There are common hardware components used in a <B>Network</B>, who's jobs are to generate, transmit and interpret the electrical signals of the <B>Network</B>.
These circuits use Ethernet connections in order to transmit and receive data. Modern day computers mostly have NICs built directly into their motherboards.
<B>MAC Address</B>es are not strictly a hardware item, however they are allocated uniquely to <B>Network</B> connected devices by a manufacturer. They are 48-bit identifiers, usually quoted in 6 pairs of hexadecimal numbers, for example "09:01:17:0E:21:B8" The first 3 octets identify the manufacturer of the equipment, and the rest are allocated in a unique <B>Method</B>.
A <B>Router</B> provides a means of connecting <B>Network</B>s. It recieves data packets from one <B>Network</B> and using the address provided by the packet, it forwards the packet on towards the correct <B>Network</B>. <B>Router</B>s determine where to send packets according to a <B>Table</B> of neighbouring <B>Network</B>s or using an <B>Algorithm</B> to determine the most efficient step for the packet. Each <B>Router</B> knows which other <B>Router</B>s are closest to it and by sharing information it allows the optimum route for a packet to be calculated. Smaller <B>Router</B>s used in homes connect computers to the Internet Service Provider (ISP). Larger organisations and those who run the infrastructure of the internet, use very powerful and high speed <B>Router</B>s which direct traffic accordingly.
Most modern <B>Network</B>s have wireless access points. These enable wireless devices to connect to a <B>Network</B> temporarily. Some organisations use a BYOD policy (Bring Your Own Device) which allows visitors to connect to the organisations <B>Network</B>. This is the same <B>Method</B> that is implemented in many public spaces, such as cafes or train stations. Connections can be made from approximately 100 metres away, which can cause concern over signal interception. There are various <B>Method</B>s which are employed in order to try and circumvent attack:
The <B>Bus</B> <B>Network</B> uses a common backbone, to which each device is connected. This <B>Network</B> has a limited size as the backbone is typically made of copper and hence suffers from attenuation (weakening of the signal) over a distance, which can then lead to error transmission. If one component of the backbone fails, the whole <B>Network</B> will also fail. They also require terminators at either end in order to prevent data reflection and increased data collisions.
A star <B>Network</B> uses <B>Switch</B>es or <B>Hub</B>s to connect device to (a) server(s). This is the most common layout as it allows easy addition of extra nodes, and is far more ro<B>Bus</B>t than a single backbone would be.
A ring <B>Network</B> connects each computer to another two computers. This aims to solve the issue of data collisions by sending data in a single direction. It does mean however that all data passes through all machines, which could be a security concern if the packets were to be inspected.
LAN - Local Area <B>Network</B>. This <B>Network</B> exists in a limited and defined location. This could be a campus, a <B>Class</B>room or a single office building. A key feature of a LAN is the infrastructure running it is owned by the organisation/property owner, who is therefore responsible for its <B>Maintenance</B>.
WAN - Wide Area <B>Network</B>. These <B>Network</B>s cover a large geographical area, often consisting of interconnected LANs spread across multiple sites. The internet can be considered as a WAN, but they are often used where a private link is needed with branches in different places.
SAN - Storage Area <B>Network</B> - This is a dedicated storage <B>Network</B> used for large scale data storage in data-centres. They are incredibly efficient as the servers used consolidate all their storage devices to make up an array of disks of great capacity and very high performance.
MAN - Metropolitan Area <B>Network</B> - These <B>Network</B>s provide WAN services within a city.
PAN - Personal Area <B>Network</B> - These link personal devices, such as a phone, Bluetooth headphones, <B>Table</B>ts and other common devices.
There are two main <B>Network</B> models - client-server and peer-to-peer:
A client server <B>Network</B> uses the model where an entity (in this case the client) requests the services of another entity (the server). It is the most common <B>Network</B> model, as it separates out functions and therefore a more efficient way of managing resources. It works on two separate "<B>Class</B>es" of computer, where the server is a machine providing services to a client. Typically the servers are large and powerful but tend to only serve one purpose, whereas the client machines are less powerful but more general purpose. The server also houses all the security functions, such as usernames, passwords and access rights.
In this type of <B>Network</B>, every computer has equal status. Each computer can act as a client or a server, depending on the circumstances of the time. There is no centralised control system, meaning the model can be cheaper to implement, and benefits such as server-less file sharing are made possible. Torrenting is a popular use of peer-to-peer, as well as the online currency BitCoin.
Complex problems, such as those in <B>Network</B> communication, can use <B>Layering</B> as a means to simplify the problem. A typical <B>Network</B> laying system such as this could be implemented:
This layer is concerned with collecting and disseminating data across a <B>Network</B>. This can be human users or remote devices. This layer needs to work out the nature of the data being collected and how it needs to be used e.g. human readable formats or formatting for another device.
This layer is concerned with how the data is transmitted around the <B>Network</B>.This includes the nodes, the topology in use and how to best get the information from source to recipient.
This is the medium of the <B>Network</B>, which could be optical fibre, copper cable, coaxial cable or even a wireless connection.
This is an openly available model provided by ISO (the International Standards Organisation) and consists of seven layers, using abstraction to easily see each component of the <B>Network</B>:
This is the layer closest to the user. It collects or delivers data and passes it to and from the presentation layer.
This layer deals with any conversions between data as it is sent over the <B>Network</B>, and data as needed by applications. This layer may handle <B>Encryption</B> and decryption operations.
This handles the starting, managing and termination of connection sessions. It provides simplex, half duplex and full duplex operations.
This is concerned with keeping track of the segments of a <B>Network</B>, checking for successful transmission and packetisation.
This layer handles the transmission of data packets and their routing
This controls access, error detection and correction within the model.
This is concerned with the physical connection between devices, and the <B>Transmission Media</B>.
Protocol - An agreed set of rules for communication between two computers. This is agreed between computers during the handshake period. Protocols have logical and physical components. The logical components tend to consist of the types of error checking used (such as parity or check digit) or the bit rate, while the physical components govern how the data is transmitted, such as the type of wires connecting the computers (parallel or serial), the WiFi frequency, the modulation used or the type of routing. Because the first set of protocols to be decided are physical, then logical, the protocols can be layered, meaning one is built upon the other. This means changes can be made to a single layer without modifying the rest of the protocol. This in turn allows protocols to be standardised.
This is a complete set of many protocols covering data transmission across a <B>Network</B>. It consists of four layers:
This layer handles the production, communication and reception of data. The applications must produce data that is usable by the applications requiring it e.g. A remote sensor must produce the correct data for the <B>Analysis</B> program. (This is layers 7-5 in OSI) HTTP (Hypertext Transfer Protocol) and FTP (File Transfer Protocol) operate at this level.
This layer deals with the establishment and termination of connections between <B>Network</B> entities. It ensures the reliable flow of data across the <B>Network</B>.
This layer provides links to transmit data-grams across different <B>Network</B>s. It directs data-grams from one <B>Router</B> to another. This is the level where IP works.
This layer is concerned with transmitting data-grams to the local physical <B>Network</B> - it is <B>Design</B>ed to move the data independently of the hardware, so it can operate over any <B>Transmission Media</B>, such as copper, fibre or WiFi.
When making use of the <B>TCP/IP Stack</B>, each device across the <B>Network</B> is assigned a unique IP address. The current version in use is IPv4, which uses a 32 bit number to identify devices, e.g. 192.167.1.254. They are groups of 4 bytes (an octet). The newest version, IPv6, uses 8 groups of hexadecimal numbers and is displayed in a similar way to a <B>MAC Address</B>. IP addresses can be permanently assigned to a device, although this is uncommon. They are usually dynamically assigned as devices need them, and the addresses are then released at the end of the session. This is controlled by a DHCP (Dynamic Host Configuration Protocol). <B>Network</B>s will often setup their own internal subnet.
The DNS is the Domain Name System, and it is a system for naming resources on a <B>Network</B>. It is a hierarchical system, and is used on private <B>Network</B>s as well as across the internet. Different devices on a TCP/IP <B>Network</B> can be named using this system, so they all have unique names. TLD's (top level domains) are to the far right of the name (such as com, uk, net or edu) then the name moves down in the domain chain moving left. Each different part of the domain name is separated by a dot, for example www.wikibooks.org.uk - ""uk"" is the TLD, then ""org"" is the second level domain, followed by ""wikibooks"" as the third level. The furthest name to the left is the host name, which is the name of the computer where the resource is originally from.
This system is <B>Design</B>ed to allow people to remember user-friendly names, such as google or bing, rather than needing to remember the IP address of the server they are looking for. When you enter the URL (uniform resource locator) of a website into a browser, the URL is sent to a DNS server, which looks up the user-friendly name and finds its IP address. If it find it it will replace the URL with the IP address and connect the devices. If not, if will forward the URL to other DNS servers in an attempt to find the desired IP address.
<B>Circuit <B>Switch</B>ing</B> provides a single physical connection between two devices, similar to how telephone systems used to work. An operator would connect two people directly to each other, and nobody else could use that line during the communication. This is the principle behind <B>Circuit <B>Switch</B>ing</B>, although the operator is replaced by an electro-mechanical valve, or in more modern days transistors were used. This <B>Method</B> of <B>Switch</B>ing is a poor use of resources, as it can require multiple cables which are expensive and take up large amounts of space. There are three processes in a circuit-<B>Switch</B>ing session - connection establishment, data transfer and then connection release. It is an accep<B>Table</B> technology when a long-lasting data stream may be in use.
This is a far more common <B>Method</B> than <B>Circuit <B>Switch</B>ing</B>. Data to be transmitted is broken up into packets, each containing all the information required to direct them to the correct recipient, and then reassemble them. Packets can be sent via different routes depending on connection availabilities, and this allows for a more efficient use of the <B>Network</B>.
The users of a <B>Network</B> are usually required to identify themselves by entering a user ID and password. This is often easy to obtain by potential hackers, as they are usually written down as people cannot remember them. A brute force attack can also be used in an attempt to try out every possible combination of passwords. To circumvent this problem, modern security systems often as for another means of identification, such as a card, a phone or an extra security PIN. Sometimes captchas are used, which are readable by humans but not machines, ensuring a human is logging in rather than an automated machine.
The purpose of a <B>Firewall</B> is to control the traffic flowing in and out of a <B>Network</B>. It can be hardware or software based, and sometimes is a combination of both. It can be setup to block individual website addresses or specific computers. Rules can also be applied so that specific words or other bit streams are filtered out. Packet filtering will inspect packets as they pass through the <B>Firewall</B>, and can reject them if they match a pattern. This works at the 3 lowest levels of the OSI model. Other systems can retain packets to determine if they are part of an existing transmission or the start of a new message.
Proxies are able to act as <B>Firewall</B>s, and are computers situated between one <B>Network</B> and a remote resource. If a user requests a service from the <B>Network</B>, it is first passed to the proxy, before the proxy server then performs the request on the behalf of the <B>Network</B> user. If the resource is banned the request can be rejected, There is never any direct contact between user and resource, as the proxy acts as a "middle man".
This is a <B>Method</B> of concealing information in such a way that noone other than the intended recipient is able to read it. It is used massively in <B>Network</B>ing due to the risk of data interception. Large keys are typically used in <B>Network</B> transmission, ranging from 64 bits all the way up to 192 bits. <B>Encryption</B> is also a critical part of VPNs (Virtual Private <B>Network</B>s), as the infrastructure is shared with multiple users.
When we store data, we assign it a specific type. The type we use for a piece of data affects how we store and process it.
You need to have an understanding of the following types.
Numbers can be represented in many bases, it so happens that humans use denary (or base 10) when working with numbers.
Let's take the number 184. We can break it into units, 10s and 100s columns like so:
What we place in the cell is the number of times we want the column added to get our number. Here, we want one 100, eight 10s and four 1s.
formula_1
We can see that each column increases by a factor of 10 which is the base we are representing the number in.
Let's see how this works in binary (base 2) taking the number 14.
This gives us 14 in base 2.
formula_4
In the example above we used 4 bits (i.e we had 4 columns which we could fill to represent the number). As with denary, larger numbers require more columns so in this next example we will use 8 bits.
Starting with the number 215.
Therefore 215 can be written as formula_10.
Representing negative numbers in binary is a more complicated process as we need a <B>Method</B> of knowing whether a number is negative or not while only being able to use 1 and 0 without confusing them with the number itself. There are two main <B>Method</B>s that are used to represent these numbers: Sign and Magnitude and Twos Complement
This is the simplest <B>Method</B> to represent negative numbers in binary and just involves using the first bit of the number to represent whether the number is negative. If the number is negative then it is a one and if not it is a 0.
For example
However, this also gives us some problems when doing arithmetic with the numbers as if we add 67 and -67, we should get 0. However as shown below this isn't the case.
Which equals 6 with a lost bit due to overflow. This means that calculations cannot be done automatically with sign and magnitude and that numbers must be decoded before they are used.
Two's complement is another <B>Method</B> of representing negative numbers which aims to tackle this problem. The <B>Method</B> for converting a number is a little more complex but it is much more powerful. If we want to represent the number -67, as above we abide by the following steps:
And that's all there is to it. That number now represents -67 in two's complement.
One of the main advantages of using Two's Complement is the ability to do math without conversion. If we take the example from above with 67 added to -67:
Which therefore equals 1 with a lost bit due to overflow. This also works for regular subtraction (add a positive number to a negative number to simulate subtraction). As a result this is used a lot more commonly and can be implemented more easily.
Representing decimals in binary is an even more complex than negative numbers as we need to somehow store where the decimal point is while still maintaining the number and the accuracy that we were given. The <B>Method</B> that you need to know for this is the normalised floating point representation.
This <B>Method</B> uses a standard format for all of the decimal numbers that are stored on a system. It uses a similar <B>Method</B> to how we use standard form to represent a number (345.54 becomes formula_11) by defining the decimal point to be between the first and second bit and storing how much the number has shifted. The number itself is called the mantissa and has a fixed number of bits and the amount shifted is called the exponent and similarly has a fixed size.
One thing that you need to be careful of when using this <B>Method</B> is that you are very clear in how many bits are used to store each bit of the number. This becomes very important when dealing either with large numbers or numbers with lots of decimal digits as you will begin to run into errors where we loose accuracy (floating point errors).
To represent a decimal number normally, we use the columns that we have used previously, but to the right of the 1 column, we add a decimal point and continue the columns using the form formula_12.
From here we can just represent our number. For this example we will be representing the number 47.625. The <B>Integer</B> portion can be represented normally as formula_13 and the decimal portion can be represented as formula_14.
So now we have our number but we would never be able to store it on a device as we have a decimal point in the middle. This is where the idea of the floating point comes in. We need to find the position in the binary where the first change of digits happen. This means the first point where a 0 turns to a 1 or visa-versa. We then place the decimal point between these two values and <B>Record</B> how many times we moved the decimal point.
We place it between the 64 and the 32 as this is the first change from a 0 to 1 that happens in the number, this is now in "normalised form". Then we have moved it six places to the left. In this example we will be using a 10 bit mantissa and a 6 bit exponent (to be stored in a 16 bit register). When using the normalised form, we only take one digit from before the imaginary decimal point and then just work with 0s at the right end of the number. That means that the number we represented there becomes codice_1 when using 10 bits. We then shifted it by 6 to the left which means a positive move of 6. This is codice_2 in 6 bit binary.
Then we can just append the numbers to each other:
codice_1codice_2
This successfully represents the decimal number 47.625 in normalised floating point. This <B>Method</B> can also be used in conjucntion with twos complement in order to represent negative decimals and it can be used to represent very small decimals like 0.00005, however, you must remember that any shifts to the right are negative and shifts to the left are positive.
Just like for denary additions, we align the columns for the two numbers and add the values starting from the right.
The above calculation process can be seen much more clearly in the <B>Table</B>:
formula_15
Check result in denary: formula_16
Hexadecimal is one other form of data representation that is used rather frequently within computing. It is used primarily as it can hold a much large number in a smaller number of digits than binary or denary (although it will always be stored as binary within the computers memory).
Hexadecimal is the name for Base 16 which means we use 16 <B>Character</B>s to represent numbers. As we only have 10 numbers, it branches out to use the <B>Character</B>s codice_5, codice_6, codice_7, codice_8, codice_9 and codice_10 which represent 10, 11, 12, 13, 14 and 15 respectively.
When representing denary numbers in base 16, we use the exact same <B>Method</B> as we do for binary; however, instead of writing the columns as powers of 2, we must write them as powers of 16. 
For example, to represent 7652 in hexadecimal:
So therefore codice_15 is codice_16 in hexadecimal.
Converting from binary directly into hexadecimal is actually a simple process that does not require converting the whole thing back into denary at once. Instead, when converting this way, we simply convert the binary to denary then to hexadecimal one nibble (4 bits) at a time. If we have the number 156 in binary (codice_17), we can place it into our <B>Table</B> and write up the correct headers as shown:
Therefore, this number is codice_18 in hexadecimal.
Bitwise manipulations are specific group of changes that can be made to the bits of a binary number. There are a few that you need to be aware of as part of the specification which are: shifts, ANDs, ORs and XORs. This is a very quick and easy topic once you understand it.
Binary registers can be shifted either to the left or the right and, as the name would suggest, it just moves the binary digits in one direction. Any spaces created will then just be filled with a 0 in the majority of cases.
A left shift moves the contents of the register to the left and discards any bits that no longer fit into the register. This function is important as it is equivalent to multiplying a number by two. In this example we will be using the value of 54: formula_21
Therefore if we left shift (often represented by the <B>Character</B> codice_19) while maintaining a maximum size of 8 bits:
codice_20
codice_21
codice_22
As you can see in the last example, when we shifted by 3, the first bit was 'pushed out' of the register and lost. This is an important consideration when using left shifts as we must be aware of when we are going to lose a potentially important bit. In the first two examples, you can see that each left shift was equal to multiplying the original denary number by a power of two. Left shifting by one multiplied by two and left shifting by two multiplied by four. If we were to use a bigger register then left shifting by 3 would have given us the original value multiplied by 8.
This function is often used when multiplying a number as it can be broken down into multiplying by a power of three and then adding the original number a number of times. For example, multiplying a number by five would be equal to left shifting by two (multiplying by 4) and then adding the original number again.
Right shifts, unsurprisingly, are the opposite of left shifting and instead move the contents of the registers to the right. This section will not go into as much detail as you should already understand the basics of how shifting works and how it can be used.
If we right shift (often represented by the <B>Character</B> codice_23) while maintaining a maximum size of 8 bits:
codice_24
codice_25
codice_26
From the second example, the impact of underflow errors is immediately apparent.
You may not have covered an AND gate fully as this shows up in unit 1.4.3, however you should be able to guess. An AND gate returns a 1 values if the two inputs are both 1.
AND can be used as a bitwise operator in order to AND two binary registers or binary values together. For example, if we have the two registers codice_27 and codice_28 we can do:
codice_29
One application of this is to determine whether a number is divisible by 2. If we AND any value with the binary value codice_11, it will leave us with only the least significant bit (the last bit). If this number is then greater than 0, it is odd, if not it is even.
OR gates return a 1 value if one of the two inputs is a 1. This can be used as a bitwise operator to OR two values together. To the use the example from above:
codice_31
One application of this is to store a range of true or false values within a binary number such as for a very simple control program. If the user wanted to enable a system if it is not already enabled, hey could OR the contents of the register storing the state with a binary number containing a 1 at the position corresponding to a setting. The resulting value would contain the original settings with the required bit set to 1 if it was not already.
XOR gates are a modified version of an OR gate which return a 1 if one of the two inputs is 1 but will return a 0 if they both are. To use the example from above
codice_32
This can be applied again in a control system to toggle settings as if that bit is currently off in the register, it would be enabled, but if it was on it would be <B>Switch</B>ed to off.
Representing is a relatively simple process which uses numbers to represent a symbol. While the process itself is simple, the implementations can actually be more complex. For multiple machines to be able to communicate text, they must have a standard which defines which numbers are used for which <B>Character</B>s. These standards are called <B>Character</B> Sets and vary quite in how the <B>Character</B>s are defined and what sizes are available.
There are a wide, wide range of <B>Character</B> sets that are implemented in different places and systems can even use more than one as long as they are aware of which one is currently in use. You can see a list of common <B>Character</B> sets here. However, you just need to be aware of the existence of two: ASCII and Unicode.
ASCII stands for the American Standard Code for Information Interchange. It was defined in 1963 and was one of the most common encodings. It uses 7 bits to represent <B>Character</B>s by default which allows for a maximum of 128 <B>Character</B>s to be represented. There are also extensions on this standard such as extended ASCII which uses 8 bit to represent <B>Character</B>s which raises the possible options. A <B>Table</B> showing all the ASCII codes along with their corresponding denary values is shown to the side. When text is encoded usig this and stored, each of the denary numbers is represented as binary and stored.
Unicode functions in the same way as ASCII, but it varies in the number of bits it uses to store the <B>Character</B>s. There are multiple subsets of Unicode which have varying amounts of <B>Character</B>s such as codice_33, codice_34, and codice_35. The most recent standard of Unicode (at the time of writing) has 128,237 possible <B>Character</B>s. It has become the new standard for systems and is used when building new systems in order to accommodate a much wider range of <B>Character</B>s and languages.
An image showing a fraction of the possible Unicode symbols is shown to the side. You can read more about Unicode on Wikipedia on the Unicode page.
An unordered data structure, with elements accessed via an <B>Attribute</B> name. This makes the structure more user friendly as the <B>Attribute</B> name describes the data stored.
All <B>Attribute</B>s must be defined before the <B>Record</B> can be used. This makes initialisation of the structure more complicated.
An ordered data structure, with element accessed via an index.
A list which is immu<B>Table</B> (the data stored cannot be modified).
Useful for cases where the data needs to remain unchanged but accessible via an index.
A list of data stored with pointers to the next item in the list.
An array is an ordered data structure that is accessed through an index. It contains a group of elements which are usually of the same type. It is therefore a composite type as it forms a data structure out of pre-existing data types. By default, arrays require their size to be specified when they are defined and this is the number of elements within it. No elements can be added to an index beyond this size. This is adhered to in the majority of programming languages but some languages (namely Python and JavaScript are exceptions as they use a list as the underlying data structure for all defined arrays) break the rules.
One dimensional arrays contain a single group of properties with each being accessed by its index. This are almost approximate to a list, only differing in their fixed size.
While arrays can be defined as a single dimension and hold a set of values as shown previously, they can also be declared as a multi-dimensional array. This means that each index of the array holds another array to the number of dimensions defined. This means that in a 2D array (as shown below) the array would be an array of arrays which would then all contain values. These can be used to store tabular data or data which should be accessed through an x and y coordinate such as pixels or tiles in a game.
These arrays can be incredibly useful to store more complex data but also require more complex programming to accommodate as you must understand exactly how the array is structures in order to access the correct data.
In the example above, shopSales could refer to how much profit was made by a chain of stores with the top index being the quarter and the left index being the shop number. It is worth noting that in many examples, you would need to access the top index first as that would contain the array for the shops themselves. However, this depends on how you initialise and define the array Eg:
let shopSales [4][4] = [
let cheltenham = 0;
let gloucester = 1;
let bristol = 2;
let london = 3;
shopSales[0][cheltenham]; //128.90 - The sales made in the Cheltenham store in the first quarter.
shopSales[3][london]; // 109.49 - The sales made in the London tore in the fourth quarter.
shopSales[2][1] // 40.32 - Gloucester store, second quarter
A stack is a modified implementation of a list. The data structure has a set of rules to follow when it is implemented but the specific implementations of how this structure works will depend on how it is programmed. This is an example of an abstract data types as we are not concerned with the underlying <B>Method</B>, just the abstract functions that allow us to interact with it.
Stacks are an example of a LIFO or a Last-In, First-Out structure. This means that the last element that was added to a stack will be the first element returned when accessed. Stacks have a set of functions that should be implemented no matter where it is:
Some implementations will have slightly varying names for these functions such as codice_1 and codice_2
Some stacks are defined with a fixed size but this depends on the implementation. The idea of the top and bottom of the stack are rather arbitrary, you just need to ensure to remember that items are added and removed from the same end. An example of stack in use is shown below.
stack = new Stack(4); // Define a stack with a maximum capacity of 4 elements.
stack.empty(); // -> True
stack.push(10);
//Stack: [0] 10
stack.pop(); // -> 10
//Stack: empty
stack.push(23);
stack.push(53);
stack.push(12);
stack.push(1);
//Stack: [0] 1
// [1] 12
// [2] 53
// [3] 23
stack.full() // -> True
stack.pop() // -> 1
//Stack: [0] 12
// [1] 53
// [2] 23
A queue is similar to a Stack in the idea that is is an abstract data store that follows a set of rules. It is a FIFO structure or First-In, First-Out meaning that the first piece of data added will be the first piece of data returned when it is queried (how queues work in real life, usually).
It defines its own set of functions:
An example of how to use this is shown below but it has many very useful and real uses within real world programming. For example, if a set of tasks need to be executed, a queue can be used to ensure that they are executed in the order that they were added.
queue = new Queue(4); // Define a queue with a maximum of 4 elements.
queue.empty(); // -> True
queue.enqueue(23)
queue.enqueue(53);
queue.enqueue(12);
queue.enqueue(1);
// Queue: [0] 23
// [1] 53
// [2] 12
// [3] 1
queue.full(); // -> True
queue.dequeue(); // -> 23
queue.dequeue(); // -> 53
// Queue: [0] 12
// [1] 1
A tree is a type of data structure that is made up of stems and leaves. There are a number of different types of tree but you only need to be aware of the basics and the features of a <B>Binary Search</B> tree.
Trees are formed from a set of nodes, each of which will contain a value. They then connect downwards to another node which may branch out to another node and so on or will end that chain. An example of a tree is shown to the side
A <B>Binary Search</B> tree is a specific implementation of a tree that follows a set of rules. This kind of tree will have a 'comparison function' or something by a similar name that controls at what position within the tree data will be inserted. This could be something as simple as 'a > b' where a is the data to insert and b is the current node.
When data is inserted, it follows a path through the tree using the comparison function. In the image shown to the side, if we were adding the data 9 then it would go to the root node codice_3. As the value is bigger it goes to the right and would go to the codice_4 node. As the value is smaller it would then go to the left. As there is no node there, it would add the node at that position.
If there was a node to the left, the process would have continued until it reached a point where there was no child node and it would be inserted there. Where duplicates will be placed within a graph depends on how the comparison function is written.
Trees can be traversed in four different ways which dictates how you travel through the nodes and therefore controls the order in which nodes will be returned.
The official procedure for a preorder traversal is as follows:
The two last steps are achieved by calling this function recursively.
When doing this by hand, you can just draw a line to the left of the nodes and drawing a line around the nodes as shown in the image to the right. This <B>Method</B> works for each traversal, it just depends where you draw the lines.
The official procedure for a inorder traversal is as follows:
The 2nd and 4th steps are achieved by calling this function recursively.
When doing this by hand, you can just draw a line down from each of the nodes and drawing a line around the nodes as shown in the image to the right. This <B>Method</B> works for each traversal, it just depends where you draw the lines.
The official procedure for a postorder traversal is as follows:
The 2nd and 3rd steps are achieved by calling this function recursively.
When doing this by hand, you can just draw a line to the right of the nodes and drawing a line around the nodes as shown in the image to the right. This <B>Method</B> works for each traversal, it just depends where you draw the lines.
Breadth first traversal does not have a specific procedure on how to access nodes but it is very easy to guess. It visits each level of the tree in order and outputs the content of the nodes from left to right.
You do not need to know how to implement this but it is worth knowing just how it works.
A graph is similar to a tree but has much more complexity. It is made up of nodes and connections like a tree but instead of each node only connecting down, any node can connect to another. Each connection will either have a direction associated with it (for example a connects to b) in which case the graph is called directed, or it will have no direction (for example codice_5 and codice_6 have a connection) in which case it is called undirected.
Graphs are exceptionally good at modelling large amounts of complex data as it allows for a more natural <B>Method</B> of connecting data. Some graphs will be shown with numbers next to their connections, these are called weightings and affect how traversals work when using <B>Algorithm</B>s such as Dijkstra's.
You must know how to traverse a graph data structure as well which comes in the form of two <B>Algorithm</B>s. These are copied verbatim from the OCR Computing book.
Data is stored in a memory location generated by passing the data's identifier through a <B>Hash Function</B>. The <B>Hash Function</B> generates a memory address to store the data for an item, it always returns the same answer for a particular input identifier.
Some simple <B>Hash Function</B>s give the same memory address to different items of data. In these cases a <B>Method</B> for recalculating the duplicated addresses will be stated. This might be go to the next available memory address or check every third memory address afterwards until one is available.
The letters above each column correspond to inputs and outputs; Usually the first two sequential letters in the alphabet are inputs, then the letters to the right of those are the outputs, for example in the AND Gate, A & B are inputs while Q is an output.
Truth <B>Table</B>:
Truth <B>Table</B>:
Truth <B>Table</B>:
Truth <B>Table</B>:
Truth <B>Table</B>:
Truth <B>Table</B>:
OCR will be using the mathematicians style of syntax for questions in the exam, but conversion to the engineers syntax is simple and makes simplifying the algebra easier.
formula_1
formula_2
formula_3
formula_4
formula_5
formula_6
formula_7
formula_8
formula_9
formula_10
formula_11
formula_12
formula_13
formula_14
formula_15
formula_16
formula_17
formula_18
formula_19
formula_20
formula_21
formula_22
formula_23
These maps use pattern recognition to simplify <B>Boolean</B> expressions. <B>Table</B>s of possible inputs are mapped against all possible outputs:
e.g.
To solve this map, initially the coloured squares must be created. Any binary values of 1 are grouped together into groups of 1, 2, 4, 8 etc. Then look at each coloured block and identify what components do not change:
In the Gold block (left hand square) the values of C & A do not change from 0, therefore this block is:
formula_24
In the Brown block (left hand rectangle) the values of A and B do not change, therefore this block is:
formula_25
In the red block (right hand square) the values of A and C do not change, therefore this block is:
formula_26
In the green block (right hand rectangle) the values of A and B do not change, therefore this block is:
formula_27
In the grey-blue block (middle centre) the values of B, C and D do not change, therefore this block is:
formula_28
Finally in the bottom purple/blue block, the values of B, C and D do not change, therefore this block is:
formula_29
These values can then all be combined:
formula_30
There are certain rules for these Karnaugh maps:
Truth <B>Table</B>:
Where S is A XOR B and C is A AND B
Truth <B>Table</B>:
This is a combination of 2 half adders and an OR gate.
These circuits are capable of storing information.
Truth <B>Table</B>:
As shown above for the final two values, the circuit can exist in either state depending on the previously stored values.
A D-Type flip-flop is a logic circuit that can store one bit of information, flipping between two states. The D, in D-type flip flop, stands for delay.
A change is triggered when the clock is at a positive (leading) edge, the state of the control input is stored for the clock cycle. An example can be seen below.
The D-type flip flop has two inputs, the control (formula_31) and the clock signal, along with two outputs, the stored data (formula_32) and the inverse (formula_33).
You may be asked to complete the output signal for a diagram, like the above, given the control input and the clock.
The Act concerns the storage of data about individual people. It creates the role of Data Controller, whose job is to ensure the accuracy and security of the data stored about said individuals (the data subjects).
It consists of 8 main provisions which must be followed:
There are some no<B>Table</B> exemptions to the Act:
This Act is targeted at hackers and those who attempt to access a system without authorisation. Under the act it is a criminal offence to:
To try and reduce the threat from hackers, various technologies are used to defend against malicious attack. For example, <B>Firewall</B>s and the SSL (Secure Socket Layer) protocol can be used to help improve <B>Network</B> security and prevent unauthorised access.
The purpose of the CDPA is to protect the intellectual property (IP) of a person or company. The act makes it illegal to copy, modify or distribute IP without permission. There are many sites online offering copyrighted material for free download, or using P2P transfers like Torrents to obtain material. This prevents the original creator obtaining money and credit for their work. The act covers many different forms of material, some of which are listed below:
This more recent act was created in response to increased online criminal activity and allowed the government to intercept communications. It provides certain authorities such as the police the right to:
The act contains some components which impact the use of computers:
This act is <B>Design</B>ed to deal with threats of violence or material <B>Design</B>ed to cause harm.
This act makes it illegal to discriminate against anyone with certain protected <B>Character</B>istics. The main implications this has in computing is web services, where certain features must be employed to make websites more accessible for disabled users:
As part of the specification, you are required to be aware of a range of topics in computing in which there could be moral and ethical issues. These include the impact of AI, how <B>Character</B> sets can affect usage, accessibility of webpages and more. This page will only aim to give a quick overview of the topics but will not go into too much depth.
The development of computers provided an entirely new way to do many tasks and as computers have advances and become more complex, it has opened up more opportunities for places in which they can be implemented. In the past few years, computers have begun to form an essential part of any workforce, no matter the type of work that they are doing.
Additionally, specially <B>Design</B>ed computers, such as in the form of robots, have been developed which are able to replace what would previously have taken a person to achieve. One of the key examples of this would be in manufacturing industries such as car production. Before the use of robots, it would have required teams of people working along a production lines to produce a car. However, with the advancements in automation, almost an entire factory can be replaced by a set of machines on a production lines which can produce cars with greater accuracy for less money over time.
Furthermore, this change in the workforce has influenced the skill sets required for many jobs as it is assumed that you will be interacting with a computer in many jobs. It has also opened up many job opportunities related to the production, <B>Maintenance</B> and use of these machines. For example, in a factory you need people to <B>Design</B>, produce, develop, test, implement, maintain and control the robots producing the cars.
The rise of online marketplaces and online banking have also changed the face of retail and finance meaning that jobs such as a bank clerk are less in demand as more people move to managing their money online. With the rise of marketplaces as well, we have seen a rise in the number of stores that do not actually have a shop, where all transactions are handled online.
Automated decision making is the process by which computers make a decision based on some range of data available to it. It is most frequently implemented in places where many decisions of the same type need to be made in very quick succession. This is not be confused with AI as this topic only covers basic decisions on a single topic based around data. One of the main implementations, and one of the most well-known, is in the <B>Field</B> of financial trading.
In 2011 it was estimated that 77% of trades made in the UK stock markets were as a result of automatic traders or <B>Algorithm</B>ic trading. These systems use various models, using the historical data from the market, to predict the best times to buy and sell in order to try and make a profit. The developments in computing power has led to a significant rise in their use as computers are capable of modelling a predicted outcome in a manner of nanoseconds before performing a trade.
Financial trading, however, is not the only place in which these systems can be implemented. Any <B>Field</B> that requires fast and predic<B>Table</B> decisions to be made can benefit from systems such as these. These include:
It is always worth remembering that these system are only as accurate as their data and their logic. This means that if the data is faulty then the decisions will not be accurate and if the programming is sub-par, it can cause incorrect results. Depending on where the systems are implemented, these can lead to catastrophic results (examples include speculation that a 2010 flash crash was caused by automatic traders causing a wave of selling).
The aim of developing artificial intelligence is to produce a system that can emulate human intelligence in some real and meaningful way in order to solve problems which require more cognitive thought. There are many different types of lesser versions of AI such as chess playing robots that have been <B>Design</B>ed specifically to be intelligent when applied to the game of chess. Additionally, software such as expert systems link large data sources with more advanced processing <B>Method</B>s to draw connections and are often used within <B>Field</B>s such as medicine and law in order to find relevant diseases and cases respectively based on a set of search criteria.
The main technology used within this <B>Field</B> are neural <B>Network</B>s which attempt to simulate the mental patters of people by creating sets of nodes with various activation functions which will eventually produce a valid output when data is passed through them. They are <B>Design</B>ed to learn from a set of data and then apply that knowledge to a new set of data in order to produce decisions.
Basic AIs have been implemented into many aspects of our day to day lives even though we may not notice them:
All of these systems are based on a vast wealth of knowledge that is queried in some complex way by the queries that are produced from the input of the user. The ideas of full AIs raise some ethical questions such as if an AI had some basic form of sentience, what rights should it have? Should we just be able to <B>Switch</B> it off? Should the programmer be accoun<B>Table</B> for the actions of the machine he created?
One of the main dilemmas with computers that has been around for a long time is the environmental effects. This has become a lot more prominent in the modern day as we have entered into a society in which many believe they must have the newest devices and are constantly changing phones, computers and laptops. This means that we suddenly have many more devices being disposed of and many more being produced every day. This raises some serious concerns about the environmental impact of disposing and producing electronic devices.
The internals of a modern electronic device are very complex and require some toxic materials in small amounts such as airborne dioxins, polychlorinated biphenyls, cadmium, chromium, radioactive isotopes and mercury. While some countries consider these devices to be a hazardous waste as a result, it does not stop them from shipping the devices to places in which there are much looser restrictions. This can lead to situations in which children are picking through old devices in order to find metals that can be recycled or sold which can expose them to the dangerous chemicals
Another key concern with the rise in technology is the rise in the amount of power required to keep them functioning. We have seen more large scale technology companies spring up in recent years and each must host their own technology and servers which will draw incredible amounts of power. It is estimated that Google could be running around 900,000 servers alone. This raises questions about power generation and how that is impacting our environment; however, some companies are becoming aware of this fact and implementing measures as a result such as renewable power generation such as solar panels and turbines.
Censorship has become a popular topic recently within the UK with new laws being passed about censorship of the internet and how we should control the internet in order to limit extremist propaganda and terrorism as a whole. There are two main aspects to censorship: local and country.
This is simply when an organisation places a restriction on their web access. This could include web filters at a school, workplace or a <B>Library</B>. These are often implemented in order to prevent people accessing resources that they should not or things that would reduce productivity within a work place. This includes but is not limited to: social media, games, pornography, web filter bypassing services and more. Many people will agree to these terms willingly as they understand that it is a requirement of their job or the location they are at and because they are most likely temporary as the filters will not impact them when they leave.
This is the more contested issue which can divide people very easily. The extent to which the government has the ability to block and filter access to specific resources has been a very hot topic recently with the rise in radicalisation primarily but also for a range of reasons. The UK recently have passed laws that require ISPs to block specific content including sites relating to extremist politics, extreme pornography, and sites the infringe on copyright law. While these may sound like reasonable restrictions to many in order to protect citizens from unpleasant or illegal content, many view it as the start of more filters in which a government could suppress ideas through filters.
The main question raised is at what point we draw the line between censorship to protect citizens and when it is for alternative purposes. This is a very difficult line to draw with many arguments on either side which has recently cause some major divisions in beliefs. Some believe in a free internet in which nothing is filtered but many realise that there is a need for censorship in situations where it could pose a danger such as in the interests of national security.
However, while we can view this issue from both sides as we still have mostly free access with only some restrictions being introduced, there are many that do not have that freedom such as in countries in which there are dictatorship rules as they can use internet censorship in order to reduce access to anti-political propaganda. One of the main countries that people are aware of is the North Korean internet which is so heavily filtered that only a number of top officials still have access to the outside internet.
Alongside censorship, online surveillance has become a very controversial topic the recent years with the release of the Edward Snowden files revealing the data collection of the NSA and a more general understanding about how much companies can now about us. This has raised serious questions about how much information we want <B>Record</B>ed about us and what right to privacy we have online. Online surveillance poses a very different type of problem from the standard security camera on each corner approach as the internet is usually considered a freer domain.
However, the rise in surveillance and monitoring of behaviours have not just been linked to the internet. With the reduction in price and rise in availability of computers, they have been implemented in many more places to provide new solutions to monitoring. Examples include:
Workplaces have also recently began requesting access to employee social media accounts or to review the content before they hire. This is usually done as the employee is a representative of the company and therefore will, at all times, be reflecting the company and they want to make sure that they will not bring any issues with them to the company. However, many believe that this is a violation of privacy and that their work lives and personal lives should be distinctly separate. “Always eyes watching you and the voice enveloping you. Asleep or awake, indoors or out of doors, in the bath or bed- no escape. Nothing was your own except the few cubic centimeters in your skull.” - George Orwell, 1984With the rise in these surveillance and monitoring systems it has raised many questions as to the extent that we should be monitored and to what freedoms we deserve in the technological age. Many believe that the increased use such as the implementation of the Snoopers Charter mark a move towards 'Big Brother' society; however, many others regard it as a positive move that allows us to protect citizens better and reduce the impact of digital crime.
Linked back to the collection of information about people, the <B>Analysis</B> of personal data has become a massive <B>Field</B> in recent years. There have been a rise in 'big data' companies which specialise in performing large scale <B>Analysis</B> on bulk data which is collected from various sources. To imagine the scale of the data about you, you must consider the sources from which is originates. Every like on social media, every check in on your phone, location data collected by your phones, every web search, every page you access and more. This only scratches the surface of the sources.
Data has become a serious commodity which means that it is often sold between companies in order to make a profit. You can tend to see this happen when you suddenly get emails and communications from companies that you have never registered with. However, it is also used for good within governments to analyse crime hot spots and determine how best to protect citizens.
In science and engineering, there are many different applications such as DNA sequencing and and analysing medical data for trends. There are more applications but you only need to be aware of some.
Web development has taken some sharp turns recently with the rise of material <B>Design</B>, responsive <B>Design</B> and new web technologies. This has led to more and less appreciation for the impact of layout and colour. There have been pushes to ensure that the layout of websites are intuitive for new users and to ensure that they are easy to use. Additionally, in some spaces there have been pushes towards ensure that websites are adaptive to people with various visual impairments or difficulties in viewing some colours such as high contrast modes and muted colour pallets. However, there are other impacts of colour within our societies that are sometimes overlooked which is the mental association with colour that can bias our views towards as site in some way. Basic examples include red being related to a warning or love, green to nature and blue to sorrow or water. However, these only apply to more western cultures. With the wide audience that a website can reach, there may need to be a consideration for the impact of colours between cultures as the meanings behind them can change as you move between countries and cultures. Some cultures, for example, regard some colours as unlucky on certain days which could discourage them from using a service if they were very superstitious.
<B>Character</B> sets have also been considered recently, again due to the wide audiences available. The translation of websites in other languages has become more frequent recently and this has required some basic considerations of how this could limit access. Some <B>Character</B> sets will not contain the <B>Character</B>s required for a specific language which could mean that a website may not be able to be delivered in a language which can makes sites more difficult to use for some. While this is not a large problem with the rise of Unicode <B>Character</B> sets such as UTF-8, it still sometimes needs to be considered when writing applications.
Problem recognition
Backtracking
<B>Algorithm</B>ic approach to a problem where partial solutions to a problem are built up as a pathway to follow → if pathway fails at one point the search begins at the last potentially successful point.
Data Mining
Data mining is possible because of:
<B>Pipelining</B> 
Abstraction and Real World Issues
Levels of Abstraction
A computer scientist, when programming a system, will: 
Anyone can make use of these strategies to:
Computer Example: Caching
Human Example: someone wanting to be a computer professional would need to determine:
Prefetching
The Need for Reusable Program Components
Benefits
Drawbacks
Example – How did NASA think ahead with the New Horizons mission?
Caching
Advantages
Disadvantages 
Inputs and Outputs
About decomposition → used to make a problem more manageable.
Order
When planning a program identifying the decision points is a crucial part of the program <B>Design</B>.
Can be planned using pseudocode, structured statements or flowcharts.
Most modern computers can process a number of instructions at the same time (thanks to multicore processors and <B>Pipelining</B>).
Parallel Processors
Techniques have been developed by computing professionals to solve real world problems and create computer-based solutions. Computational thinking is making use of these techniques to solve problems, with or without a computer. The principle is based on converting a messy problem into something which can be understood, formally represented and solved. This thought process is important as some of the worlds largest problems are complex and difficult to understand. Writing software is also challenging, and the hope is lessons learnt from producing software can be applied more widely to provide solutions.
Historically, many problems have been solved by applying mathematics, with or without known physical laws. For example, plotting a course to the moon, or estimating the metal required to build a boat. In these cases, a reasonably accurate solution can be obtained using calculations and collected data. Problems begin to arise if the quality of the data is poor or the applied mathematics is not representative of the real world.
Many problems which must be solved are far less likely to be receptive to a reliable solution. Not all problems can be easily described, due to incorrectly understood underlying issues, data being insufficient for incorrect, or the underlying issues being excessively complex. These problems cause trouble when people think they understand them. This can then lead to poor solutions, which don't solve a problem or can make things worse. Messy problems include biological and ecological systems, the climate a societal models.
In all these cases, the sheer complexity defeats the normal scientific and mathematical approach. Help in solving messy problems will come from computational thinking and it already has - the use of the shotgun sequencing <B>Algorithm</B> to piece together the structure of the human genome is one such example.
More often, difficult problems can be solved by applying <B>Algorithm</B>s. These can be helpful, as teaching a problem solving approach to a computer helps understand the problem. <B>Algorithm</B>ic solutions can be quickly executed by modern computer systems, and it is possible to resort to trial and error. <B>Algorithm</B>ic thinking follows four stages:
This is an approach to problem solving which involves starting with the bigger picture. This is then broken down into sub-problems, which can be represented as black boxes - where the detail is left
until later.
This is a way of dividing a large program into modules. Each module solves a single problem, then all the modules are put together. This approach is aided by the realisation that all programs tend to be made up of sequences, iterations and selections.
OOP is another way in which decomposition is regularly used to solve programming problems. <B>Object</B>s consist of isolated program units containing code and data. These can then be put together to form a complete solution. The <B>Object</B>s are an example of abstraction and can be used with or without modification.
The aim of writing <B>Algorithm</B>s is to produce a process that will work on a generalised representation of a problem, to allow it to work for similar problems. To produce a good <B>Algorithm</B> it must be determined that it is correct and efficient. Proving an <B>Algorithm</B> is incorrect can be trivial - in just one case it must be shown that it fails. Proving it is correct is far harder. Sometimes a problem is too hard and a good enough solution must be accepted.
A <B>Linear Search</B> simply looks at each item in the list of values to be searched through until it finds the correct value. This is acceptably efficient for small amounts of data, however once the volume of data increases it becomes far less efficient. In Big O Notation, it can be defined as O(n), as the time taken for search increases proportionally to the number of data items being searched through.
A <B>Binary Search</B> requires that the data is sorted prior to being searched through. It begins by splitting the list of data in half and determining which half contains the value required. The half which does not contain the required data is disregarded, and the process repeats until the value is found.
A <B>Bubble Sort</B> is the simplest type of sort. It inspects each element individually, and determines if its neighbour is larger or smaller than it. If it is smaller, it remains in its current place and the <B>Algorithm</B> moves to the next element. If it is larger than its neighbour, the <B>Algorithm</B> swaps the two over. This then iterates over the whole sorting item, until no more shifts are made. At this point the item can be said to be sorted.
This works by creating two separate lists, a sorted list and an unsorted list. Initially an item is pulled from the unsorted list into the sorted list. From here, another item is pulled, and if the item is greater than the current item in the sorted list, it is placed in front, else it is placed behind the sorted item. The next item is pulled in and compared, if it is the largest value it goes at the front, smallest goes to the back, and if it is between both it is placed in the middle. This process repeats until the whole list is sorted.
The quick-sort <B>Algorithm</B> uses a value in the list known as the pivot. Any values larger than the pivot are placed to the right, any smaller go to the left. This creates two sub-lists either side of the pivot. This process repeats with both lists, until all the sub-lists have become pivots. At this point the list can be considered sorted.
Dijkstra's <B>Algorithm</B> acts upon a graph and finds the shortest path from node to another. A graph is a collection of nodes connected by arcs. Arcs can have values associated with them, which are referred to as the cost of the arc. Nodes and arcs could represent many different things because they are generally an abstraction of reality. For example, nodes could <B>Router</B>s on a <B>Network</B> and arcs could be the physical connections between them and their costs being the time taken for a signal to go down one route. Alternatively, nodes might represent towns and arcs might represent the roads between them, with their costs being how much petrol is needed to travel down the road. Dijkstra's is used to traverse a graph from one node to another whilst minimising cost, so could be used to find the fastest way to send a packet from one <B>Router</B> to another or to find a route from one town to another using as little fuel as possible.
Here's a description of how the <B>Algorithm</B> works.
1. Each node is given two values:
2. The node with the shortest temporary path length that doesn't yet have a final path length is selected to be the next node to expand
3. If the target node has a final path length, go to the next step, otherwise we return to step 2.
4. Trace back through the graph from the target node
This is largely the same as Dijkstra's <B>Algorithm</B>, only it makes use of a heuristic to make the search more efficient. A heuristic is effectively an educated guess of what the length of the path from a given node to the target node might be. For example, when finding paths between towns, a heuristic might be the straight line distance between the towns. Heuristics like this that are always an underestimate are known as admissible heuristics and have the <B>Character</B>istic that when used with the A* <B>Algorithm</B>, will always result in an optimal path being found. However, heuristics that are not admissible can still be used as they will seriously cut down the number of paths that need to be looked at before a good one is found. In many cases, following Dijkstra's <B>Algorithm</B> would involve looking at many paths that are unlikely to be the right one, such as paths that obviously go away from the target. Heuristics give us a way to use this knowledge to speed up the <B>Algorithm</B> we're using to find a path.
How A* differs from Dijkstra is that it has three values for each node rather than two: temporary path cost, final path cost and heuristic cost. When selecting a node to expand, for each node without a final path cost, a total value is calculated which is the sum of the temporary path cost and the heuristic cost. The node with the lowest total will be expanded.
The final AQA A-Level Computing Text Book will consist of 4 books:
This is a book about A-Level Computer Science. It aims to fit with the Eduqas GCE AS and GCE A-Level sylla<B>Bus</B> but is not endorsed by WJEC Eduqas. It should be useful as a revision guide or to find alternative explanations to the ones in your textbook. If you haven't heard of an A-Level then this book probably won't be of much interest to you but you can find out about them at Wikipedia.
If any part of this book "is" unclear or even wrong then please post a comment on the discussion page or simply fix it yourself! In particular, please say if the book assumes any knowledge or skills which not all A-Level Computer Science students have.
/Component 1/
/Component 2/
/Component 3/
A programmed solution to a problem, Non-exam assessment.
You will meet several coloured boxes, here are their meanings:
"What the specification says you must learn for each chapter"
"Example questions and how to solve them"
"Topics that aren't examined but you might be interested in"
There will be a lot of concepts that you need to be familiar with, definitions are highlighted like so:
<B>Algorithm</B>s:
Pseudocode:
Pseudocode are 
flowcharts:
flowcharts 
Explain the term <B>Algorithm</B> and describe common
<B>Method</B>s of defining <B>Algorithm</B>s,
and flowcharts.
A data structure is a group / set / collection of related data items / elements. Examples of data structures are: queues, stacks, binary trees, <B>Record</B>s, arrays and linked list
Arrays: 
An array is a set of data elements of the same type. Each element is accessed by it's index, with the first element having index 0. Arrays can have multiple dimensions - a 1D array is like a list, and each element is accessed by its position value. A 2D array is a <B>Table</B>, with each element being accessed with its column and row, formatted as (column, row). Finally, a 3D array is a collection of <B>Table</B>s, or an array of 2D arrays. There is no limit on the number of dimensions an array can have, but more dimensions make it harder to visualize and understand intuitively.
Arrays are static data structures. This means that once they have been declared, it cannot change in size. As a result, an arrya defined with 5 items can never contain any more than this.
<B>Record</B>s:
A <B>Record</B> is a set of data items all related to a single individual / entity etc. It can contain data of different types, such as Name(<B>String</B>). Age(<B>Integer</B>) and DOB(Date).
Stacks and Queues:
A stack is a LI-FO data structure ; Last In, First Out. This means data is removed in the opposite order to which it was added, with the most recent entry being the first to go. Think of it like a pile of books - the top one has to be removed before you can access anything underneath it. An example of a stack is the 'undo' feature; the last thing you write is the first to be removed.
A queue, on the other hand, is a First In, First Out (FIFO) data structure. Data is removed in the order it was added, much like a conventional queue. Queues are used in printers to ensure jobs are printed in the order they arrive, and as a keyboard buffer to ensure each key is processed in sequence.
Adding data to a stack or queue is known as pushing, whilst removing data is called popping.
Linked lists:
A linked list is a set of data elements, where each element contains the data itself and pointer to the next element. The final element has a pointer to a rouge value (NULL), signifying the end of the list.The advantages of using a linked list are that New items can be inserted into a linked list without rearranging all the other elements.A linked list is an example of a dynamic data structure, which means it can change in size, and so can use memory more efficiently. 
<B>Binary Search</B> Trees:
A <B>Binary Search</B> tree is compose of nodes and links between them. Each node has up to two more coming off it, similar in <B>Design</B> to a family tree or a prime factor tree. The important aspect of a <B>Binary Search</B> tree, however, is that the data on the left branch must be less than the data in the node, and data on the right branch must be more than the data held in the node.
Backus-Naur Form (BNF)
BNF is used to describe unambiguously the syntax/grammar of a programming/computer language.
Describe the distinguishing features of different types of
programming paradigms, including procedural, event-driven,
visual and mark-up languages.
Procedural languages
Put simply, procedural languages are concerned with carrying out an ordered set of instructions. A more in-depth description would say procedural languages are used in traditional programming based on <B>Algorithm</B>s or a logical step by- step process for solving a problem, by use of sequenced commands, including variable assignment, selection and iteration. This means a procedural language is well suited to carrying out calculations and solving problems with a predetermined sequence of actions.
A <B>Procedural Programming</B> language provides the programmer a way to define precisely each step when performing a task, allowing tight control over the underlying operation of the hardware. 
Modularity is introduced to <B>Procedural Programming</B> through the use of procedures and functions, which are a series of steps that can be called at any point in the program, even part way through another procedure. These are used in larger programs where similar operations may be carried out at varying stages of the program execution.
Non-procedural languages 
Non-procedural languages are to do with facts/rules/queries. As well as this Non-<B>Procedural Programming</B> language allows programmers to specify the results they want without specifying how to solve the problem. Non-procedural languages are to do with rules / making queries. Used in <B>Database</B> interrogation where retrieving answers are more important than the exact steps required to calculate the result
Artificial intelligence and modelling applications are often written in a non-procedural language
Fourth generation language (4GL)
4GL is used in (e.g.) a relational <B>Database</B> system as a query/manipulation language. As it is aimed at end-users / relatively close to natural language / requires less programming skill. It is the next step from the previous generations. Such as first generation programming languages created construct above the machine-code program
Each subsequent generation represented a further distancing from the binary code that the computer hardware actually reads
Some packages, e.g. Microsoft Access, have in-built programming capabilities. This allows the programmer to customise general purpose packages to exactly meet the needs of the <B>Bus</B>iness. Generally a very high level programming language (English syntax and grammar). Many features such as query, manipulation of data.May have report generators and possibly application generators. May attempt to produce natural language interface
Requires less programming skill
Would be useful in a <B>Database</B> query / manipulation situation
Often used in conjunction with end-user applications to customise their operation without requiring highly developed and specialised programming skills
Visual language
A visual language used for production of <B>Object</B>s / buttons / icons / GUI / Windows / graphics content / event-driven environment.Furthermore it High-level programming language
Particularly sui<B>Table</B> for production of <B>Object</B>s / buttons/ icons, etc. Particularly sui<B>Table</B> for developing with a GUI / graphics
content / event-driven environment (e.g. double-click execute).Maybe easier to learn / more intuitive because visual/ very good help / tools available
scripting language
A scripting language is often embedded in other languages and can add functionality to web pages, etc.
(Accepted not expected): Scripting can be used in systems programming (e.g. shell scripts) in lieu of using a fully functional language (e.g. instead of C). Moreover, it is a set of commands understood by the applications software. Usually embedded in another language and is used to control aspects of the software. Usually a High-level programming language.It Can be interpreted not compiled.Scripting languages provides the programmer a way to define precisely each step when performing a task.Allows tight integration with existing programs or data.Script embedded in (the HTML in) a website to control graphics, etc. Script embedded in a website to load/execute a file when clicked, etc.
<B>Object</B> Orientated Language
In an OOL, code is developed around interactions with <B>Object</B>s, which are a combination of data, and the actions that can be carried out on that data. A <B>Class</B>, on the other hand, is the definition of an <B>Object</B> - it describes the information needed to create and manipulate <B>Object</B>s of that type. This includes information about the <B>Object</B> itself (its <B>Attribute</B>s) and the code for the actions it can perform (called its <B>Method</B>s). 
There are 3 key principles of an <B>Object</B> oriented program: encapsulation, <B>Inheritance</B> and <B>Polymorphism</B>. 
Encapsulation hides the implementation of a <B>Class</B>, and controls access to <B>Method</B>s and data of an <B>Object</B>. This means data is kept inside the <B>Class</B>, and is inaccessible to the rest of the program. <B>Object</B>s control how other <B>Object</B>s interact with themselves, preventing errors e.g. a programmer cannot set the width of a window to -500. An secondary advantage of encapsulation is that once an <B>Object</B> is created, knowledge of its implementation is not necessary to be able to use it. <B>Object</B>s created this way can easily be reused in other programs, and by different programmers.
<B>Inheritance</B> comes about where <B>Class</B>es are grouped by similar <B>Attribute</B>s and <B>Method</B>s. <B>Attribute</B>s and <B>Method</B>s that are in common across there <B>Class</B>es can be given to a parent <B>Class</B>, and the other <B>Class</B>es become sub<B>Class</B>es of this parent <B>Class</B>. The affect of this is that the sub<B>Class</B>es inherit the <B>Method</B>s and <B>Attribute</B>s of their parent <B>Class</B> - that is to say they can use them as their own. This is a benefit, as it means a <B>Method</B> that is held in common only has to be defined once, and then all other <B>Class</B>es that use it can look to their parent <B>Class</B> instead.
Finally, <B>Polymorphism</B> is simply the idea that a <B>Method</B> can work differently depending on the <B>Class</B> that runs it or the data it is given to work with. For example, an Area <B>Method</B> would calculate area different for the <B>Class</B>es 'circle' and 'square', but both would inherit the calss from their parent <B>Class</B> - 'shape'.
Special Purpose Language
Special purpose Languages are ones that were <B>Design</B>ed with a specific purpose in mind as opposed to a more general use language.They might have essential/helpful features relevant to the application. Are available for simulation, control etc. Very specialised with built-in functions/abilities that lend themselves directly to solving the problem that the language was <B>Design</B>ed to work on. It is Used in: Computer-aided <B>Design</B>, Artificial intelligence, Expert systems, Scientific applications, Games programming (DirectX etc)
Systems <B>Analysis</B>
Approaches Describe different appropriate approaches to <B>Analysis</B>
and <B>Design</B>, including Waterfall and Agile.
Feasibility Describe the purpose of a <B>Feasibility Study</B> and describe
the processes that an analyst would carry out during a
<B>Feasibility Study</B>.
Explain that proposed solutions must be cost effective,
developed to an agreed time scale and within an agreed
budget.
Investigation Describe the different <B>Method</B>s of investigation.
Protocol:
A protocol is an agreed upon format (set of rules) which allows two devices to communicate. / the transfer of data.
RAM:
it has fast read and write access and is volatile
used to store data and currently running programs
RAM is needed because most data on computers is stored in much slower "storage media" such as hard disks, solid-state drives or <B>Flash Memory</B>
For the processor to be able to work on data or run programs at any reasonable speed, the programs or data need to be copied into RAM first.
<B>Cache Memory</B>:
is similar to RAM, except it resides on or close to the CPU
is faster than RAM and is also volatile
used to store frequently used data from main memory
used by the processor to avoid having to slow down to the speed of the RAM all the time 
usually quite low-capacity (a few megabytes), so RAM is still needed in order to avoid constantly accessing things from slow storage media.
Defragmentation: https://www.youtube.com/watch?v=XSvOfu2PfXk
